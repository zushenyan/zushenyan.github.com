{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/ct/long-polling.png","path":"images/ct/long-polling.png","modified":0,"renderable":0},{"_id":"source/images/ct/polling.png","path":"images/ct/polling.png","modified":0,"renderable":0},{"_id":"source/images/ct/server-push.png","path":"images/ct/server-push.png","modified":0,"renderable":0},{"_id":"source/images/ct/webrtc-result.png","path":"images/ct/webrtc-result.png","modified":0,"renderable":0},{"_id":"source/images/ct/websocket-client.png","path":"images/ct/websocket-client.png","modified":0,"renderable":0},{"_id":"source/images/ct/websocket-server.png","path":"images/ct/websocket-server.png","modified":0,"renderable":0},{"_id":"source/images/cache-control.png","path":"images/cache-control.png","modified":0,"renderable":0},{"_id":"source/images/https-small.png","path":"images/https-small.png","modified":0,"renderable":0},{"_id":"source/images/weinre_results.png","path":"images/weinre_results.png","modified":0,"renderable":0},{"_id":"source/images/http2.png","path":"images/http2.png","modified":0,"renderable":0},{"_id":"source/images/prorfile_pic.jpg","path":"images/prorfile_pic.jpg","modified":0,"renderable":0},{"_id":"source/images/ip_address.png","path":"images/ip_address.png","modified":0,"renderable":0},{"_id":"source/images/content-encoding.png","path":"images/content-encoding.png","modified":0,"renderable":0},{"_id":"source/images/weinre_phone_bookmark.png","path":"images/weinre_phone_bookmark.png","modified":0,"renderable":0},{"_id":"source/images/https-big.png","path":"images/https-big.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1696273718976},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1696273719908},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1696273719898},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1696273719898},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1696273719908},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1696273719909},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1696273719909},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1696273719909},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1696273719909},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1696273719769},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1696273719910},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1696273719910},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1696273719910},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1696273719910},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1696273719911},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1696273719911},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1696273719911},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1696273719912},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1696273719912},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1696273719913},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1696273719913},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1696273719913},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1696273719914},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1696273719916},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1696273719916},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1696273719917},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1696273719917},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1696273719917},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1696273719918},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1696273719918},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1696273719919},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1696273719918},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1696273719918},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1696273719919},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1696273719919},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1696273719920},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1696273719832},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1696273719839},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1696273719850},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1696273719919},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1696273719851},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1696273719855},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1696273719848},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1696273719847},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1696273719842},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1696273719887},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1696273719833},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1696273719845},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1696273719844},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1696273719846},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1696273719843},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1696273719853},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1696273719838},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1696273719855},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1696273719827},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1696273719812},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1696273719817},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1696273719852},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1696273719806},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1696273719858},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1696273719900},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1696273719900},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1696273719849},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1696273719897},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1696273719907},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1696273719854},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1696273719836},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1696273719789},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1696273719842},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1696273719850},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1696273719840},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1696273719902},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1696273719903},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1696273719860},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1696273719904},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1696273719901},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1696273719903},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1696273719906},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1696273719907},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1696273719905},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1696273719905},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1696273719904},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1696273719905},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1696273719906},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1696273719897},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1696273719894},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1696273719884},{"_id":"source/_posts/2013-08-29-basic-things-about-octopress-dot-dot-dot.markdown","hash":"e9781eb8ea1aded9e3ae08fcc73719511dfd4d80","modified":1694029558303},{"_id":"source/_posts/2013-06-26-new-post.markdown","hash":"ae0b2c7d652d9d7b339a79f91cef2f943dd75228","modified":1694029558303},{"_id":"source/_posts/2013-09-07-differences-between-syncasync.markdown","hash":"86cbdd5bda3c357293bc67a2d6059c865a087544","modified":1694029558304},{"_id":"source/_posts/2013-08-29-pass-this-into-anonymous-function.markdown","hash":"b055a25b297162414dbb0ad8f0fa135cb4fe250f","modified":1694029558303},{"_id":"source/_posts/2013-09-02-how-to-call-paret-function-in-child-class.markdown","hash":"16f673cbb3eb2c8285e0cf93d2340d5f6cd432ef","modified":1694029558304},{"_id":"source/_posts/2013-09-02-javascript-module-pattern.markdown","hash":"3e0fef33bdf6cf9c5a6669fc6ba358a86ee636ab","modified":1694029558304},{"_id":"source/_posts/2013-09-09-debug-pages-on-phones-with-weinre.markdown","hash":"651bd41afdc7063e83de3effd8e1038d9fd819f8","modified":1694029558304},{"_id":"source/_posts/2013-10-16-realtime-syntax-highlight-editor-on-web-how-is-that-possible.markdown","hash":"c04716b516977a135db2bd6d68d3a2b04d3097a6","modified":1694029558304},{"_id":"source/_posts/2015-10-10-frontend-fundamental-http-1-1.markdown","hash":"0503d8983b5da5fd5117f9bdbdba910d992ca94d","modified":1694029558304},{"_id":"source/_posts/2015-10-11-frontend-fundamental-https.markdown","hash":"1deecc4ca70d3f5137b1d3de4a17496dc2c2ddc6","modified":1694029558304},{"_id":"source/_posts/2015-10-11-frontend-fundamental-http-2-0.markdown","hash":"a6d8e25324a26ef989f6203bff72ed2284ffb3b8","modified":1694029558304},{"_id":"source/_posts/2015-10-12-frontend-fundamental-ajax-jsonp-and-cors.markdown","hash":"3997599322d83527036a2fb27722e3ac316916c2","modified":1694029558304},{"_id":"source/_posts/2015-10-26-asynchronous-programming-in-javascript.markdown","hash":"69b077faa5f260d7bd4426f253a4739011c729eb","modified":1694029558305},{"_id":"source/_posts/2015-11-20-backend-fundamental-cookie-and-session.markdown","hash":"3742182436f0b3eca0da24af5facd78526055282","modified":1694029558305},{"_id":"source/_posts/2015-10-13-frontend-fundamental-communication-techniques.markdown","hash":"fe76ae8112a30eace0f9c41723ff63d4f4eabd59","modified":1694029558304},{"_id":"source/_posts/2017-02-08-How-to-Choose-a-lib-framework.md","hash":"aa62237f24871b79af76c5e3f63ef3fd3313f6c8","modified":1694029558305},{"_id":"source/_posts/2016-12-12-Merge-Branch-From-Another-Repo.md","hash":"fa6c3273822c7ec74772d756e65d04c826c991bc","modified":1694029558305},{"_id":"source/_posts/2017-02-13-Introduction-to-Progressive-Web-App-PWA.md","hash":"85705691f57fdedc79fb49302296fd36c2b32eda","modified":1694029558305},{"_id":"source/_posts/2017-04-05-A-Learning-Note-to-Functional-Programming-Part-1.md","hash":"faf823b18a95375a6f74dc8da48baf70f931b42f","modified":1694029558305},{"_id":"source/_posts/2015-12-13-front-end-job-interview-questions.markdown","hash":"a07c6cc9ec6996dd0024101ea496379e807955b8","modified":1694029558305},{"_id":"source/_posts/2017-04-17-A-Learning-Note-of-Functional-Programming-Part-2-Some-Common-Terminology.md","hash":"e30b31c0d563d9fdf95b539de6ead722b9ec1eb7","modified":1694029558305},{"_id":"source/_posts/2017-08-10-GraphQL-vs-REST-My-Review.md","hash":"362415de281f955ec15ad169156e78c657915ca8","modified":1694029558305},{"_id":"source/_posts/2017-03-06-I-love-the-concept-of-anything-can-be-log.md","hash":"7f1303f86d8dcfbea99fa2e3519ad13e3fb3f0ff","modified":1694029558305},{"_id":"source/images/ct/websocket-server.png","hash":"7a9f66e53267771d532928723d2e40b43cd99245","modified":1694029558310},{"_id":"source/images/cache-control.png","hash":"ca61dc75df1dbf4e0790fcd5a0b3f2e5f7941f20","modified":1694029558306},{"_id":"source/images/content-encoding.png","hash":"5917a6e993cc169e1f837a365eac30c743833a2d","modified":1694029558306},{"_id":"source/images/weinre_results.png","hash":"132db8afe7b59a86a93a2c7047b0d76d6d68e124","modified":1694029558314},{"_id":"source/images/ct/polling.png","hash":"5b431edca7c48e9ebe7803afebf2b19b287ae780","modified":1694029558308},{"_id":"source/images/ct/server-push.png","hash":"b655f465d1b7c832bf0deaee26176268b996e4f3","modified":1694029558308},{"_id":"source/images/https-small.png","hash":"e20d6356d32e2bac426a4a5a1bc0663d1f3a3685","modified":1694029558312},{"_id":"source/images/ip_address.png","hash":"8040b22e96c8f590c8ae50677686f75bde58b207","modified":1694029558313},{"_id":"source/images/ct/long-polling.png","hash":"fa614d9ac36fdf3832920cac5dbc6ec6d08d79d3","modified":1694029558307},{"_id":"source/images/ct/webrtc-result.png","hash":"a90662f88739c9971862b8caa20d3c0e9d493274","modified":1694029558309},{"_id":"source/images/ct/websocket-client.png","hash":"77d8efd68cfb071539fd315db510214571018708","modified":1694029558310},{"_id":"source/images/https-big.png","hash":"f42147e3362b3268e37be179d7ee41936f90fd95","modified":1694029558312},{"_id":"source/images/http2.png","hash":"04e7cfb106fe9f2bd398f9eb2ee8342ed39a9823","modified":1694029558311},{"_id":"source/images/weinre_phone_bookmark.png","hash":"e9f9debb69033cfae78df2ee71e435929c5b055a","modified":1694029558314},{"_id":"source/images/prorfile_pic.jpg","hash":"c05ce0a0b71ea65bf69a752410a248ec0a847633","modified":1694029558313},{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1696273886047}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"new post","date":"2013-06-27T00:41:00.000Z","comments":1,"_content":"**WoW**\n\nHere is a sentance.\n\nHere is another!\n\nwow why here are so many sentance and this one it's toooooooooooooooooooooooooooooo long!\n\n{% codeblock code snippet! lang:js %}\nvar arr1 = new Array(arrayLength);\nvar arr2 = new Array(element0, element1, ..., elementN);\n{% endcodeblock %}\n","source":"_posts/2013-06-26-new-post.markdown","raw":"---\nlayout: post\ntitle: \"new post\"\ndate: 2013-06-26 17:41\ncomments: true\n---\n**WoW**\n\nHere is a sentance.\n\nHere is another!\n\nwow why here are so many sentance and this one it's toooooooooooooooooooooooooooooo long!\n\n{% codeblock code snippet! lang:js %}\nvar arr1 = new Array(arrayLength);\nvar arr2 = new Array(element0, element1, ..., elementN);\n{% endcodeblock %}\n","slug":"2013-06-26-new-post","published":1,"updated":"2023-09-06T19:45:58.303Z","_id":"cln99ol7v0001vfvg7phpfn6k","photos":[],"link":"","content":"<p><strong>WoW</strong></p>\n<p>Here is a sentance.</p>\n<p>Here is another!</p>\n<p>wow why here are so many sentance and this one it’s toooooooooooooooooooooooooooooo long!</p>\n<figure class=\"highlight js\"><figcaption><span>code snippet!</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(arrayLength);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(element0, element1, ..., elementN);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>WoW</strong></p>\n<p>Here is a sentance.</p>\n<p>Here is another!</p>\n<p>wow why here are so many sentance and this one it’s toooooooooooooooooooooooooooooo long!</p>\n<figure class=\"highlight js\"><figcaption><span>code snippet!</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(arrayLength);</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(element0, element1, ..., elementN);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Basic Things About Octopress...","date":"2013-08-30T04:35:00.000Z","comments":1,"_content":"\n# Deploy relative\n\n## Make a new post\n\nIn octopress root directory, type\n\n{% codeblock %}\nusername$ rake new_post[\"title name\"]\n{% endcodeblock %}\n\nyou can find this post in source/_posts\n\n## Publish blog & post\n\n{% codeblock %}\nusername$ rake generate\nusername$ rake deploy\n{% endcodeblock %}\n\nafter entering github username & password you are done.\n\n## Delete a post\n\nSimply go to source/_posts ,delete what post you don't want and run\n\n{% codeblock %}\nusername$ rake generate\nusername$ rake deploy\n{% endcodeblock %}\n\n## Preview and watch changes of blog\n\n{% codeblock %}\nusername$ rake generate\nusername$ rake preview\n{% endcodeblock %}\n\n# Edit relative\n\n## Add block\n\nsee [here](http://octopress.org/docs/plugins/codeblock/)\n\n## Link\n\n{% codeblock %}\nThis is [an example](http://example.com/ \"Title\") inline link.\n{% endcodeblock %}\n\n## Image\n\n{% codeblock %}\n![alt text](url)\n{% endcodeblock %}\n\n![cat](http://farm6.staticflickr.com/5216/5475775811_f3974c5d07.jpg)\n","source":"_posts/2013-08-29-basic-things-about-octopress-dot-dot-dot.markdown","raw":"---\nlayout: post\ntitle: \"Basic Things About Octopress...\"\ndate: 2013-08-29 21:35\ncomments: true\ntags: octopress\n---\n\n# Deploy relative\n\n## Make a new post\n\nIn octopress root directory, type\n\n{% codeblock %}\nusername$ rake new_post[\"title name\"]\n{% endcodeblock %}\n\nyou can find this post in source/_posts\n\n## Publish blog & post\n\n{% codeblock %}\nusername$ rake generate\nusername$ rake deploy\n{% endcodeblock %}\n\nafter entering github username & password you are done.\n\n## Delete a post\n\nSimply go to source/_posts ,delete what post you don't want and run\n\n{% codeblock %}\nusername$ rake generate\nusername$ rake deploy\n{% endcodeblock %}\n\n## Preview and watch changes of blog\n\n{% codeblock %}\nusername$ rake generate\nusername$ rake preview\n{% endcodeblock %}\n\n# Edit relative\n\n## Add block\n\nsee [here](http://octopress.org/docs/plugins/codeblock/)\n\n## Link\n\n{% codeblock %}\nThis is [an example](http://example.com/ \"Title\") inline link.\n{% endcodeblock %}\n\n## Image\n\n{% codeblock %}\n![alt text](url)\n{% endcodeblock %}\n\n![cat](http://farm6.staticflickr.com/5216/5475775811_f3974c5d07.jpg)\n","slug":"2013-08-29-basic-things-about-octopress-dot-dot-dot","published":1,"updated":"2023-09-06T19:45:58.303Z","_id":"cln99ol7w0002vfvg3ic0fbed","photos":[],"link":"","content":"<h1 id=\"Deploy-relative\"><a href=\"#Deploy-relative\" class=\"headerlink\" title=\"Deploy relative\"></a>Deploy relative</h1><h2 id=\"Make-a-new-post\"><a href=\"#Make-a-new-post\" class=\"headerlink\" title=\"Make a new post\"></a>Make a new post</h2><p>In octopress root directory, type</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username$ rake new_post[&quot;title name&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>you can find this post in source&#x2F;_posts</p>\n<h2 id=\"Publish-blog-post\"><a href=\"#Publish-blog-post\" class=\"headerlink\" title=\"Publish blog &amp; post\"></a>Publish blog &amp; post</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username$ rake generate</span><br><span class=\"line\">username$ rake deploy</span><br></pre></td></tr></table></figure>\n\n<p>after entering github username &amp; password you are done.</p>\n<h2 id=\"Delete-a-post\"><a href=\"#Delete-a-post\" class=\"headerlink\" title=\"Delete a post\"></a>Delete a post</h2><p>Simply go to source&#x2F;_posts ,delete what post you don’t want and run</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username$ rake generate</span><br><span class=\"line\">username$ rake deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Preview-and-watch-changes-of-blog\"><a href=\"#Preview-and-watch-changes-of-blog\" class=\"headerlink\" title=\"Preview and watch changes of blog\"></a>Preview and watch changes of blog</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username$ rake generate</span><br><span class=\"line\">username$ rake preview</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Edit-relative\"><a href=\"#Edit-relative\" class=\"headerlink\" title=\"Edit relative\"></a>Edit relative</h1><h2 id=\"Add-block\"><a href=\"#Add-block\" class=\"headerlink\" title=\"Add block\"></a>Add block</h2><p>see <a href=\"http://octopress.org/docs/plugins/codeblock/\">here</a></p>\n<h2 id=\"Link\"><a href=\"#Link\" class=\"headerlink\" title=\"Link\"></a>Link</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![alt text](url)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://farm6.staticflickr.com/5216/5475775811_f3974c5d07.jpg\" alt=\"cat\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Deploy-relative\"><a href=\"#Deploy-relative\" class=\"headerlink\" title=\"Deploy relative\"></a>Deploy relative</h1><h2 id=\"Make-a-new-post\"><a href=\"#Make-a-new-post\" class=\"headerlink\" title=\"Make a new post\"></a>Make a new post</h2><p>In octopress root directory, type</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username$ rake new_post[&quot;title name&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>you can find this post in source&#x2F;_posts</p>\n<h2 id=\"Publish-blog-post\"><a href=\"#Publish-blog-post\" class=\"headerlink\" title=\"Publish blog &amp; post\"></a>Publish blog &amp; post</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username$ rake generate</span><br><span class=\"line\">username$ rake deploy</span><br></pre></td></tr></table></figure>\n\n<p>after entering github username &amp; password you are done.</p>\n<h2 id=\"Delete-a-post\"><a href=\"#Delete-a-post\" class=\"headerlink\" title=\"Delete a post\"></a>Delete a post</h2><p>Simply go to source&#x2F;_posts ,delete what post you don’t want and run</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username$ rake generate</span><br><span class=\"line\">username$ rake deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Preview-and-watch-changes-of-blog\"><a href=\"#Preview-and-watch-changes-of-blog\" class=\"headerlink\" title=\"Preview and watch changes of blog\"></a>Preview and watch changes of blog</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username$ rake generate</span><br><span class=\"line\">username$ rake preview</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Edit-relative\"><a href=\"#Edit-relative\" class=\"headerlink\" title=\"Edit relative\"></a>Edit relative</h1><h2 id=\"Add-block\"><a href=\"#Add-block\" class=\"headerlink\" title=\"Add block\"></a>Add block</h2><p>see <a href=\"http://octopress.org/docs/plugins/codeblock/\">here</a></p>\n<h2 id=\"Link\"><a href=\"#Link\" class=\"headerlink\" title=\"Link\"></a>Link</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![alt text](url)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://farm6.staticflickr.com/5216/5475775811_f3974c5d07.jpg\" alt=\"cat\"></p>\n"},{"layout":"post","title":"How to pass \"this\" into anonymous function","date":"2013-08-30T05:28:00.000Z","comments":1,"_content":"\nvery useful when using callback relative things.\n\n{% codeblock lang:js %}\nvar me = this;\nvar a = func1(function(){\n\tme.doSomething();\n});\n{% endcodeblock %}\n","source":"_posts/2013-08-29-pass-this-into-anonymous-function.markdown","raw":"---\nlayout: post\ntitle: \"How to pass \\\"this\\\" into anonymous function\"\ndate: 2013-08-29 22:28\ncomments: true\ntags: javascript\n---\n\nvery useful when using callback relative things.\n\n{% codeblock lang:js %}\nvar me = this;\nvar a = func1(function(){\n\tme.doSomething();\n});\n{% endcodeblock %}\n","slug":"2013-08-29-pass-this-into-anonymous-function","published":1,"updated":"2023-09-06T19:45:58.303Z","_id":"cln99ol7x0003vfvge0xuccze","photos":[],"link":"","content":"<p>very useful when using callback relative things.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title function_\">func1</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\tme.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>very useful when using callback relative things.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> me = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"title function_\">func1</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\tme.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"JavaScript Module Pattern","date":"2013-09-03T06:57:00.000Z","comments":1,"_content":"\nJust a simple code and note here.\n\nFor more info about module pattern refer [here](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html).\n\n{% codeblock lang:js %}\nvar obj = (function(){\n\tvar obj = function(){\n\t\t//constructor\n\t}\n\n\tobj.prototype.foobar = function() {\n\t\t// do things here\n\t};\n\n\treturn obj;\n})();\n{% endcodeblock %}\n","source":"_posts/2013-09-02-javascript-module-pattern.markdown","raw":"---\nlayout: post\ntitle: \"JavaScript Module Pattern\"\ndate: 2013-09-02 23:57\ncomments: true\ntags: javascript\n---\n\nJust a simple code and note here.\n\nFor more info about module pattern refer [here](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html).\n\n{% codeblock lang:js %}\nvar obj = (function(){\n\tvar obj = function(){\n\t\t//constructor\n\t}\n\n\tobj.prototype.foobar = function() {\n\t\t// do things here\n\t};\n\n\treturn obj;\n})();\n{% endcodeblock %}\n","slug":"2013-09-02-javascript-module-pattern","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol800005vfvg18qcej4u","photos":[],"link":"","content":"<p>Just a simple code and note here.</p>\n<p>For more info about module pattern refer <a href=\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\">here</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//constructor</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tobj.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do things here</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Just a simple code and note here.</p>\n<p>For more info about module pattern refer <a href=\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\">here</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> obj = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//constructor</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tobj.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do things here</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"How To Call Parent Function in Child Class","date":"2013-09-03T06:39:00.000Z","comments":1,"_content":"\n{% codeblock lang:js %}\nSubClass.prototype.foobar = function(str) {\n\tBaseClass.prototype.foobar.call(this, str);\n\tconsole.log(\"bbb\");\n};\n{% endcodeblock %}\n\nyea, as simple as that.\n\nDon't forget sub-class is made of this\n\n{% codeblock lang:js %}\nSubClass.prototype = new BaseClass();\n{% endcodeblock %}\n\nThis makes all legit.\n\nFull source view\n\n{% codeblock lang:js %}\nfunction BaseClass(){}\nBaseClass.prototype.foobar = function(str) {\n\tconsole.log(str);\n};\n\nfunction SubClass(){}\nSubClass.prototype = new BaseClass();\nSubClass.prototype.constructor = SubClass;\nSubClass.prototype.foobar = function(str) {\n\tBaseClass.prototype.foobar.call(this, str);\n\tconsole.log(\"bbb\");\n};\n{% endcodeblock %}\n","source":"_posts/2013-09-02-how-to-call-paret-function-in-child-class.markdown","raw":"---\nlayout: post\ntitle: \"How To Call Parent Function in Child Class\"\ndate: 2013-09-02 23:39\ncomments: true\ntags: javascript\n---\n\n{% codeblock lang:js %}\nSubClass.prototype.foobar = function(str) {\n\tBaseClass.prototype.foobar.call(this, str);\n\tconsole.log(\"bbb\");\n};\n{% endcodeblock %}\n\nyea, as simple as that.\n\nDon't forget sub-class is made of this\n\n{% codeblock lang:js %}\nSubClass.prototype = new BaseClass();\n{% endcodeblock %}\n\nThis makes all legit.\n\nFull source view\n\n{% codeblock lang:js %}\nfunction BaseClass(){}\nBaseClass.prototype.foobar = function(str) {\n\tconsole.log(str);\n};\n\nfunction SubClass(){}\nSubClass.prototype = new BaseClass();\nSubClass.prototype.constructor = SubClass;\nSubClass.prototype.foobar = function(str) {\n\tBaseClass.prototype.foobar.call(this, str);\n\tconsole.log(\"bbb\");\n};\n{% endcodeblock %}\n","slug":"2013-09-02-how-to-call-paret-function-in-child-class","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol800006vfvgdvqb972o","photos":[],"link":"","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span> = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">BaseClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, str);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>yea, as simple as that.</p>\n<p>Don’t forget sub-class is made of this</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">BaseClass</span>();</span><br></pre></td></tr></table></figure>\n\n<p>This makes all legit.</p>\n<p>Full source view</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BaseClass</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">BaseClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span> = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubClass</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">BaseClass</span>();</span><br><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">SubClass</span>;</span><br><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span> = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">BaseClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, str);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span> = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">BaseClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, str);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>yea, as simple as that.</p>\n<p>Don’t forget sub-class is made of this</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">BaseClass</span>();</span><br></pre></td></tr></table></figure>\n\n<p>This makes all legit.</p>\n<p>Full source view</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BaseClass</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">BaseClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span> = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubClass</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">BaseClass</span>();</span><br><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">SubClass</span>;</span><br><span class=\"line\"><span class=\"title class_\">SubClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span> = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">BaseClass</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">foobar</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, str);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Differences Between sync & async, blocking & non-blocing and event-driven","date":"2013-09-08T05:34:00.000Z","comments":1,"_content":"\nI always thought I understood the concept between blocking & non-blocking, synchronous & asynchronous and could tell the differences, but after I found this [post](http://stackoverflow.com/questions/3231018/how-does-event-driven-i-o-allow-multiprocessing), a chaotic storm exploded in my brain! These were totally different two things in my mind!\n\nTerminologies can have different meanings with things, even though they have the same skin. The definition of terminologies differ from context.\n\nOriginally I thought blocking & non-blocking, synchronous & asynchronous were only talking about relationships between client and server structure, but when it comes to server, or computer, and disk & memory in itself, it has other meanings.\n\nSo what's the difference between these two fields? Before that, I need to define three objects:\n\n* client\n* server\n* disk(socket)\n\nDefinitions in client & server:\n\n* Synchronous\n\n\t* Blocking\n\n\t\tserver serve only one client at a time.\n\n\t* Non-blocking\n\n\t\tserver can serve many clients at a time, but clients will need to constantly check if their requests are accepted. (I can't find a better definition of non-blocking in client & server relationship, so I assume it's similar to the ajax polling technique.)\n\n\t* Event-driven\n\n\t\tserver can serve mant clients at at time, and with a single process on a callback.\n\n* Asynchronous - server will create a new thread for each client on connecting.\n\nDefinitions in server & disk(socket):\n\n* Synchronous\n\n\t* Blocking\n\n\t\tprocess will send a recvform system call to kernal, and then kernal will start preparing data process needs, and finally kernal return with result back to process. During the data preparation the process is blocked.\n\n\t* Non-blocking\n\n\t\tprocess will keep sending recvform to kernal. If is not ready, kernal will send a EWOULDBLOCK back to process, or will start data preparation.\n\n\t* Event-driven\n\n\t\talso named select/poll. It's similar to the blocking IO, but use select & poll system call to achive non-blocking.\n\n* Asynchronous - create a new thread and let it handle all the call sending and receiving. Kernal will deliver a signal when data has been prepared.\n\nA connection is established which means a socket stream has been created for client and server, so, in my opinion, definition in server & disk(socket) also works in client & server relationship.\n\nrefered from readings:\n\n- [IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）](http://blog.csdn.net/historyasamirror/article/details/5778378)\n- [How does event driven I/O allow multiprocessing?](http://stackoverflow.com/questions/3231018/how-does-event-driven-i-o-allow-multiprocessing)\n- [asynchronous vs non-blocking](http://stackoverflow.com/questions/2625493/asynchronous-vs-non-blocking)\n- [event-driven structure in client & server](http://stackoverflow.com/questions/5325342/help-with-event-driven-tcp-server)\n- [what is event driven web server](http://stackoverflow.com/questions/3981566/what-is-event-driven-web-server)\n- [Asynchronous I/O](https://en.wikipedia.org/wiki/Asynchronous_I/O)\n\nPoint it out if I have mistaken something!\n","source":"_posts/2013-09-07-differences-between-syncasync.markdown","raw":"---\nlayout: post\ntitle: \"Differences Between sync & async, blocking & non-blocing and event-driven\"\ndate: 2013-09-07 22:34\ncomments: true\ntags: [concurrent, meta]\n---\n\nI always thought I understood the concept between blocking & non-blocking, synchronous & asynchronous and could tell the differences, but after I found this [post](http://stackoverflow.com/questions/3231018/how-does-event-driven-i-o-allow-multiprocessing), a chaotic storm exploded in my brain! These were totally different two things in my mind!\n\nTerminologies can have different meanings with things, even though they have the same skin. The definition of terminologies differ from context.\n\nOriginally I thought blocking & non-blocking, synchronous & asynchronous were only talking about relationships between client and server structure, but when it comes to server, or computer, and disk & memory in itself, it has other meanings.\n\nSo what's the difference between these two fields? Before that, I need to define three objects:\n\n* client\n* server\n* disk(socket)\n\nDefinitions in client & server:\n\n* Synchronous\n\n\t* Blocking\n\n\t\tserver serve only one client at a time.\n\n\t* Non-blocking\n\n\t\tserver can serve many clients at a time, but clients will need to constantly check if their requests are accepted. (I can't find a better definition of non-blocking in client & server relationship, so I assume it's similar to the ajax polling technique.)\n\n\t* Event-driven\n\n\t\tserver can serve mant clients at at time, and with a single process on a callback.\n\n* Asynchronous - server will create a new thread for each client on connecting.\n\nDefinitions in server & disk(socket):\n\n* Synchronous\n\n\t* Blocking\n\n\t\tprocess will send a recvform system call to kernal, and then kernal will start preparing data process needs, and finally kernal return with result back to process. During the data preparation the process is blocked.\n\n\t* Non-blocking\n\n\t\tprocess will keep sending recvform to kernal. If is not ready, kernal will send a EWOULDBLOCK back to process, or will start data preparation.\n\n\t* Event-driven\n\n\t\talso named select/poll. It's similar to the blocking IO, but use select & poll system call to achive non-blocking.\n\n* Asynchronous - create a new thread and let it handle all the call sending and receiving. Kernal will deliver a signal when data has been prepared.\n\nA connection is established which means a socket stream has been created for client and server, so, in my opinion, definition in server & disk(socket) also works in client & server relationship.\n\nrefered from readings:\n\n- [IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）](http://blog.csdn.net/historyasamirror/article/details/5778378)\n- [How does event driven I/O allow multiprocessing?](http://stackoverflow.com/questions/3231018/how-does-event-driven-i-o-allow-multiprocessing)\n- [asynchronous vs non-blocking](http://stackoverflow.com/questions/2625493/asynchronous-vs-non-blocking)\n- [event-driven structure in client & server](http://stackoverflow.com/questions/5325342/help-with-event-driven-tcp-server)\n- [what is event driven web server](http://stackoverflow.com/questions/3981566/what-is-event-driven-web-server)\n- [Asynchronous I/O](https://en.wikipedia.org/wiki/Asynchronous_I/O)\n\nPoint it out if I have mistaken something!\n","slug":"2013-09-07-differences-between-syncasync","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol810007vfvgg7hpd5z6","photos":[],"link":"","content":"<p>I always thought I understood the concept between blocking &amp; non-blocking, synchronous &amp; asynchronous and could tell the differences, but after I found this <a href=\"http://stackoverflow.com/questions/3231018/how-does-event-driven-i-o-allow-multiprocessing\">post</a>, a chaotic storm exploded in my brain! These were totally different two things in my mind!</p>\n<p>Terminologies can have different meanings with things, even though they have the same skin. The definition of terminologies differ from context.</p>\n<p>Originally I thought blocking &amp; non-blocking, synchronous &amp; asynchronous were only talking about relationships between client and server structure, but when it comes to server, or computer, and disk &amp; memory in itself, it has other meanings.</p>\n<p>So what’s the difference between these two fields? Before that, I need to define three objects:</p>\n<ul>\n<li>client</li>\n<li>server</li>\n<li>disk(socket)</li>\n</ul>\n<p>Definitions in client &amp; server:</p>\n<ul>\n<li><p>Synchronous</p>\n<ul>\n<li><p>Blocking</p>\n<p>  server serve only one client at a time.</p>\n</li>\n<li><p>Non-blocking</p>\n<p>  server can serve many clients at a time, but clients will need to constantly check if their requests are accepted. (I can’t find a better definition of non-blocking in client &amp; server relationship, so I assume it’s similar to the ajax polling technique.)</p>\n</li>\n<li><p>Event-driven</p>\n<p>  server can serve mant clients at at time, and with a single process on a callback.</p>\n</li>\n</ul>\n</li>\n<li><p>Asynchronous - server will create a new thread for each client on connecting.</p>\n</li>\n</ul>\n<p>Definitions in server &amp; disk(socket):</p>\n<ul>\n<li><p>Synchronous</p>\n<ul>\n<li><p>Blocking</p>\n<p>  process will send a recvform system call to kernal, and then kernal will start preparing data process needs, and finally kernal return with result back to process. During the data preparation the process is blocked.</p>\n</li>\n<li><p>Non-blocking</p>\n<p>  process will keep sending recvform to kernal. If is not ready, kernal will send a EWOULDBLOCK back to process, or will start data preparation.</p>\n</li>\n<li><p>Event-driven</p>\n<p>  also named select&#x2F;poll. It’s similar to the blocking IO, but use select &amp; poll system call to achive non-blocking.</p>\n</li>\n</ul>\n</li>\n<li><p>Asynchronous - create a new thread and let it handle all the call sending and receiving. Kernal will deliver a signal when data has been prepared.</p>\n</li>\n</ul>\n<p>A connection is established which means a socket stream has been created for client and server, so, in my opinion, definition in server &amp; disk(socket) also works in client &amp; server relationship.</p>\n<p>refered from readings:</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/historyasamirror/article/details/5778378\">IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3231018/how-does-event-driven-i-o-allow-multiprocessing\">How does event driven I&#x2F;O allow multiprocessing?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2625493/asynchronous-vs-non-blocking\">asynchronous vs non-blocking</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5325342/help-with-event-driven-tcp-server\">event-driven structure in client &amp; server</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3981566/what-is-event-driven-web-server\">what is event driven web server</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Asynchronous_I/O\">Asynchronous I&#x2F;O</a></li>\n</ul>\n<p>Point it out if I have mistaken something!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I always thought I understood the concept between blocking &amp; non-blocking, synchronous &amp; asynchronous and could tell the differences, but after I found this <a href=\"http://stackoverflow.com/questions/3231018/how-does-event-driven-i-o-allow-multiprocessing\">post</a>, a chaotic storm exploded in my brain! These were totally different two things in my mind!</p>\n<p>Terminologies can have different meanings with things, even though they have the same skin. The definition of terminologies differ from context.</p>\n<p>Originally I thought blocking &amp; non-blocking, synchronous &amp; asynchronous were only talking about relationships between client and server structure, but when it comes to server, or computer, and disk &amp; memory in itself, it has other meanings.</p>\n<p>So what’s the difference between these two fields? Before that, I need to define three objects:</p>\n<ul>\n<li>client</li>\n<li>server</li>\n<li>disk(socket)</li>\n</ul>\n<p>Definitions in client &amp; server:</p>\n<ul>\n<li><p>Synchronous</p>\n<ul>\n<li><p>Blocking</p>\n<p>  server serve only one client at a time.</p>\n</li>\n<li><p>Non-blocking</p>\n<p>  server can serve many clients at a time, but clients will need to constantly check if their requests are accepted. (I can’t find a better definition of non-blocking in client &amp; server relationship, so I assume it’s similar to the ajax polling technique.)</p>\n</li>\n<li><p>Event-driven</p>\n<p>  server can serve mant clients at at time, and with a single process on a callback.</p>\n</li>\n</ul>\n</li>\n<li><p>Asynchronous - server will create a new thread for each client on connecting.</p>\n</li>\n</ul>\n<p>Definitions in server &amp; disk(socket):</p>\n<ul>\n<li><p>Synchronous</p>\n<ul>\n<li><p>Blocking</p>\n<p>  process will send a recvform system call to kernal, and then kernal will start preparing data process needs, and finally kernal return with result back to process. During the data preparation the process is blocked.</p>\n</li>\n<li><p>Non-blocking</p>\n<p>  process will keep sending recvform to kernal. If is not ready, kernal will send a EWOULDBLOCK back to process, or will start data preparation.</p>\n</li>\n<li><p>Event-driven</p>\n<p>  also named select&#x2F;poll. It’s similar to the blocking IO, but use select &amp; poll system call to achive non-blocking.</p>\n</li>\n</ul>\n</li>\n<li><p>Asynchronous - create a new thread and let it handle all the call sending and receiving. Kernal will deliver a signal when data has been prepared.</p>\n</li>\n</ul>\n<p>A connection is established which means a socket stream has been created for client and server, so, in my opinion, definition in server &amp; disk(socket) also works in client &amp; server relationship.</p>\n<p>refered from readings:</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/historyasamirror/article/details/5778378\">IO - 同步，异步，阻塞，非阻塞 （亡羊补牢篇）</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3231018/how-does-event-driven-i-o-allow-multiprocessing\">How does event driven I&#x2F;O allow multiprocessing?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2625493/asynchronous-vs-non-blocking\">asynchronous vs non-blocking</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5325342/help-with-event-driven-tcp-server\">event-driven structure in client &amp; server</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3981566/what-is-event-driven-web-server\">what is event driven web server</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Asynchronous_I/O\">Asynchronous I&#x2F;O</a></li>\n</ul>\n<p>Point it out if I have mistaken something!</p>\n"},{"layout":"post","title":"Debug Pages On Phones With Weinre","date":"2013-09-09T20:29:00.000Z","comments":1,"_content":"\n[Weinre](http://people.apache.org/~pmuellr/weinre/docs/latest/) stands for WEb INspector REmote. There are already numerous tutorials about this tool on the internet, but I still want to note it for myself or everyone else just want to get it work without getting details.\n\n### 1 Install Node.js\n\nWeinre depends on node.js, so we need to install node.js first.\n\nThere are two ways to install nodes.js. One is using homebrew or other CLI package management tools to install. On Mac is like this:\n\n`username$ brew install node`\n\nOr you can simply download and install package from the [node.js site](http://nodejs.org/download/).\n\n### 2 Install Weinre\n\nAfter node.js is installed, now you can install weinre through this command:\n\n`username$ sudo npm -g install weinre`\n\n### 3 Run Weinre\n\nIn weinre, there are 3 terminologies. We will take a quick look:\n\n* Debug Server - just a...server, we will use our browser to connect to it.\n* Debug Client - web inspector, we will use in later in browser to inspect our page.\n* Debug Target - your web page, also refers to mobile device.\n\nTime for running weinre. In most case we will only need to run:\n\n`username$ weinre --boundHost`\n\nDefault option is localhost, but we won't connect to localhost because that won't do the debug thing for our page.\n\nWe use real ip address here. To lookup our computer's real ip address:\n\nOn Mac open system preferences -> network\n\n{% img center /images/ip_address.png %}\n\nOn Windows type cmd and run\n\n`> nslookup`\n\nSo we finally run this command instead.\n\n`username$ weinre --boundHost [your ip address]`\n\nNow type `[your ip address]:8080` in browser. You should see weinre page, and click link next to *debug client user interface* in *Access Points* to bring up our page's inspector.\n\n### 4 Inject Scripts\n\nBefore we start debugging we need to let our page response infomations which weinre needs through JavaScript. Weinre provides two ways to do:\n\n1. Inject script codes - once the page is ran, it will link to our server automatically, but only for specific pages we assigned to.\n`<script src=\"http://[your ip address]:8080/target/target-script-min.js#anonymous\"></script>`\n2. Bookmarklet - simply make a bookmark on your phone browser device. I named it weinre debug on my iphone.\n`javascript:(function(e){e.setAttribute(\"src\",\"http://[your ip address]:8080/target/target-script-min.js#anonymous\");document.getElementsByTagName(\"body\")[0].appendChild(e);})(document.createElement(\"script\"));void(0);`\n\n{% img center /images/weinre_phone_bookmark.png 300%}\n\n### 5 Debug Page\n\nOur example target.\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>index</title>\n\t// decomment below if you are using method 1\n\t// <script src=\"http://[your ip address]:8080/target/target-script-min.js#anonymous\"></script>\n</head>\n<body>\n\t<canvas id=\"canvas\" width=\"200\" height=\"200\" style=\"background-color: green\"> test </canvas>\n</body>\n<script>\n\t(function(){\n\t\tvar canvas = document.getElementById(\"canvas\");\n\t\tcanvas.addEventListener(\"touchstart\", handleStart, false);\n\n\t\tfunction handleStart(event){\n\t\t\tevent.preventDefault();\n\t\t\tvar touches = event.changedTouches;\n\t\t\tconsole.log(touches);\n\t\t}\n\t})();\n</script>\n</html>\n{% endcodeblock %}\n\nRun `username$ python -m SimpleHTTPServer` in this file's directory, and use your phone to browse.\n\nIf you are using **method 1 - inject script codes**, you can start your testing immediately.\n\nIf you are using **method 2 - bookmark**, after pages is loaded, bring up bookmark page and run weinre deubg you just added, and finally, start testing.\n\nTap some on the little green rectangle will get you some responce.\n\n{% img center /images/weinre_results.png %}\n\n### 6 Misc.\n\nThere is an [online service](http://debug.phonegap.com/) will let you run weinre in an extreme simple fashion, but it seems broken at the time my post was written.\n\nPhoneGap with Weinre can be a nice cooperation.\n\nSince you can debug easily with weinre, everyhing shuold be able to work beautifully, right?\n\nNope.\n\nAlthough weinre is convenience, the most common debug technique is not avaliable in weinre's toolbelt:\n\n{% codeblock lang:html %}\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>index</title>\n\t\t// decomment below if you are using method 1\n\t\t// <script src=\"http://[your ip address]:8080/target/target-script-min.js#anonymous\"></script>\n\t</head>\n\t<body>\n\t</body>\n\t<script>\n\t\tconsole.log(\"test\"); // this won't work\n\t</script>\n\t</html>\n{% endcodeblock %}\n\nIt seems weinre loads a bunch of things before console is ready, but you can still use event register way to invoke console.\n\n{% codeblock lang:html %}\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>index</title>\n\t\t// decomment below if you are using method 1\n\t\t// <script src=\"http://[your ip address]:8080/target/target-script-min.js#anonymous\"></script>\n\t</head>\n\t<body>\n\t\t<button id=\"button\">test</button>\n\t</body>\n\t<script>\n\t\t(function(){\n\t\t\tvar button = document.getElementById(\"button\");\n\t\t\tbutton.onclick = function(){\n\t\t\t\tconsole.log(\"test\");\n\t\t\t};\n\t\t})();\n\t</script>\n\t</html>\n{% endcodeblock %}\n\nAlso weinre doesn't support remote script debugger.\n","source":"_posts/2013-09-09-debug-pages-on-phones-with-weinre.markdown","raw":"---\nlayout: post\ntitle: \"Debug Pages On Phones With Weinre\"\ndate: 2013-09-09 13:29\ncomments: true\ntags: [mobile, frontend, testing]\n---\n\n[Weinre](http://people.apache.org/~pmuellr/weinre/docs/latest/) stands for WEb INspector REmote. There are already numerous tutorials about this tool on the internet, but I still want to note it for myself or everyone else just want to get it work without getting details.\n\n### 1 Install Node.js\n\nWeinre depends on node.js, so we need to install node.js first.\n\nThere are two ways to install nodes.js. One is using homebrew or other CLI package management tools to install. On Mac is like this:\n\n`username$ brew install node`\n\nOr you can simply download and install package from the [node.js site](http://nodejs.org/download/).\n\n### 2 Install Weinre\n\nAfter node.js is installed, now you can install weinre through this command:\n\n`username$ sudo npm -g install weinre`\n\n### 3 Run Weinre\n\nIn weinre, there are 3 terminologies. We will take a quick look:\n\n* Debug Server - just a...server, we will use our browser to connect to it.\n* Debug Client - web inspector, we will use in later in browser to inspect our page.\n* Debug Target - your web page, also refers to mobile device.\n\nTime for running weinre. In most case we will only need to run:\n\n`username$ weinre --boundHost`\n\nDefault option is localhost, but we won't connect to localhost because that won't do the debug thing for our page.\n\nWe use real ip address here. To lookup our computer's real ip address:\n\nOn Mac open system preferences -> network\n\n{% img center /images/ip_address.png %}\n\nOn Windows type cmd and run\n\n`> nslookup`\n\nSo we finally run this command instead.\n\n`username$ weinre --boundHost [your ip address]`\n\nNow type `[your ip address]:8080` in browser. You should see weinre page, and click link next to *debug client user interface* in *Access Points* to bring up our page's inspector.\n\n### 4 Inject Scripts\n\nBefore we start debugging we need to let our page response infomations which weinre needs through JavaScript. Weinre provides two ways to do:\n\n1. Inject script codes - once the page is ran, it will link to our server automatically, but only for specific pages we assigned to.\n`<script src=\"http://[your ip address]:8080/target/target-script-min.js#anonymous\"></script>`\n2. Bookmarklet - simply make a bookmark on your phone browser device. I named it weinre debug on my iphone.\n`javascript:(function(e){e.setAttribute(\"src\",\"http://[your ip address]:8080/target/target-script-min.js#anonymous\");document.getElementsByTagName(\"body\")[0].appendChild(e);})(document.createElement(\"script\"));void(0);`\n\n{% img center /images/weinre_phone_bookmark.png 300%}\n\n### 5 Debug Page\n\nOur example target.\n\n{% codeblock lang:html %}\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>index</title>\n\t// decomment below if you are using method 1\n\t// <script src=\"http://[your ip address]:8080/target/target-script-min.js#anonymous\"></script>\n</head>\n<body>\n\t<canvas id=\"canvas\" width=\"200\" height=\"200\" style=\"background-color: green\"> test </canvas>\n</body>\n<script>\n\t(function(){\n\t\tvar canvas = document.getElementById(\"canvas\");\n\t\tcanvas.addEventListener(\"touchstart\", handleStart, false);\n\n\t\tfunction handleStart(event){\n\t\t\tevent.preventDefault();\n\t\t\tvar touches = event.changedTouches;\n\t\t\tconsole.log(touches);\n\t\t}\n\t})();\n</script>\n</html>\n{% endcodeblock %}\n\nRun `username$ python -m SimpleHTTPServer` in this file's directory, and use your phone to browse.\n\nIf you are using **method 1 - inject script codes**, you can start your testing immediately.\n\nIf you are using **method 2 - bookmark**, after pages is loaded, bring up bookmark page and run weinre deubg you just added, and finally, start testing.\n\nTap some on the little green rectangle will get you some responce.\n\n{% img center /images/weinre_results.png %}\n\n### 6 Misc.\n\nThere is an [online service](http://debug.phonegap.com/) will let you run weinre in an extreme simple fashion, but it seems broken at the time my post was written.\n\nPhoneGap with Weinre can be a nice cooperation.\n\nSince you can debug easily with weinre, everyhing shuold be able to work beautifully, right?\n\nNope.\n\nAlthough weinre is convenience, the most common debug technique is not avaliable in weinre's toolbelt:\n\n{% codeblock lang:html %}\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>index</title>\n\t\t// decomment below if you are using method 1\n\t\t// <script src=\"http://[your ip address]:8080/target/target-script-min.js#anonymous\"></script>\n\t</head>\n\t<body>\n\t</body>\n\t<script>\n\t\tconsole.log(\"test\"); // this won't work\n\t</script>\n\t</html>\n{% endcodeblock %}\n\nIt seems weinre loads a bunch of things before console is ready, but you can still use event register way to invoke console.\n\n{% codeblock lang:html %}\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t\t<title>index</title>\n\t\t// decomment below if you are using method 1\n\t\t// <script src=\"http://[your ip address]:8080/target/target-script-min.js#anonymous\"></script>\n\t</head>\n\t<body>\n\t\t<button id=\"button\">test</button>\n\t</body>\n\t<script>\n\t\t(function(){\n\t\t\tvar button = document.getElementById(\"button\");\n\t\t\tbutton.onclick = function(){\n\t\t\t\tconsole.log(\"test\");\n\t\t\t};\n\t\t})();\n\t</script>\n\t</html>\n{% endcodeblock %}\n\nAlso weinre doesn't support remote script debugger.\n","slug":"2013-09-09-debug-pages-on-phones-with-weinre","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol82000avfvg8ti02vfr","photos":[],"link":"","content":"<p><a href=\"http://people.apache.org/~pmuellr/weinre/docs/latest/\">Weinre</a> stands for WEb INspector REmote. There are already numerous tutorials about this tool on the internet, but I still want to note it for myself or everyone else just want to get it work without getting details.</p>\n<h3 id=\"1-Install-Node-js\"><a href=\"#1-Install-Node-js\" class=\"headerlink\" title=\"1 Install Node.js\"></a>1 Install Node.js</h3><p>Weinre depends on node.js, so we need to install node.js first.</p>\n<p>There are two ways to install nodes.js. One is using homebrew or other CLI package management tools to install. On Mac is like this:</p>\n<p><code>username$ brew install node</code></p>\n<p>Or you can simply download and install package from the <a href=\"http://nodejs.org/download/\">node.js site</a>.</p>\n<h3 id=\"2-Install-Weinre\"><a href=\"#2-Install-Weinre\" class=\"headerlink\" title=\"2 Install Weinre\"></a>2 Install Weinre</h3><p>After node.js is installed, now you can install weinre through this command:</p>\n<p><code>username$ sudo npm -g install weinre</code></p>\n<h3 id=\"3-Run-Weinre\"><a href=\"#3-Run-Weinre\" class=\"headerlink\" title=\"3 Run Weinre\"></a>3 Run Weinre</h3><p>In weinre, there are 3 terminologies. We will take a quick look:</p>\n<ul>\n<li>Debug Server - just a…server, we will use our browser to connect to it.</li>\n<li>Debug Client - web inspector, we will use in later in browser to inspect our page.</li>\n<li>Debug Target - your web page, also refers to mobile device.</li>\n</ul>\n<p>Time for running weinre. In most case we will only need to run:</p>\n<p><code>username$ weinre --boundHost</code></p>\n<p>Default option is localhost, but we won’t connect to localhost because that won’t do the debug thing for our page.</p>\n<p>We use real ip address here. To lookup our computer’s real ip address:</p>\n<p>On Mac open system preferences -&gt; network</p>\n<img src=\"/images/ip_address.png\" class=\"center\">\n\n<p>On Windows type cmd and run</p>\n<p><code>&gt; nslookup</code></p>\n<p>So we finally run this command instead.</p>\n<p><code>username$ weinre --boundHost [your ip address]</code></p>\n<p>Now type <code>[your ip address]:8080</code> in browser. You should see weinre page, and click link next to <em>debug client user interface</em> in <em>Access Points</em> to bring up our page’s inspector.</p>\n<h3 id=\"4-Inject-Scripts\"><a href=\"#4-Inject-Scripts\" class=\"headerlink\" title=\"4 Inject Scripts\"></a>4 Inject Scripts</h3><p>Before we start debugging we need to let our page response infomations which weinre needs through JavaScript. Weinre provides two ways to do:</p>\n<ol>\n<li>Inject script codes - once the page is ran, it will link to our server automatically, but only for specific pages we assigned to.<br><code>&lt;script src=&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></li>\n<li>Bookmarklet - simply make a bookmark on your phone browser device. I named it weinre debug on my iphone.<br><code>javascript:(function(e)&#123;e.setAttribute(&quot;src&quot;,&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;);document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);&#125;)(document.createElement(&quot;script&quot;));void(0);</code></li>\n</ol>\n<img src=\"/images/weinre_phone_bookmark.png\" class=\"center\" width=\"300\">\n\n<h3 id=\"5-Debug-Page\"><a href=\"#5-Debug-Page\" class=\"headerlink\" title=\"5 Debug Page\"></a>5 Debug Page</h3><p>Our example target.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t// decomment below if you are using method 1</span><br><span class=\"line\">\t// <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: green&quot;</span>&gt;</span> test <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tcanvas.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;touchstart&quot;</span>, handleStart, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">handleStart</span>(<span class=\"params\">event</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\tevent.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">var</span> touches = event.<span class=\"property\">changedTouches</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(touches);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;)();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Run <code>username$ python -m SimpleHTTPServer</code> in this file’s directory, and use your phone to browse.</p>\n<p>If you are using <strong>method 1 - inject script codes</strong>, you can start your testing immediately.</p>\n<p>If you are using <strong>method 2 - bookmark</strong>, after pages is loaded, bring up bookmark page and run weinre deubg you just added, and finally, start testing.</p>\n<p>Tap some on the little green rectangle will get you some responce.</p>\n<img src=\"/images/weinre_results.png\" class=\"center\">\n\n<h3 id=\"6-Misc\"><a href=\"#6-Misc\" class=\"headerlink\" title=\"6 Misc.\"></a>6 Misc.</h3><p>There is an <a href=\"http://debug.phonegap.com/\">online service</a> will let you run weinre in an extreme simple fashion, but it seems broken at the time my post was written.</p>\n<p>PhoneGap with Weinre can be a nice cooperation.</p>\n<p>Since you can debug easily with weinre, everyhing shuold be able to work beautifully, right?</p>\n<p>Nope.</p>\n<p>Although weinre is convenience, the most common debug technique is not avaliable in weinre’s toolbelt:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t// decomment below if you are using method 1</span><br><span class=\"line\">\t// <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test&quot;</span>); <span class=\"comment\">// this won&#x27;t work</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It seems weinre loads a bunch of things before console is ready, but you can still use event register way to invoke console.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t// decomment below if you are using method 1</span><br><span class=\"line\">\t// <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tbutton.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;)();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Also weinre doesn’t support remote script debugger.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://people.apache.org/~pmuellr/weinre/docs/latest/\">Weinre</a> stands for WEb INspector REmote. There are already numerous tutorials about this tool on the internet, but I still want to note it for myself or everyone else just want to get it work without getting details.</p>\n<h3 id=\"1-Install-Node-js\"><a href=\"#1-Install-Node-js\" class=\"headerlink\" title=\"1 Install Node.js\"></a>1 Install Node.js</h3><p>Weinre depends on node.js, so we need to install node.js first.</p>\n<p>There are two ways to install nodes.js. One is using homebrew or other CLI package management tools to install. On Mac is like this:</p>\n<p><code>username$ brew install node</code></p>\n<p>Or you can simply download and install package from the <a href=\"http://nodejs.org/download/\">node.js site</a>.</p>\n<h3 id=\"2-Install-Weinre\"><a href=\"#2-Install-Weinre\" class=\"headerlink\" title=\"2 Install Weinre\"></a>2 Install Weinre</h3><p>After node.js is installed, now you can install weinre through this command:</p>\n<p><code>username$ sudo npm -g install weinre</code></p>\n<h3 id=\"3-Run-Weinre\"><a href=\"#3-Run-Weinre\" class=\"headerlink\" title=\"3 Run Weinre\"></a>3 Run Weinre</h3><p>In weinre, there are 3 terminologies. We will take a quick look:</p>\n<ul>\n<li>Debug Server - just a…server, we will use our browser to connect to it.</li>\n<li>Debug Client - web inspector, we will use in later in browser to inspect our page.</li>\n<li>Debug Target - your web page, also refers to mobile device.</li>\n</ul>\n<p>Time for running weinre. In most case we will only need to run:</p>\n<p><code>username$ weinre --boundHost</code></p>\n<p>Default option is localhost, but we won’t connect to localhost because that won’t do the debug thing for our page.</p>\n<p>We use real ip address here. To lookup our computer’s real ip address:</p>\n<p>On Mac open system preferences -&gt; network</p>\n<img src=\"/images/ip_address.png\" class=\"center\">\n\n<p>On Windows type cmd and run</p>\n<p><code>&gt; nslookup</code></p>\n<p>So we finally run this command instead.</p>\n<p><code>username$ weinre --boundHost [your ip address]</code></p>\n<p>Now type <code>[your ip address]:8080</code> in browser. You should see weinre page, and click link next to <em>debug client user interface</em> in <em>Access Points</em> to bring up our page’s inspector.</p>\n<h3 id=\"4-Inject-Scripts\"><a href=\"#4-Inject-Scripts\" class=\"headerlink\" title=\"4 Inject Scripts\"></a>4 Inject Scripts</h3><p>Before we start debugging we need to let our page response infomations which weinre needs through JavaScript. Weinre provides two ways to do:</p>\n<ol>\n<li>Inject script codes - once the page is ran, it will link to our server automatically, but only for specific pages we assigned to.<br><code>&lt;script src=&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></li>\n<li>Bookmarklet - simply make a bookmark on your phone browser device. I named it weinre debug on my iphone.<br><code>javascript:(function(e)&#123;e.setAttribute(&quot;src&quot;,&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;);document.getElementsByTagName(&quot;body&quot;)[0].appendChild(e);&#125;)(document.createElement(&quot;script&quot;));void(0);</code></li>\n</ol>\n<img src=\"/images/weinre_phone_bookmark.png\" class=\"center\" width=\"300\">\n\n<h3 id=\"5-Debug-Page\"><a href=\"#5-Debug-Page\" class=\"headerlink\" title=\"5 Debug Page\"></a>5 Debug Page</h3><p>Our example target.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t// decomment below if you are using method 1</span><br><span class=\"line\">\t// <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;canvas&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;200&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;background-color: green&quot;</span>&gt;</span> test <span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> canvas = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tcanvas.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;touchstart&quot;</span>, handleStart, <span class=\"literal\">false</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">function</span> <span class=\"title function_\">handleStart</span>(<span class=\"params\">event</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\tevent.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">var</span> touches = event.<span class=\"property\">changedTouches</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(touches);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;)();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Run <code>username$ python -m SimpleHTTPServer</code> in this file’s directory, and use your phone to browse.</p>\n<p>If you are using <strong>method 1 - inject script codes</strong>, you can start your testing immediately.</p>\n<p>If you are using <strong>method 2 - bookmark</strong>, after pages is loaded, bring up bookmark page and run weinre deubg you just added, and finally, start testing.</p>\n<p>Tap some on the little green rectangle will get you some responce.</p>\n<img src=\"/images/weinre_results.png\" class=\"center\">\n\n<h3 id=\"6-Misc\"><a href=\"#6-Misc\" class=\"headerlink\" title=\"6 Misc.\"></a>6 Misc.</h3><p>There is an <a href=\"http://debug.phonegap.com/\">online service</a> will let you run weinre in an extreme simple fashion, but it seems broken at the time my post was written.</p>\n<p>PhoneGap with Weinre can be a nice cooperation.</p>\n<p>Since you can debug easily with weinre, everyhing shuold be able to work beautifully, right?</p>\n<p>Nope.</p>\n<p>Although weinre is convenience, the most common debug technique is not avaliable in weinre’s toolbelt:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t// decomment below if you are using method 1</span><br><span class=\"line\">\t// <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test&quot;</span>); <span class=\"comment\">// this won&#x27;t work</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>It seems weinre loads a bunch of things before console is ready, but you can still use event register way to invoke console.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t// decomment below if you are using method 1</span><br><span class=\"line\">\t// <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://[your ip address]:8080/target/target-script-min.js#anonymous&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\tbutton.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;test&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;)();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Also weinre doesn’t support remote script debugger.</p>\n"},{"layout":"post","title":"Realtime Syntax Highlight Editor on Web, How Is That Possible?","date":"2013-10-16T20:29:00.000Z","comments":1,"_content":"\n# Story\nAlthough I have already played around some front-end techniques, I still think my webdev-fu is noob as hell, so maybe I should start it from scratch. How about basic DOM structure? Hmm, good. There are many realtime syntax highlight editor, I alway wonder how they work, and building one myself won’t be hard, right? Challenge accepted!\n\n# Google Hard\nThe quickest way to know how one thing works is to find one similar thing and study it. As far as I know, there are two editors with active communities — [Code Mirror](http://codemirror.net/) and [Ace Edtior](http://ace.c9.io/#nav=about), but I am lazy as fuck, and reading other people’s code without any guides is really hard, so I decide to do some google about how it works.\n\n# Approach 1 – ContentEditable\nAce Editor is too modularized to make a quick understand. What I need is a one-filed, code-short example to make a quick structure overview. Code Mirror has some additional libraries, but the main program still remains in one file, so I think maybe it’s good for a starter.\n\nWhile I was googling guides about Code Mirror, I happened to find [this article](http://codemirror.net/1/story.html) about how Code Mirror 1 was made. This inspired me. Without knowing there was already an new version - Code Mirror 2, I started coding in this way.\n\nThe basic idea of this way is to get raw data string from parsing contentEditable div’s inner HTML, and trying to attach span tag with syntax. Basically, contentEditable way is possible, and Code Mirror 1 did it in this way, but to me, it’s a hard way. The main problem is, the behavior of key inputs differ from browser to browser, which means if you hope to get the same data from all platforms, you will be disappointed. In actually, you will get all different versions of data.\n\nSure you will say “Why don’t you change those behaviors to one? Problem solved!” Well, you won’t like this idea in the end, because you need to **FUCKING REMAP ALL THE CONTROL KEY BEHAVIORS** to act like the same, which is being said, you need to integrate all enter key versions into one, all shift-enter key versions into one, all cmd-enter key versions into one… and it’s only for enter keys, not to mention other keys’ combination, and… there are 5 mainstream browsers. Ouch, it hurts.\n\nAfter one-week hard coding, it exhausted me. This is not a good idea. I need a better solution.\n\n# Approach 2 – Hidden Textarea\nThis is the way how Code Mioor 2 and Ace Editor were made. You can read [this article](http://codemirror.net/doc/internals.html) if you already feel the pain from approach 1.\n\nThe key concept is that it hides a textarea from users’ eyes, and makes them believe they are typing into textarea. What they see, actually, is **many divs** pretending like a textarea.\n\nThe main challenge from this approach is that since you are not using default elements, you need to mimic your own textarea element — everything inside the textarea, including scrollbar, caret, selection and mouse events.\n\nThough it's not hard, I still want to find an easy way to achieve my goal because what I want to do is making a simple realtime syntax highlight editor, not another fully functional editor.\n\nWhile I was struggling on approach 2 way, suddenly an idea came to my mind - “Hey, why don’t I just overlay a transparent textarea on the visual view? Using the default textarea can save a lot of works!”\n\nSo I started my overlay textarea journey.\n\n# Approach 3 – Overlay Textarea\n[Here is my final work.](http://zushenyan.github.io/SRSHME/)\n\nBasic functions:\n\n* Support part of Markdown syntaxes.\n* Browser default key mapping.\n* Browser default mouse behaviors.\n\nTested on the latest version of Chrome, Firefox, Safari, Opera and IE 10, and be aware that this code is not optimized. If you paste a lot of text into textarea, I am sure it will be laggy as fuck.\n\nOn IE 10, user may experience the late response of caret because IE’s caret visual is not controllable in textarea. In order to show only one caret, I choose to hide my own caret to prevent from showing two carets at once.\n\nWhat I do here is simply overlay a transparent textarea over a visual div. Basically, the concept is similar to approach 2 but sacrifices the possibility of further customizations due to lazy code. I don’t need to write mimic scrollbars and mouse event anymore.\n\n# Conclusion\nTo make a fully functional online text editor, programmer are bound to write **a lot of codes** to solve problems like right-to-left characters, line & word wrap, wide characters and blah blah blah tons of things.\n\nIf you are curious about how those realtime syntax highlight editors are possible, I hope this post can help.\n","source":"_posts/2013-10-16-realtime-syntax-highlight-editor-on-web-how-is-that-possible.markdown","raw":"---\nlayout: post\ntitle: \"Realtime Syntax Highlight Editor on Web, How Is That Possible?\"\ndate: 2013-10-16 13:29\ncomments: true\ntags: [frontend, HTML, javascript]\n---\n\n# Story\nAlthough I have already played around some front-end techniques, I still think my webdev-fu is noob as hell, so maybe I should start it from scratch. How about basic DOM structure? Hmm, good. There are many realtime syntax highlight editor, I alway wonder how they work, and building one myself won’t be hard, right? Challenge accepted!\n\n# Google Hard\nThe quickest way to know how one thing works is to find one similar thing and study it. As far as I know, there are two editors with active communities — [Code Mirror](http://codemirror.net/) and [Ace Edtior](http://ace.c9.io/#nav=about), but I am lazy as fuck, and reading other people’s code without any guides is really hard, so I decide to do some google about how it works.\n\n# Approach 1 – ContentEditable\nAce Editor is too modularized to make a quick understand. What I need is a one-filed, code-short example to make a quick structure overview. Code Mirror has some additional libraries, but the main program still remains in one file, so I think maybe it’s good for a starter.\n\nWhile I was googling guides about Code Mirror, I happened to find [this article](http://codemirror.net/1/story.html) about how Code Mirror 1 was made. This inspired me. Without knowing there was already an new version - Code Mirror 2, I started coding in this way.\n\nThe basic idea of this way is to get raw data string from parsing contentEditable div’s inner HTML, and trying to attach span tag with syntax. Basically, contentEditable way is possible, and Code Mirror 1 did it in this way, but to me, it’s a hard way. The main problem is, the behavior of key inputs differ from browser to browser, which means if you hope to get the same data from all platforms, you will be disappointed. In actually, you will get all different versions of data.\n\nSure you will say “Why don’t you change those behaviors to one? Problem solved!” Well, you won’t like this idea in the end, because you need to **FUCKING REMAP ALL THE CONTROL KEY BEHAVIORS** to act like the same, which is being said, you need to integrate all enter key versions into one, all shift-enter key versions into one, all cmd-enter key versions into one… and it’s only for enter keys, not to mention other keys’ combination, and… there are 5 mainstream browsers. Ouch, it hurts.\n\nAfter one-week hard coding, it exhausted me. This is not a good idea. I need a better solution.\n\n# Approach 2 – Hidden Textarea\nThis is the way how Code Mioor 2 and Ace Editor were made. You can read [this article](http://codemirror.net/doc/internals.html) if you already feel the pain from approach 1.\n\nThe key concept is that it hides a textarea from users’ eyes, and makes them believe they are typing into textarea. What they see, actually, is **many divs** pretending like a textarea.\n\nThe main challenge from this approach is that since you are not using default elements, you need to mimic your own textarea element — everything inside the textarea, including scrollbar, caret, selection and mouse events.\n\nThough it's not hard, I still want to find an easy way to achieve my goal because what I want to do is making a simple realtime syntax highlight editor, not another fully functional editor.\n\nWhile I was struggling on approach 2 way, suddenly an idea came to my mind - “Hey, why don’t I just overlay a transparent textarea on the visual view? Using the default textarea can save a lot of works!”\n\nSo I started my overlay textarea journey.\n\n# Approach 3 – Overlay Textarea\n[Here is my final work.](http://zushenyan.github.io/SRSHME/)\n\nBasic functions:\n\n* Support part of Markdown syntaxes.\n* Browser default key mapping.\n* Browser default mouse behaviors.\n\nTested on the latest version of Chrome, Firefox, Safari, Opera and IE 10, and be aware that this code is not optimized. If you paste a lot of text into textarea, I am sure it will be laggy as fuck.\n\nOn IE 10, user may experience the late response of caret because IE’s caret visual is not controllable in textarea. In order to show only one caret, I choose to hide my own caret to prevent from showing two carets at once.\n\nWhat I do here is simply overlay a transparent textarea over a visual div. Basically, the concept is similar to approach 2 but sacrifices the possibility of further customizations due to lazy code. I don’t need to write mimic scrollbars and mouse event anymore.\n\n# Conclusion\nTo make a fully functional online text editor, programmer are bound to write **a lot of codes** to solve problems like right-to-left characters, line & word wrap, wide characters and blah blah blah tons of things.\n\nIf you are curious about how those realtime syntax highlight editors are possible, I hope this post can help.\n","slug":"2013-10-16-realtime-syntax-highlight-editor-on-web-how-is-that-possible","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol83000bvfvg7waj2am1","photos":[],"link":"","content":"<h1 id=\"Story\"><a href=\"#Story\" class=\"headerlink\" title=\"Story\"></a>Story</h1><p>Although I have already played around some front-end techniques, I still think my webdev-fu is noob as hell, so maybe I should start it from scratch. How about basic DOM structure? Hmm, good. There are many realtime syntax highlight editor, I alway wonder how they work, and building one myself won’t be hard, right? Challenge accepted!</p>\n<h1 id=\"Google-Hard\"><a href=\"#Google-Hard\" class=\"headerlink\" title=\"Google Hard\"></a>Google Hard</h1><p>The quickest way to know how one thing works is to find one similar thing and study it. As far as I know, there are two editors with active communities — <a href=\"http://codemirror.net/\">Code Mirror</a> and <a href=\"http://ace.c9.io/#nav=about\">Ace Edtior</a>, but I am lazy as fuck, and reading other people’s code without any guides is really hard, so I decide to do some google about how it works.</p>\n<h1 id=\"Approach-1-–-ContentEditable\"><a href=\"#Approach-1-–-ContentEditable\" class=\"headerlink\" title=\"Approach 1 – ContentEditable\"></a>Approach 1 – ContentEditable</h1><p>Ace Editor is too modularized to make a quick understand. What I need is a one-filed, code-short example to make a quick structure overview. Code Mirror has some additional libraries, but the main program still remains in one file, so I think maybe it’s good for a starter.</p>\n<p>While I was googling guides about Code Mirror, I happened to find <a href=\"http://codemirror.net/1/story.html\">this article</a> about how Code Mirror 1 was made. This inspired me. Without knowing there was already an new version - Code Mirror 2, I started coding in this way.</p>\n<p>The basic idea of this way is to get raw data string from parsing contentEditable div’s inner HTML, and trying to attach span tag with syntax. Basically, contentEditable way is possible, and Code Mirror 1 did it in this way, but to me, it’s a hard way. The main problem is, the behavior of key inputs differ from browser to browser, which means if you hope to get the same data from all platforms, you will be disappointed. In actually, you will get all different versions of data.</p>\n<p>Sure you will say “Why don’t you change those behaviors to one? Problem solved!” Well, you won’t like this idea in the end, because you need to <strong>FUCKING REMAP ALL THE CONTROL KEY BEHAVIORS</strong> to act like the same, which is being said, you need to integrate all enter key versions into one, all shift-enter key versions into one, all cmd-enter key versions into one… and it’s only for enter keys, not to mention other keys’ combination, and… there are 5 mainstream browsers. Ouch, it hurts.</p>\n<p>After one-week hard coding, it exhausted me. This is not a good idea. I need a better solution.</p>\n<h1 id=\"Approach-2-–-Hidden-Textarea\"><a href=\"#Approach-2-–-Hidden-Textarea\" class=\"headerlink\" title=\"Approach 2 – Hidden Textarea\"></a>Approach 2 – Hidden Textarea</h1><p>This is the way how Code Mioor 2 and Ace Editor were made. You can read <a href=\"http://codemirror.net/doc/internals.html\">this article</a> if you already feel the pain from approach 1.</p>\n<p>The key concept is that it hides a textarea from users’ eyes, and makes them believe they are typing into textarea. What they see, actually, is <strong>many divs</strong> pretending like a textarea.</p>\n<p>The main challenge from this approach is that since you are not using default elements, you need to mimic your own textarea element — everything inside the textarea, including scrollbar, caret, selection and mouse events.</p>\n<p>Though it’s not hard, I still want to find an easy way to achieve my goal because what I want to do is making a simple realtime syntax highlight editor, not another fully functional editor.</p>\n<p>While I was struggling on approach 2 way, suddenly an idea came to my mind - “Hey, why don’t I just overlay a transparent textarea on the visual view? Using the default textarea can save a lot of works!”</p>\n<p>So I started my overlay textarea journey.</p>\n<h1 id=\"Approach-3-–-Overlay-Textarea\"><a href=\"#Approach-3-–-Overlay-Textarea\" class=\"headerlink\" title=\"Approach 3 – Overlay Textarea\"></a>Approach 3 – Overlay Textarea</h1><p><a href=\"http://zushenyan.github.io/SRSHME/\">Here is my final work.</a></p>\n<p>Basic functions:</p>\n<ul>\n<li>Support part of Markdown syntaxes.</li>\n<li>Browser default key mapping.</li>\n<li>Browser default mouse behaviors.</li>\n</ul>\n<p>Tested on the latest version of Chrome, Firefox, Safari, Opera and IE 10, and be aware that this code is not optimized. If you paste a lot of text into textarea, I am sure it will be laggy as fuck.</p>\n<p>On IE 10, user may experience the late response of caret because IE’s caret visual is not controllable in textarea. In order to show only one caret, I choose to hide my own caret to prevent from showing two carets at once.</p>\n<p>What I do here is simply overlay a transparent textarea over a visual div. Basically, the concept is similar to approach 2 but sacrifices the possibility of further customizations due to lazy code. I don’t need to write mimic scrollbars and mouse event anymore.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>To make a fully functional online text editor, programmer are bound to write <strong>a lot of codes</strong> to solve problems like right-to-left characters, line &amp; word wrap, wide characters and blah blah blah tons of things.</p>\n<p>If you are curious about how those realtime syntax highlight editors are possible, I hope this post can help.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Story\"><a href=\"#Story\" class=\"headerlink\" title=\"Story\"></a>Story</h1><p>Although I have already played around some front-end techniques, I still think my webdev-fu is noob as hell, so maybe I should start it from scratch. How about basic DOM structure? Hmm, good. There are many realtime syntax highlight editor, I alway wonder how they work, and building one myself won’t be hard, right? Challenge accepted!</p>\n<h1 id=\"Google-Hard\"><a href=\"#Google-Hard\" class=\"headerlink\" title=\"Google Hard\"></a>Google Hard</h1><p>The quickest way to know how one thing works is to find one similar thing and study it. As far as I know, there are two editors with active communities — <a href=\"http://codemirror.net/\">Code Mirror</a> and <a href=\"http://ace.c9.io/#nav=about\">Ace Edtior</a>, but I am lazy as fuck, and reading other people’s code without any guides is really hard, so I decide to do some google about how it works.</p>\n<h1 id=\"Approach-1-–-ContentEditable\"><a href=\"#Approach-1-–-ContentEditable\" class=\"headerlink\" title=\"Approach 1 – ContentEditable\"></a>Approach 1 – ContentEditable</h1><p>Ace Editor is too modularized to make a quick understand. What I need is a one-filed, code-short example to make a quick structure overview. Code Mirror has some additional libraries, but the main program still remains in one file, so I think maybe it’s good for a starter.</p>\n<p>While I was googling guides about Code Mirror, I happened to find <a href=\"http://codemirror.net/1/story.html\">this article</a> about how Code Mirror 1 was made. This inspired me. Without knowing there was already an new version - Code Mirror 2, I started coding in this way.</p>\n<p>The basic idea of this way is to get raw data string from parsing contentEditable div’s inner HTML, and trying to attach span tag with syntax. Basically, contentEditable way is possible, and Code Mirror 1 did it in this way, but to me, it’s a hard way. The main problem is, the behavior of key inputs differ from browser to browser, which means if you hope to get the same data from all platforms, you will be disappointed. In actually, you will get all different versions of data.</p>\n<p>Sure you will say “Why don’t you change those behaviors to one? Problem solved!” Well, you won’t like this idea in the end, because you need to <strong>FUCKING REMAP ALL THE CONTROL KEY BEHAVIORS</strong> to act like the same, which is being said, you need to integrate all enter key versions into one, all shift-enter key versions into one, all cmd-enter key versions into one… and it’s only for enter keys, not to mention other keys’ combination, and… there are 5 mainstream browsers. Ouch, it hurts.</p>\n<p>After one-week hard coding, it exhausted me. This is not a good idea. I need a better solution.</p>\n<h1 id=\"Approach-2-–-Hidden-Textarea\"><a href=\"#Approach-2-–-Hidden-Textarea\" class=\"headerlink\" title=\"Approach 2 – Hidden Textarea\"></a>Approach 2 – Hidden Textarea</h1><p>This is the way how Code Mioor 2 and Ace Editor were made. You can read <a href=\"http://codemirror.net/doc/internals.html\">this article</a> if you already feel the pain from approach 1.</p>\n<p>The key concept is that it hides a textarea from users’ eyes, and makes them believe they are typing into textarea. What they see, actually, is <strong>many divs</strong> pretending like a textarea.</p>\n<p>The main challenge from this approach is that since you are not using default elements, you need to mimic your own textarea element — everything inside the textarea, including scrollbar, caret, selection and mouse events.</p>\n<p>Though it’s not hard, I still want to find an easy way to achieve my goal because what I want to do is making a simple realtime syntax highlight editor, not another fully functional editor.</p>\n<p>While I was struggling on approach 2 way, suddenly an idea came to my mind - “Hey, why don’t I just overlay a transparent textarea on the visual view? Using the default textarea can save a lot of works!”</p>\n<p>So I started my overlay textarea journey.</p>\n<h1 id=\"Approach-3-–-Overlay-Textarea\"><a href=\"#Approach-3-–-Overlay-Textarea\" class=\"headerlink\" title=\"Approach 3 – Overlay Textarea\"></a>Approach 3 – Overlay Textarea</h1><p><a href=\"http://zushenyan.github.io/SRSHME/\">Here is my final work.</a></p>\n<p>Basic functions:</p>\n<ul>\n<li>Support part of Markdown syntaxes.</li>\n<li>Browser default key mapping.</li>\n<li>Browser default mouse behaviors.</li>\n</ul>\n<p>Tested on the latest version of Chrome, Firefox, Safari, Opera and IE 10, and be aware that this code is not optimized. If you paste a lot of text into textarea, I am sure it will be laggy as fuck.</p>\n<p>On IE 10, user may experience the late response of caret because IE’s caret visual is not controllable in textarea. In order to show only one caret, I choose to hide my own caret to prevent from showing two carets at once.</p>\n<p>What I do here is simply overlay a transparent textarea over a visual div. Basically, the concept is similar to approach 2 but sacrifices the possibility of further customizations due to lazy code. I don’t need to write mimic scrollbars and mouse event anymore.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>To make a fully functional online text editor, programmer are bound to write <strong>a lot of codes</strong> to solve problems like right-to-left characters, line &amp; word wrap, wide characters and blah blah blah tons of things.</p>\n<p>If you are curious about how those realtime syntax highlight editors are possible, I hope this post can help.</p>\n"},{"layout":"post","title":"Frontend Fundamental - HTTP 1.1","date":"2015-10-10T11:37:59.000Z","_content":"\n# Purpose\nA study note for myself.\n\n# Tools I Use\n* Nodejs\n  * I will use Nodejs as server side foundation. No expressjs or some other fancy libraries here. Only vanilla Nodejs you need to know.\n* Curl\n  * A powerful command line tool to transfer data from or to server. It's builtin if users are using Mac or Linux OS.\n* Chrome\n  * A happy browser.\n\n# Introduction\nHTTP protocol is a fundamental when it comes to nowadays web. No matter you are an frontend or backend guy, knowing it is surely an important thing.\nIn this article, I will cover topics from basic features, headers to useful practices.\n\n# HTTP Architecture\nIn version 1.0, it was **multiple connection**, which means it opens a new connection per request/response. To solve the overhead of establishing connection for each request/response, version 1.1 comes with **persistent connection**, which means only uses a single connection for subsequent request/response to solve the establishing overhead.\n\n![from wikipedia](https://upload.wikimedia.org/wikipedia/commons/d/d5/HTTP_persistent_connection.svg)\n\nImage from [wikipedia](http-persistent-connection).\n\n# HTTP Basic Features\n* Media independent - Any types can be exchanged between client and server as long as they know what types each other are sending to.\n* Stateless - Server won't record anything about each other, like how long the connection last and blah blah blah... However you can write extra codes to record things.\n\n# HTTP Status Codes\nWhen server responses, it returns a 3-digit number back which tells client some kind of informations. Here I only listed partial content. For full list of status code check [here](http-status-code).\n\n* 1xx - Pure information to inform client.\n  * 100 - Continue.\n  * 101 - Switch protocol.\n* 2xx - Success.\n  * 200 - Ok.\n  * 201 - Resource is created or request is completed.\n* 3xx - Redirection.\n  * 301 - Moved permanently. Request URI has moved to an new URL.\n  * 307 - Moved temporary.Request URI has temporary moved to an new URL.\n* 4xx - Client error.\n  * 403 - Forbidden. Requested page was forbidden to access.\n  * 404 - Not found.\n* 5xx - Server error.\n  * 500 - Internal error. Server met unexpected problem.\n  * 503 - Service unavailable. Server temporary down.\n\n# HTTP Methods\nHTTP defines methods to indicate what action should be performed on server side.\n\n* GET      - Retrieves data from server with given URI.\n* POST    - Sends data to server. For example, sending forms, upload files.\n* PUT      - Creates(if doesn't exist) or updates target resource with new uploaded one.\n* DELETE  - Removes target resource with given URI.\n* HEAD    - Identical to GET, but only interested in head content.\n* CONNECT - Converts request into a TCP/IP tunnel.\n* OPTIONS - Describes communication options with server.\n* TRACE    - Echoes received request so that client can see if there are any modification from intermediate servers.\n* PATCH    - Updates partial modification to a resource.\n\nHere are some examples:\n\n#### GET\nOur server looks like:\n```js\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response){\n  response.writeHeader(200, {\"Content-Type\": \"text/plain\"});\n  response.end(\"Hello World!\");\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\nWith `curl -v http://localhost:3000`, you will get:\n``` plain\n* Rebuilt URL to: http://localhost:3000/\n*   Trying ::1...\n* Connected to localhost (::1) port 3000 (#0)\n> GET / HTTP/1.1\n> Host: localhost:3000\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain\n< Date: Sat, 10 Oct 2015 07:44:31 GMT\n< Connection: keep-alive\n< Transfer-Encoding: chunked\n<\n* Connection #0 to host localhost left intact\nHello World!%\n```\n\n#### POST\nServer:\n``` js\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response){\n  request.on(\"data\", function(chunks){\n    console.log(chunks.toString());\n    response.end();\n  });\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\nWith `curl -X POST -d @style.css -v http://localhost:3000`, server side console prints:\n``` plain\nserver is running...\ndiv {  color: red;}\n```\nOur style.css on disk looks like:\n``` css\ndiv {\n  color: red;\n}\n```\n\n# HTTP Headers\nThere are tons of headers http protocol has. Here only list some popular headers. For full list checkout [here](header-list):\n\nIn general, there are three types of header:\n\n* General header - Works with both request and response.\n  * Connection        - Indicates what type of method should be used for communication.\n  * Date              - The time this message was sent.\n  * Cache-Control     - Indicates the conditions to cache or not, which I will cover in practice later.\n  * Upgrade           - Tells what additional protocols it supports and would like to switch if client/server available these protocols.\n* Request header - only works with request.\n  * Accept            - What Content-Type it accepts.\n  * Accept-Encoding    - What Content-Encoding it accepts.\n  * Cookie            - By using cookie header field, client can send cookie to server.\n  * User-Agent        - Client's identity. For example, Mozilla/4.0, IE/10.0...\n* Response header - only works with response.\n  * Content-Encoding  - Tells what type of encoding has been applied to the entity body([explanation](entity-message-1)).\n  * Etag              - Used to tag version or identity for a file.\n  * Expires            - Gives a date after which the response is considered stale.\n\n# HTTP Headers in Practice\n\n#### Content-Encoding\nContent-Encoding is often used in sending files with minimal size as possible. Imagine a scenario you have minified all of your files - your html, css and js. All things look great, right? But actually, you can take it further by enabling Content-Encoding with gzip.\n\nServer:\n``` js\nvar fs = require(\"fs\");\nvar http = require(\"http\");\nvar zlib = require(\"zlib\");\n\nvar page = null;\n\nfs.readFile(\"./index.html\", function(err, file){\n  if(err){\n    throw err;\n  }\n  page = file.toString();\n});\n\nvar header = {\n  \"Content-Type\": \"text/html\",\n  \"Content-Encoding\": \"gzip\",\n};\n\nhttp.createServer(function(request, response){\n  zlib.gzip(page, function(err, buff){\n    response.writeHeader(200, header);\n    response.end(buff);\n  });\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\nSend request by using Chrome\n\n![content-encoding](/images/content-encoding.png)\n\nAs you can see, the file size has reduced from 3.7kb to 2.0kb, which is roughly 50% size reduction.\n\n#### Cache-Control\nServer:\n```js\nvar fs = require(\"fs\");\nvar http = require(\"http\");\n\nvar html = null;\nvar css = null;\n\nvar htmlHeader = {\n  \"Content-Type\": \"text/html\",\n  \"Cache-Control\": \"private, max-age=8\"\n};\n\nvar cssHeader = Object.assign({}, htmlHeader);\ncssHeader[\"Content-Type\"] = \"text/css\";\n\nfs.readFile(\"./index.html\", function(err, file){\n  if(err){\n    throw err;\n  }\n  html = file.toString();\n});\n\nfs.readFile(\"./style.css\", function(err, file){\n  if(err){\n    throw err;\n  }\n  css = file.toString();\n});\n\nhttp.createServer(function(request, response){\n  if(request.url === \"/\"){\n    response.writeHeader(200, htmlHeader);\n    response.end(html);\n  }\n  else if(request.url === \"/style.css\"){\n    response.writeHeader(200, cssHeader);\n    response.end(css);\n  }\n  else {\n    response.writeHeader(404);\n    response.end();\n  }\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\nHeader field `Cache-Control: private, max-age=8` means only cacheable on client machine and cache it for 8 seconds.\n\n![cache-control](/images/cache-control.png)\n\nOur css file is cached thanks to `Cache-Control`.\n\nNote: By clicking refresh icon, Chrome will send a request with header `Cache-Control: max-age=0` which will force Chrome itself to refetch files it requests. If you want to see cache behaviors, press enter in the URL search bar instead.\n\n# http-equiv\nNot everyone is able to reach server configuration. In order to access request header, a typical usage in frontend is via `http-equiv`\n```html\n<meta http-equiv=\"refresh\" content=\"2\">\n```\nWith `http-equiv`, you can do almost what you can do as on the server side.\n\n# References\n* [Wikipedia](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Status_codes)\n* [TutorialPoint](http://www.tutorialspoint.com/http/index.htm)\n* [MDN Http protocol](https://developer.mozilla.org/en-US/docs/Web/HTTP)\n* [html5rocks content security policy](http://www.html5rocks.com/en/tutorials/security/content-security-policy/)\n* [Entity body and message body question 1](entity-message-1)\n* [Entity body and message body question 2](entity-message-2)\n\n[entity-message-1]: http://stackoverflow.com/questions/13808619/confusion-about-entities-as-used-in-the-http-specification\n[entity-message-2]: http://stackoverflow.com/questions/2273837/which-one-is-the-message-and-which-one-the-entity-in-http-terminology\n[http-status-code]: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n[http-persistent-connection]: https://en.wikipedia.org/wiki/HTTP_persistent_connection\n[header-list]: https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\n","source":"_posts/2015-10-10-frontend-fundamental-http-1-1.markdown","raw":"---\nlayout: post\ntitle: \"Frontend Fundamental - HTTP 1.1\"\ndate: 2015-10-10T12:37:59+08:00\ntags: [frontend, HTTP/HTTPS, network]\n---\n\n# Purpose\nA study note for myself.\n\n# Tools I Use\n* Nodejs\n  * I will use Nodejs as server side foundation. No expressjs or some other fancy libraries here. Only vanilla Nodejs you need to know.\n* Curl\n  * A powerful command line tool to transfer data from or to server. It's builtin if users are using Mac or Linux OS.\n* Chrome\n  * A happy browser.\n\n# Introduction\nHTTP protocol is a fundamental when it comes to nowadays web. No matter you are an frontend or backend guy, knowing it is surely an important thing.\nIn this article, I will cover topics from basic features, headers to useful practices.\n\n# HTTP Architecture\nIn version 1.0, it was **multiple connection**, which means it opens a new connection per request/response. To solve the overhead of establishing connection for each request/response, version 1.1 comes with **persistent connection**, which means only uses a single connection for subsequent request/response to solve the establishing overhead.\n\n![from wikipedia](https://upload.wikimedia.org/wikipedia/commons/d/d5/HTTP_persistent_connection.svg)\n\nImage from [wikipedia](http-persistent-connection).\n\n# HTTP Basic Features\n* Media independent - Any types can be exchanged between client and server as long as they know what types each other are sending to.\n* Stateless - Server won't record anything about each other, like how long the connection last and blah blah blah... However you can write extra codes to record things.\n\n# HTTP Status Codes\nWhen server responses, it returns a 3-digit number back which tells client some kind of informations. Here I only listed partial content. For full list of status code check [here](http-status-code).\n\n* 1xx - Pure information to inform client.\n  * 100 - Continue.\n  * 101 - Switch protocol.\n* 2xx - Success.\n  * 200 - Ok.\n  * 201 - Resource is created or request is completed.\n* 3xx - Redirection.\n  * 301 - Moved permanently. Request URI has moved to an new URL.\n  * 307 - Moved temporary.Request URI has temporary moved to an new URL.\n* 4xx - Client error.\n  * 403 - Forbidden. Requested page was forbidden to access.\n  * 404 - Not found.\n* 5xx - Server error.\n  * 500 - Internal error. Server met unexpected problem.\n  * 503 - Service unavailable. Server temporary down.\n\n# HTTP Methods\nHTTP defines methods to indicate what action should be performed on server side.\n\n* GET      - Retrieves data from server with given URI.\n* POST    - Sends data to server. For example, sending forms, upload files.\n* PUT      - Creates(if doesn't exist) or updates target resource with new uploaded one.\n* DELETE  - Removes target resource with given URI.\n* HEAD    - Identical to GET, but only interested in head content.\n* CONNECT - Converts request into a TCP/IP tunnel.\n* OPTIONS - Describes communication options with server.\n* TRACE    - Echoes received request so that client can see if there are any modification from intermediate servers.\n* PATCH    - Updates partial modification to a resource.\n\nHere are some examples:\n\n#### GET\nOur server looks like:\n```js\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response){\n  response.writeHeader(200, {\"Content-Type\": \"text/plain\"});\n  response.end(\"Hello World!\");\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\nWith `curl -v http://localhost:3000`, you will get:\n``` plain\n* Rebuilt URL to: http://localhost:3000/\n*   Trying ::1...\n* Connected to localhost (::1) port 3000 (#0)\n> GET / HTTP/1.1\n> Host: localhost:3000\n> User-Agent: curl/7.43.0\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Content-Type: text/plain\n< Date: Sat, 10 Oct 2015 07:44:31 GMT\n< Connection: keep-alive\n< Transfer-Encoding: chunked\n<\n* Connection #0 to host localhost left intact\nHello World!%\n```\n\n#### POST\nServer:\n``` js\nvar http = require(\"http\");\n\nhttp.createServer(function(request, response){\n  request.on(\"data\", function(chunks){\n    console.log(chunks.toString());\n    response.end();\n  });\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\nWith `curl -X POST -d @style.css -v http://localhost:3000`, server side console prints:\n``` plain\nserver is running...\ndiv {  color: red;}\n```\nOur style.css on disk looks like:\n``` css\ndiv {\n  color: red;\n}\n```\n\n# HTTP Headers\nThere are tons of headers http protocol has. Here only list some popular headers. For full list checkout [here](header-list):\n\nIn general, there are three types of header:\n\n* General header - Works with both request and response.\n  * Connection        - Indicates what type of method should be used for communication.\n  * Date              - The time this message was sent.\n  * Cache-Control     - Indicates the conditions to cache or not, which I will cover in practice later.\n  * Upgrade           - Tells what additional protocols it supports and would like to switch if client/server available these protocols.\n* Request header - only works with request.\n  * Accept            - What Content-Type it accepts.\n  * Accept-Encoding    - What Content-Encoding it accepts.\n  * Cookie            - By using cookie header field, client can send cookie to server.\n  * User-Agent        - Client's identity. For example, Mozilla/4.0, IE/10.0...\n* Response header - only works with response.\n  * Content-Encoding  - Tells what type of encoding has been applied to the entity body([explanation](entity-message-1)).\n  * Etag              - Used to tag version or identity for a file.\n  * Expires            - Gives a date after which the response is considered stale.\n\n# HTTP Headers in Practice\n\n#### Content-Encoding\nContent-Encoding is often used in sending files with minimal size as possible. Imagine a scenario you have minified all of your files - your html, css and js. All things look great, right? But actually, you can take it further by enabling Content-Encoding with gzip.\n\nServer:\n``` js\nvar fs = require(\"fs\");\nvar http = require(\"http\");\nvar zlib = require(\"zlib\");\n\nvar page = null;\n\nfs.readFile(\"./index.html\", function(err, file){\n  if(err){\n    throw err;\n  }\n  page = file.toString();\n});\n\nvar header = {\n  \"Content-Type\": \"text/html\",\n  \"Content-Encoding\": \"gzip\",\n};\n\nhttp.createServer(function(request, response){\n  zlib.gzip(page, function(err, buff){\n    response.writeHeader(200, header);\n    response.end(buff);\n  });\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\nSend request by using Chrome\n\n![content-encoding](/images/content-encoding.png)\n\nAs you can see, the file size has reduced from 3.7kb to 2.0kb, which is roughly 50% size reduction.\n\n#### Cache-Control\nServer:\n```js\nvar fs = require(\"fs\");\nvar http = require(\"http\");\n\nvar html = null;\nvar css = null;\n\nvar htmlHeader = {\n  \"Content-Type\": \"text/html\",\n  \"Cache-Control\": \"private, max-age=8\"\n};\n\nvar cssHeader = Object.assign({}, htmlHeader);\ncssHeader[\"Content-Type\"] = \"text/css\";\n\nfs.readFile(\"./index.html\", function(err, file){\n  if(err){\n    throw err;\n  }\n  html = file.toString();\n});\n\nfs.readFile(\"./style.css\", function(err, file){\n  if(err){\n    throw err;\n  }\n  css = file.toString();\n});\n\nhttp.createServer(function(request, response){\n  if(request.url === \"/\"){\n    response.writeHeader(200, htmlHeader);\n    response.end(html);\n  }\n  else if(request.url === \"/style.css\"){\n    response.writeHeader(200, cssHeader);\n    response.end(css);\n  }\n  else {\n    response.writeHeader(404);\n    response.end();\n  }\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\nHeader field `Cache-Control: private, max-age=8` means only cacheable on client machine and cache it for 8 seconds.\n\n![cache-control](/images/cache-control.png)\n\nOur css file is cached thanks to `Cache-Control`.\n\nNote: By clicking refresh icon, Chrome will send a request with header `Cache-Control: max-age=0` which will force Chrome itself to refetch files it requests. If you want to see cache behaviors, press enter in the URL search bar instead.\n\n# http-equiv\nNot everyone is able to reach server configuration. In order to access request header, a typical usage in frontend is via `http-equiv`\n```html\n<meta http-equiv=\"refresh\" content=\"2\">\n```\nWith `http-equiv`, you can do almost what you can do as on the server side.\n\n# References\n* [Wikipedia](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Status_codes)\n* [TutorialPoint](http://www.tutorialspoint.com/http/index.htm)\n* [MDN Http protocol](https://developer.mozilla.org/en-US/docs/Web/HTTP)\n* [html5rocks content security policy](http://www.html5rocks.com/en/tutorials/security/content-security-policy/)\n* [Entity body and message body question 1](entity-message-1)\n* [Entity body and message body question 2](entity-message-2)\n\n[entity-message-1]: http://stackoverflow.com/questions/13808619/confusion-about-entities-as-used-in-the-http-specification\n[entity-message-2]: http://stackoverflow.com/questions/2273837/which-one-is-the-message-and-which-one-the-entity-in-http-terminology\n[http-status-code]: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n[http-persistent-connection]: https://en.wikipedia.org/wiki/HTTP_persistent_connection\n[header-list]: https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\n","slug":"2015-10-10-frontend-fundamental-http-1-1","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol84000dvfvgdifd22mi","comments":1,"photos":[],"link":"","content":"<h1 id=\"Purpose\"><a href=\"#Purpose\" class=\"headerlink\" title=\"Purpose\"></a>Purpose</h1><p>A study note for myself.</p>\n<h1 id=\"Tools-I-Use\"><a href=\"#Tools-I-Use\" class=\"headerlink\" title=\"Tools I Use\"></a>Tools I Use</h1><ul>\n<li>Nodejs<ul>\n<li>I will use Nodejs as server side foundation. No expressjs or some other fancy libraries here. Only vanilla Nodejs you need to know.</li>\n</ul>\n</li>\n<li>Curl<ul>\n<li>A powerful command line tool to transfer data from or to server. It’s builtin if users are using Mac or Linux OS.</li>\n</ul>\n</li>\n<li>Chrome<ul>\n<li>A happy browser.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>HTTP protocol is a fundamental when it comes to nowadays web. No matter you are an frontend or backend guy, knowing it is surely an important thing.<br>In this article, I will cover topics from basic features, headers to useful practices.</p>\n<h1 id=\"HTTP-Architecture\"><a href=\"#HTTP-Architecture\" class=\"headerlink\" title=\"HTTP Architecture\"></a>HTTP Architecture</h1><p>In version 1.0, it was <strong>multiple connection</strong>, which means it opens a new connection per request&#x2F;response. To solve the overhead of establishing connection for each request&#x2F;response, version 1.1 comes with <strong>persistent connection</strong>, which means only uses a single connection for subsequent request&#x2F;response to solve the establishing overhead.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/d/d5/HTTP_persistent_connection.svg\" alt=\"from wikipedia\"></p>\n<p>Image from <a href=\"http-persistent-connection\">wikipedia</a>.</p>\n<h1 id=\"HTTP-Basic-Features\"><a href=\"#HTTP-Basic-Features\" class=\"headerlink\" title=\"HTTP Basic Features\"></a>HTTP Basic Features</h1><ul>\n<li>Media independent - Any types can be exchanged between client and server as long as they know what types each other are sending to.</li>\n<li>Stateless - Server won’t record anything about each other, like how long the connection last and blah blah blah… However you can write extra codes to record things.</li>\n</ul>\n<h1 id=\"HTTP-Status-Codes\"><a href=\"#HTTP-Status-Codes\" class=\"headerlink\" title=\"HTTP Status Codes\"></a>HTTP Status Codes</h1><p>When server responses, it returns a 3-digit number back which tells client some kind of informations. Here I only listed partial content. For full list of status code check <a href=\"http-status-code\">here</a>.</p>\n<ul>\n<li>1xx - Pure information to inform client.<ul>\n<li>100 - Continue.</li>\n<li>101 - Switch protocol.</li>\n</ul>\n</li>\n<li>2xx - Success.<ul>\n<li>200 - Ok.</li>\n<li>201 - Resource is created or request is completed.</li>\n</ul>\n</li>\n<li>3xx - Redirection.<ul>\n<li>301 - Moved permanently. Request URI has moved to an new URL.</li>\n<li>307 - Moved temporary.Request URI has temporary moved to an new URL.</li>\n</ul>\n</li>\n<li>4xx - Client error.<ul>\n<li>403 - Forbidden. Requested page was forbidden to access.</li>\n<li>404 - Not found.</li>\n</ul>\n</li>\n<li>5xx - Server error.<ul>\n<li>500 - Internal error. Server met unexpected problem.</li>\n<li>503 - Service unavailable. Server temporary down.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"HTTP-Methods\"><a href=\"#HTTP-Methods\" class=\"headerlink\" title=\"HTTP Methods\"></a>HTTP Methods</h1><p>HTTP defines methods to indicate what action should be performed on server side.</p>\n<ul>\n<li>GET      - Retrieves data from server with given URI.</li>\n<li>POST    - Sends data to server. For example, sending forms, upload files.</li>\n<li>PUT      - Creates(if doesn’t exist) or updates target resource with new uploaded one.</li>\n<li>DELETE  - Removes target resource with given URI.</li>\n<li>HEAD    - Identical to GET, but only interested in head content.</li>\n<li>CONNECT - Converts request into a TCP&#x2F;IP tunnel.</li>\n<li>OPTIONS - Describes communication options with server.</li>\n<li>TRACE    - Echoes received request so that client can see if there are any modification from intermediate servers.</li>\n<li>PATCH    - Updates partial modification to a resource.</li>\n</ul>\n<p>Here are some examples:</p>\n<h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p>Our server looks like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)&#123;</span><br><span class=\"line\">  response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;<span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span>&#125;);</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>With <code>curl -v http://localhost:3000</code>, you will get:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Rebuilt URL to: http://localhost:3000/</span><br><span class=\"line\">*   Trying ::1...</span><br><span class=\"line\">* Connected to localhost (::1) port 3000 (#0)</span><br><span class=\"line\">&gt; GET / HTTP/1.1</span><br><span class=\"line\">&gt; Host: localhost:3000</span><br><span class=\"line\">&gt; User-Agent: curl/7.43.0</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt; HTTP/1.1 200 OK</span><br><span class=\"line\">&lt; Content-Type: text/plain</span><br><span class=\"line\">&lt; Date: Sat, 10 Oct 2015 07:44:31 GMT</span><br><span class=\"line\">&lt; Connection: keep-alive</span><br><span class=\"line\">&lt; Transfer-Encoding: chunked</span><br><span class=\"line\">&lt;</span><br><span class=\"line\">* Connection #0 to host localhost left intact</span><br><span class=\"line\">Hello World!%</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h4><p>Server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)&#123;</span><br><span class=\"line\">  request.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">chunks</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(chunks.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>With <code>curl -X POST -d @style.css -v http://localhost:3000</code>, server side console prints:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server is running...</span><br><span class=\"line\">div &#123;  color: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>Our style.css on disk looks like:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTTP-Headers\"><a href=\"#HTTP-Headers\" class=\"headerlink\" title=\"HTTP Headers\"></a>HTTP Headers</h1><p>There are tons of headers http protocol has. Here only list some popular headers. For full list checkout <a href=\"header-list\">here</a>:</p>\n<p>In general, there are three types of header:</p>\n<ul>\n<li>General header - Works with both request and response.<ul>\n<li>Connection        - Indicates what type of method should be used for communication.</li>\n<li>Date              - The time this message was sent.</li>\n<li>Cache-Control     - Indicates the conditions to cache or not, which I will cover in practice later.</li>\n<li>Upgrade           - Tells what additional protocols it supports and would like to switch if client&#x2F;server available these protocols.</li>\n</ul>\n</li>\n<li>Request header - only works with request.<ul>\n<li>Accept            - What Content-Type it accepts.</li>\n<li>Accept-Encoding    - What Content-Encoding it accepts.</li>\n<li>Cookie            - By using cookie header field, client can send cookie to server.</li>\n<li>User-Agent        - Client’s identity. For example, Mozilla&#x2F;4.0, IE&#x2F;10.0…</li>\n</ul>\n</li>\n<li>Response header - only works with response.<ul>\n<li>Content-Encoding  - Tells what type of encoding has been applied to the entity body(<a href=\"entity-message-1\">explanation</a>).</li>\n<li>Etag              - Used to tag version or identity for a file.</li>\n<li>Expires            - Gives a date after which the response is considered stale.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"HTTP-Headers-in-Practice\"><a href=\"#HTTP-Headers-in-Practice\" class=\"headerlink\" title=\"HTTP Headers in Practice\"></a>HTTP Headers in Practice</h1><h4 id=\"Content-Encoding\"><a href=\"#Content-Encoding\" class=\"headerlink\" title=\"Content-Encoding\"></a>Content-Encoding</h4><p>Content-Encoding is often used in sending files with minimal size as possible. Imagine a scenario you have minified all of your files - your html, css and js. All things look great, right? But actually, you can take it further by enabling Content-Encoding with gzip.</p>\n<p>Server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;zlib&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./index.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  page = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> header = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Content-Encoding&quot;</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)&#123;</span><br><span class=\"line\">  zlib.<span class=\"title function_\">gzip</span>(page, <span class=\"keyword\">function</span>(<span class=\"params\">err, buff</span>)&#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, header);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(buff);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>Send request by using Chrome</p>\n<p><img src=\"/images/content-encoding.png\" alt=\"content-encoding\"></p>\n<p>As you can see, the file size has reduced from 3.7kb to 2.0kb, which is roughly 50% size reduction.</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><p>Server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> css = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlHeader = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Cache-Control&quot;</span>: <span class=\"string\">&quot;private, max-age=8&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cssHeader = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, htmlHeader);</span><br><span class=\"line\">cssHeader[<span class=\"string\">&quot;Content-Type&quot;</span>] = <span class=\"string\">&quot;text/css&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./index.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  html = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./style.css&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  css = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(request.<span class=\"property\">url</span> === <span class=\"string\">&quot;/&quot;</span>)&#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, htmlHeader);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(html);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(request.<span class=\"property\">url</span> === <span class=\"string\">&quot;/style.css&quot;</span>)&#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, cssHeader);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(css);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">404</span>);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>Header field <code>Cache-Control: private, max-age=8</code> means only cacheable on client machine and cache it for 8 seconds.</p>\n<p><img src=\"/images/cache-control.png\" alt=\"cache-control\"></p>\n<p>Our css file is cached thanks to <code>Cache-Control</code>.</p>\n<p>Note: By clicking refresh icon, Chrome will send a request with header <code>Cache-Control: max-age=0</code> which will force Chrome itself to refetch files it requests. If you want to see cache behaviors, press enter in the URL search bar instead.</p>\n<h1 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h1><p>Not everyone is able to reach server configuration. In order to access request header, a typical usage in frontend is via <code>http-equiv</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>With <code>http-equiv</code>, you can do almost what you can do as on the server side.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Status_codes\">Wikipedia</a></li>\n<li><a href=\"http://www.tutorialspoint.com/http/index.htm\">TutorialPoint</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">MDN Http protocol</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\">html5rocks content security policy</a></li>\n<li><a href=\"entity-message-1\">Entity body and message body question 1</a></li>\n<li><a href=\"entity-message-2\">Entity body and message body question 2</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Purpose\"><a href=\"#Purpose\" class=\"headerlink\" title=\"Purpose\"></a>Purpose</h1><p>A study note for myself.</p>\n<h1 id=\"Tools-I-Use\"><a href=\"#Tools-I-Use\" class=\"headerlink\" title=\"Tools I Use\"></a>Tools I Use</h1><ul>\n<li>Nodejs<ul>\n<li>I will use Nodejs as server side foundation. No expressjs or some other fancy libraries here. Only vanilla Nodejs you need to know.</li>\n</ul>\n</li>\n<li>Curl<ul>\n<li>A powerful command line tool to transfer data from or to server. It’s builtin if users are using Mac or Linux OS.</li>\n</ul>\n</li>\n<li>Chrome<ul>\n<li>A happy browser.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>HTTP protocol is a fundamental when it comes to nowadays web. No matter you are an frontend or backend guy, knowing it is surely an important thing.<br>In this article, I will cover topics from basic features, headers to useful practices.</p>\n<h1 id=\"HTTP-Architecture\"><a href=\"#HTTP-Architecture\" class=\"headerlink\" title=\"HTTP Architecture\"></a>HTTP Architecture</h1><p>In version 1.0, it was <strong>multiple connection</strong>, which means it opens a new connection per request&#x2F;response. To solve the overhead of establishing connection for each request&#x2F;response, version 1.1 comes with <strong>persistent connection</strong>, which means only uses a single connection for subsequent request&#x2F;response to solve the establishing overhead.</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/d/d5/HTTP_persistent_connection.svg\" alt=\"from wikipedia\"></p>\n<p>Image from <a href=\"http-persistent-connection\">wikipedia</a>.</p>\n<h1 id=\"HTTP-Basic-Features\"><a href=\"#HTTP-Basic-Features\" class=\"headerlink\" title=\"HTTP Basic Features\"></a>HTTP Basic Features</h1><ul>\n<li>Media independent - Any types can be exchanged between client and server as long as they know what types each other are sending to.</li>\n<li>Stateless - Server won’t record anything about each other, like how long the connection last and blah blah blah… However you can write extra codes to record things.</li>\n</ul>\n<h1 id=\"HTTP-Status-Codes\"><a href=\"#HTTP-Status-Codes\" class=\"headerlink\" title=\"HTTP Status Codes\"></a>HTTP Status Codes</h1><p>When server responses, it returns a 3-digit number back which tells client some kind of informations. Here I only listed partial content. For full list of status code check <a href=\"http-status-code\">here</a>.</p>\n<ul>\n<li>1xx - Pure information to inform client.<ul>\n<li>100 - Continue.</li>\n<li>101 - Switch protocol.</li>\n</ul>\n</li>\n<li>2xx - Success.<ul>\n<li>200 - Ok.</li>\n<li>201 - Resource is created or request is completed.</li>\n</ul>\n</li>\n<li>3xx - Redirection.<ul>\n<li>301 - Moved permanently. Request URI has moved to an new URL.</li>\n<li>307 - Moved temporary.Request URI has temporary moved to an new URL.</li>\n</ul>\n</li>\n<li>4xx - Client error.<ul>\n<li>403 - Forbidden. Requested page was forbidden to access.</li>\n<li>404 - Not found.</li>\n</ul>\n</li>\n<li>5xx - Server error.<ul>\n<li>500 - Internal error. Server met unexpected problem.</li>\n<li>503 - Service unavailable. Server temporary down.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"HTTP-Methods\"><a href=\"#HTTP-Methods\" class=\"headerlink\" title=\"HTTP Methods\"></a>HTTP Methods</h1><p>HTTP defines methods to indicate what action should be performed on server side.</p>\n<ul>\n<li>GET      - Retrieves data from server with given URI.</li>\n<li>POST    - Sends data to server. For example, sending forms, upload files.</li>\n<li>PUT      - Creates(if doesn’t exist) or updates target resource with new uploaded one.</li>\n<li>DELETE  - Removes target resource with given URI.</li>\n<li>HEAD    - Identical to GET, but only interested in head content.</li>\n<li>CONNECT - Converts request into a TCP&#x2F;IP tunnel.</li>\n<li>OPTIONS - Describes communication options with server.</li>\n<li>TRACE    - Echoes received request so that client can see if there are any modification from intermediate servers.</li>\n<li>PATCH    - Updates partial modification to a resource.</li>\n</ul>\n<p>Here are some examples:</p>\n<h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p>Our server looks like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)&#123;</span><br><span class=\"line\">  response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;<span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span>&#125;);</span><br><span class=\"line\">  response.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>With <code>curl -v http://localhost:3000</code>, you will get:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Rebuilt URL to: http://localhost:3000/</span><br><span class=\"line\">*   Trying ::1...</span><br><span class=\"line\">* Connected to localhost (::1) port 3000 (#0)</span><br><span class=\"line\">&gt; GET / HTTP/1.1</span><br><span class=\"line\">&gt; Host: localhost:3000</span><br><span class=\"line\">&gt; User-Agent: curl/7.43.0</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">&lt; HTTP/1.1 200 OK</span><br><span class=\"line\">&lt; Content-Type: text/plain</span><br><span class=\"line\">&lt; Date: Sat, 10 Oct 2015 07:44:31 GMT</span><br><span class=\"line\">&lt; Connection: keep-alive</span><br><span class=\"line\">&lt; Transfer-Encoding: chunked</span><br><span class=\"line\">&lt;</span><br><span class=\"line\">* Connection #0 to host localhost left intact</span><br><span class=\"line\">Hello World!%</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h4><p>Server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)&#123;</span><br><span class=\"line\">  request.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">chunks</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(chunks.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>With <code>curl -X POST -d @style.css -v http://localhost:3000</code>, server side console prints:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server is running...</span><br><span class=\"line\">div &#123;  color: red;&#125;</span><br></pre></td></tr></table></figure>\n<p>Our style.css on disk looks like:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTTP-Headers\"><a href=\"#HTTP-Headers\" class=\"headerlink\" title=\"HTTP Headers\"></a>HTTP Headers</h1><p>There are tons of headers http protocol has. Here only list some popular headers. For full list checkout <a href=\"header-list\">here</a>:</p>\n<p>In general, there are three types of header:</p>\n<ul>\n<li>General header - Works with both request and response.<ul>\n<li>Connection        - Indicates what type of method should be used for communication.</li>\n<li>Date              - The time this message was sent.</li>\n<li>Cache-Control     - Indicates the conditions to cache or not, which I will cover in practice later.</li>\n<li>Upgrade           - Tells what additional protocols it supports and would like to switch if client&#x2F;server available these protocols.</li>\n</ul>\n</li>\n<li>Request header - only works with request.<ul>\n<li>Accept            - What Content-Type it accepts.</li>\n<li>Accept-Encoding    - What Content-Encoding it accepts.</li>\n<li>Cookie            - By using cookie header field, client can send cookie to server.</li>\n<li>User-Agent        - Client’s identity. For example, Mozilla&#x2F;4.0, IE&#x2F;10.0…</li>\n</ul>\n</li>\n<li>Response header - only works with response.<ul>\n<li>Content-Encoding  - Tells what type of encoding has been applied to the entity body(<a href=\"entity-message-1\">explanation</a>).</li>\n<li>Etag              - Used to tag version or identity for a file.</li>\n<li>Expires            - Gives a date after which the response is considered stale.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"HTTP-Headers-in-Practice\"><a href=\"#HTTP-Headers-in-Practice\" class=\"headerlink\" title=\"HTTP Headers in Practice\"></a>HTTP Headers in Practice</h1><h4 id=\"Content-Encoding\"><a href=\"#Content-Encoding\" class=\"headerlink\" title=\"Content-Encoding\"></a>Content-Encoding</h4><p>Content-Encoding is often used in sending files with minimal size as possible. Imagine a scenario you have minified all of your files - your html, css and js. All things look great, right? But actually, you can take it further by enabling Content-Encoding with gzip.</p>\n<p>Server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;zlib&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./index.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  page = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> header = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Content-Encoding&quot;</span>: <span class=\"string\">&quot;gzip&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)&#123;</span><br><span class=\"line\">  zlib.<span class=\"title function_\">gzip</span>(page, <span class=\"keyword\">function</span>(<span class=\"params\">err, buff</span>)&#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, header);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(buff);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>Send request by using Chrome</p>\n<p><img src=\"/images/content-encoding.png\" alt=\"content-encoding\"></p>\n<p>As you can see, the file size has reduced from 3.7kb to 2.0kb, which is roughly 50% size reduction.</p>\n<h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><p>Server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> css = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> htmlHeader = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;Cache-Control&quot;</span>: <span class=\"string\">&quot;private, max-age=8&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cssHeader = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, htmlHeader);</span><br><span class=\"line\">cssHeader[<span class=\"string\">&quot;Content-Type&quot;</span>] = <span class=\"string\">&quot;text/css&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./index.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  html = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./style.css&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  css = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(request.<span class=\"property\">url</span> === <span class=\"string\">&quot;/&quot;</span>)&#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, htmlHeader);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(html);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(request.<span class=\"property\">url</span> === <span class=\"string\">&quot;/style.css&quot;</span>)&#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, cssHeader);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>(css);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">404</span>);</span><br><span class=\"line\">    response.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>Header field <code>Cache-Control: private, max-age=8</code> means only cacheable on client machine and cache it for 8 seconds.</p>\n<p><img src=\"/images/cache-control.png\" alt=\"cache-control\"></p>\n<p>Our css file is cached thanks to <code>Cache-Control</code>.</p>\n<p>Note: By clicking refresh icon, Chrome will send a request with header <code>Cache-Control: max-age=0</code> which will force Chrome itself to refetch files it requests. If you want to see cache behaviors, press enter in the URL search bar instead.</p>\n<h1 id=\"http-equiv\"><a href=\"#http-equiv\" class=\"headerlink\" title=\"http-equiv\"></a>http-equiv</h1><p>Not everyone is able to reach server configuration. In order to access request header, a typical usage in frontend is via <code>http-equiv</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;refresh&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>With <code>http-equiv</code>, you can do almost what you can do as on the server side.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Status_codes\">Wikipedia</a></li>\n<li><a href=\"http://www.tutorialspoint.com/http/index.htm\">TutorialPoint</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">MDN Http protocol</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\">html5rocks content security policy</a></li>\n<li><a href=\"entity-message-1\">Entity body and message body question 1</a></li>\n<li><a href=\"entity-message-2\">Entity body and message body question 2</a></li>\n</ul>\n"},{"layout":"post","title":"Frontend Fundamental - HTTP 2.0","date":"2015-10-11T09:48:37.000Z","_content":"\n# What is HTTP 2.0?\nSince HTTP protocol was released, Web world has developed rapidly, and compared to the time in which HTTP was born, today's Web content is way more richer, and due to the heavy request loading Web has evolved, HTTP 1.1 is not capable sooner or later. In order to handle the job, HTTP have to be updated.\n\nHTTP 2.0 is based on SPDY(pronounced speedy) which is an experiment networking protocol developed by Google. SPDY aims to improve performance and security. In Feb. 2015, Google announced that SPDY will soon be deprecated since there is already a standard - HTTP 2.0.\n\n# HTTP 2.0 Features (differences to HTTP 1.1)\n* Communicate in binary, not textual.\n* Multiplex\n* Header compression\n* Server push\n\n#### Binary Communication\nIn HTTP 1.1 textual way, there are [4 ways to parse message](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4) when in HTTP 2 there is only one way to parse, and hence its more efficient.\n\n#### Multiplex\nWith HTTP 1.1, Most browsers create 6 to 8 connections to download resources from server in parallel; In HTTP 2.0, only one connection is needed. Not like HTTP 1.1, HTTP 2.0 is non-blocking. Client can send requests at once and get responses out of order, while HTTP 1.1 can only send request by request in a connection. It's like a car driving through a tunnel, but only one at a time.\n\n#### Header compression\nEven though there are already performance optimizations to compress our content, say **image sprite, in-lining, resource bundle**, headers still take space(say cookies, referer...), and for environment like mobile with limited bandwidth, it's more crucial. That's why we need header compression.\n\n#### Server Push\nServer can send response without any request from client.\n\nTraditional scenario:\n\n> Client: Hey server, I want index.html!\n>\n> Server: (Gives index.html)\n>\n> Client: Hey server, I want style.css!\n>\n> Server: (Gives style.css)\n>\n> Client: Thanks!\n\nWith server push:\n\n> Client: Hey server, I want index.html!\n>\n> Server: (Gives index.html, style.css and lots of resources client didn't ask for but do need.)\n>\n> Client: Err...these are what I want! thanks!\n\n# Platforms Support\n[Can I use http2?](http://caniuse.com/#search=http2)\n\nCurrently, except for some mobile browsers and old IE, most modern browsers support HTTP 2.0.\n\n# HTTP 2.0 In Practice\nFirst install `node-http2` for Nodejs.\n\n`npm install node-http2`\n\nAnd from the [HTTP/2 FAQ](HTTP/2 Frequently Asked Questions), it says:\n\n> # Does HTTP/2 require encryption?\n> No. After extensive discussion, the Working Group did not have consensus to require the use of encryption (e.g., TLS) for the new protocol.\n>\n> However, some implementations have stated that they will only support HTTP/2 when it is used over an encrypted connection, and currently no browser supports HTTP/2 unencrypted.\n\nSo prepare your certificate and private key, we still need them.\n\nServer:\n```js\nvar http2 = require(\"http2\");\nvar fs = require(\"fs\");\n\nvar options = {\n  key: fs.readFileSync(\"./server.key\"),\n  cert: fs.readFileSync(\"./server.cert\")\n};\n\nhttp2.createServer(options, function(req, res){\n  res.writeHead(200, null, {\n    \"content-type\": \"text/plain\"\n  });\n  res.end(\"we are using http2 weeeeeeeee\");\n}).listen(3000);\n\nconsole.log(\"Server is running...\");\n```\nRun it in `https` protocol with Chrome\n\n![http2](/images/http2.png)\n\nIn the protocol field, \"h2\" means we are using HTTP2 protocol.\n\n# References\n* [wikipedia-spdy](wikipedia-spdy)\n* [HTTP/2 Frequently Asked Questions](HTTP/2 Frequently Asked Questions)\n* [http2.akamai.com/](http2.akamai.com/)\n* [http2-demo](http2-demo)\n* [max-parallel-http-connections-in-a-browser](max-parallel-http-connections-in-a-browser)\n* [http2-and-java-current-status](http2-and-java-current-status)\n* [innovating-with-http-2.0-server-push](innovating-with-http-2.0-server-push)\n* [http2-is-minifying-js-concatenate-js-css-and-using-spritewith-spdys(with-spdy)-no-longer-needed](http://stackoverflow.com/questions/28630108/http2-is-minifying-js-concatenate-js-css-and-using-sprites-no-longer-needed)\n* [difference-between-http-pipeling-and-http-multiplexing-with-spdy](difference-between-http-pipeling-and-http-multiplexing-with-spdy)\n\n[wikipedia-spdy]: https://en.wikipedia.org/wiki/SPDY\n[HTTP/2 Frequently Asked Questions]: http://http2.github.io/faq/\n[max-parallel-http-connections-in-a-browser]: http://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser\n[http2.akamai.com/]: https://http2.akamai.com/\n[http2-demo]: https://http2.akamai.com/demo\n[http2-and-java-current-status]: http://www.slideshare.net/SimoneBordet/http2-and-java-current-status\n[innovating-with-http-2.0-server-push]: https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/\n[http2-is-minifying-js-concatenate-js-css-and-using-spritewith-spdys(with-spdy)-no-longer-needed]: http://stackoverflow.com/questions/28630108/http2-is-minifying-js-concatenate-js-css-and-using-spritewith-spdys(with-spdy)-no-longer-needed\n[difference-between-http-pipeling-and-http-multiplexing-with-spdy]: http://stackoverflow.com/questions/10480122/difference-between-http-pipeling-and-http-multiplexing-with-spdy\n","source":"_posts/2015-10-11-frontend-fundamental-http-2-0.markdown","raw":"---\nlayout: post\ntitle: \"Frontend Fundamental - HTTP 2.0\"\ndate: 2015-10-11T10:48:37+08:00\ntags: HTTP/HTTPS\n---\n\n# What is HTTP 2.0?\nSince HTTP protocol was released, Web world has developed rapidly, and compared to the time in which HTTP was born, today's Web content is way more richer, and due to the heavy request loading Web has evolved, HTTP 1.1 is not capable sooner or later. In order to handle the job, HTTP have to be updated.\n\nHTTP 2.0 is based on SPDY(pronounced speedy) which is an experiment networking protocol developed by Google. SPDY aims to improve performance and security. In Feb. 2015, Google announced that SPDY will soon be deprecated since there is already a standard - HTTP 2.0.\n\n# HTTP 2.0 Features (differences to HTTP 1.1)\n* Communicate in binary, not textual.\n* Multiplex\n* Header compression\n* Server push\n\n#### Binary Communication\nIn HTTP 1.1 textual way, there are [4 ways to parse message](http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4) when in HTTP 2 there is only one way to parse, and hence its more efficient.\n\n#### Multiplex\nWith HTTP 1.1, Most browsers create 6 to 8 connections to download resources from server in parallel; In HTTP 2.0, only one connection is needed. Not like HTTP 1.1, HTTP 2.0 is non-blocking. Client can send requests at once and get responses out of order, while HTTP 1.1 can only send request by request in a connection. It's like a car driving through a tunnel, but only one at a time.\n\n#### Header compression\nEven though there are already performance optimizations to compress our content, say **image sprite, in-lining, resource bundle**, headers still take space(say cookies, referer...), and for environment like mobile with limited bandwidth, it's more crucial. That's why we need header compression.\n\n#### Server Push\nServer can send response without any request from client.\n\nTraditional scenario:\n\n> Client: Hey server, I want index.html!\n>\n> Server: (Gives index.html)\n>\n> Client: Hey server, I want style.css!\n>\n> Server: (Gives style.css)\n>\n> Client: Thanks!\n\nWith server push:\n\n> Client: Hey server, I want index.html!\n>\n> Server: (Gives index.html, style.css and lots of resources client didn't ask for but do need.)\n>\n> Client: Err...these are what I want! thanks!\n\n# Platforms Support\n[Can I use http2?](http://caniuse.com/#search=http2)\n\nCurrently, except for some mobile browsers and old IE, most modern browsers support HTTP 2.0.\n\n# HTTP 2.0 In Practice\nFirst install `node-http2` for Nodejs.\n\n`npm install node-http2`\n\nAnd from the [HTTP/2 FAQ](HTTP/2 Frequently Asked Questions), it says:\n\n> # Does HTTP/2 require encryption?\n> No. After extensive discussion, the Working Group did not have consensus to require the use of encryption (e.g., TLS) for the new protocol.\n>\n> However, some implementations have stated that they will only support HTTP/2 when it is used over an encrypted connection, and currently no browser supports HTTP/2 unencrypted.\n\nSo prepare your certificate and private key, we still need them.\n\nServer:\n```js\nvar http2 = require(\"http2\");\nvar fs = require(\"fs\");\n\nvar options = {\n  key: fs.readFileSync(\"./server.key\"),\n  cert: fs.readFileSync(\"./server.cert\")\n};\n\nhttp2.createServer(options, function(req, res){\n  res.writeHead(200, null, {\n    \"content-type\": \"text/plain\"\n  });\n  res.end(\"we are using http2 weeeeeeeee\");\n}).listen(3000);\n\nconsole.log(\"Server is running...\");\n```\nRun it in `https` protocol with Chrome\n\n![http2](/images/http2.png)\n\nIn the protocol field, \"h2\" means we are using HTTP2 protocol.\n\n# References\n* [wikipedia-spdy](wikipedia-spdy)\n* [HTTP/2 Frequently Asked Questions](HTTP/2 Frequently Asked Questions)\n* [http2.akamai.com/](http2.akamai.com/)\n* [http2-demo](http2-demo)\n* [max-parallel-http-connections-in-a-browser](max-parallel-http-connections-in-a-browser)\n* [http2-and-java-current-status](http2-and-java-current-status)\n* [innovating-with-http-2.0-server-push](innovating-with-http-2.0-server-push)\n* [http2-is-minifying-js-concatenate-js-css-and-using-spritewith-spdys(with-spdy)-no-longer-needed](http://stackoverflow.com/questions/28630108/http2-is-minifying-js-concatenate-js-css-and-using-sprites-no-longer-needed)\n* [difference-between-http-pipeling-and-http-multiplexing-with-spdy](difference-between-http-pipeling-and-http-multiplexing-with-spdy)\n\n[wikipedia-spdy]: https://en.wikipedia.org/wiki/SPDY\n[HTTP/2 Frequently Asked Questions]: http://http2.github.io/faq/\n[max-parallel-http-connections-in-a-browser]: http://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser\n[http2.akamai.com/]: https://http2.akamai.com/\n[http2-demo]: https://http2.akamai.com/demo\n[http2-and-java-current-status]: http://www.slideshare.net/SimoneBordet/http2-and-java-current-status\n[innovating-with-http-2.0-server-push]: https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/\n[http2-is-minifying-js-concatenate-js-css-and-using-spritewith-spdys(with-spdy)-no-longer-needed]: http://stackoverflow.com/questions/28630108/http2-is-minifying-js-concatenate-js-css-and-using-spritewith-spdys(with-spdy)-no-longer-needed\n[difference-between-http-pipeling-and-http-multiplexing-with-spdy]: http://stackoverflow.com/questions/10480122/difference-between-http-pipeling-and-http-multiplexing-with-spdy\n","slug":"2015-10-11-frontend-fundamental-http-2-0","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol84000fvfvg660adrmo","comments":1,"photos":[],"link":"","content":"<h1 id=\"What-is-HTTP-2-0\"><a href=\"#What-is-HTTP-2-0\" class=\"headerlink\" title=\"What is HTTP 2.0?\"></a>What is HTTP 2.0?</h1><p>Since HTTP protocol was released, Web world has developed rapidly, and compared to the time in which HTTP was born, today’s Web content is way more richer, and due to the heavy request loading Web has evolved, HTTP 1.1 is not capable sooner or later. In order to handle the job, HTTP have to be updated.</p>\n<p>HTTP 2.0 is based on SPDY(pronounced speedy) which is an experiment networking protocol developed by Google. SPDY aims to improve performance and security. In Feb. 2015, Google announced that SPDY will soon be deprecated since there is already a standard - HTTP 2.0.</p>\n<h1 id=\"HTTP-2-0-Features-differences-to-HTTP-1-1\"><a href=\"#HTTP-2-0-Features-differences-to-HTTP-1-1\" class=\"headerlink\" title=\"HTTP 2.0 Features (differences to HTTP 1.1)\"></a>HTTP 2.0 Features (differences to HTTP 1.1)</h1><ul>\n<li>Communicate in binary, not textual.</li>\n<li>Multiplex</li>\n<li>Header compression</li>\n<li>Server push</li>\n</ul>\n<h4 id=\"Binary-Communication\"><a href=\"#Binary-Communication\" class=\"headerlink\" title=\"Binary Communication\"></a>Binary Communication</h4><p>In HTTP 1.1 textual way, there are <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4\">4 ways to parse message</a> when in HTTP 2 there is only one way to parse, and hence its more efficient.</p>\n<h4 id=\"Multiplex\"><a href=\"#Multiplex\" class=\"headerlink\" title=\"Multiplex\"></a>Multiplex</h4><p>With HTTP 1.1, Most browsers create 6 to 8 connections to download resources from server in parallel; In HTTP 2.0, only one connection is needed. Not like HTTP 1.1, HTTP 2.0 is non-blocking. Client can send requests at once and get responses out of order, while HTTP 1.1 can only send request by request in a connection. It’s like a car driving through a tunnel, but only one at a time.</p>\n<h4 id=\"Header-compression\"><a href=\"#Header-compression\" class=\"headerlink\" title=\"Header compression\"></a>Header compression</h4><p>Even though there are already performance optimizations to compress our content, say <strong>image sprite, in-lining, resource bundle</strong>, headers still take space(say cookies, referer…), and for environment like mobile with limited bandwidth, it’s more crucial. That’s why we need header compression.</p>\n<h4 id=\"Server-Push\"><a href=\"#Server-Push\" class=\"headerlink\" title=\"Server Push\"></a>Server Push</h4><p>Server can send response without any request from client.</p>\n<p>Traditional scenario:</p>\n<blockquote>\n<p>Client: Hey server, I want index.html!</p>\n<p>Server: (Gives index.html)</p>\n<p>Client: Hey server, I want style.css!</p>\n<p>Server: (Gives style.css)</p>\n<p>Client: Thanks!</p>\n</blockquote>\n<p>With server push:</p>\n<blockquote>\n<p>Client: Hey server, I want index.html!</p>\n<p>Server: (Gives index.html, style.css and lots of resources client didn’t ask for but do need.)</p>\n<p>Client: Err…these are what I want! thanks!</p>\n</blockquote>\n<h1 id=\"Platforms-Support\"><a href=\"#Platforms-Support\" class=\"headerlink\" title=\"Platforms Support\"></a>Platforms Support</h1><p><a href=\"http://caniuse.com/#search=http2\">Can I use http2?</a></p>\n<p>Currently, except for some mobile browsers and old IE, most modern browsers support HTTP 2.0.</p>\n<h1 id=\"HTTP-2-0-In-Practice\"><a href=\"#HTTP-2-0-In-Practice\" class=\"headerlink\" title=\"HTTP 2.0 In Practice\"></a>HTTP 2.0 In Practice</h1><p>First install <code>node-http2</code> for Nodejs.</p>\n<p><code>npm install node-http2</code></p>\n<p>And from the [HTTP&#x2F;2 FAQ](HTTP&#x2F;2 Frequently Asked Questions), it says:</p>\n<blockquote>\n<h1 id=\"Does-HTTP-2-require-encryption\"><a href=\"#Does-HTTP-2-require-encryption\" class=\"headerlink\" title=\"Does HTTP&#x2F;2 require encryption?\"></a>Does HTTP&#x2F;2 require encryption?</h1><p>No. After extensive discussion, the Working Group did not have consensus to require the use of encryption (e.g., TLS) for the new protocol.</p>\n<p>However, some implementations have stated that they will only support HTTP&#x2F;2 when it is used over an encrypted connection, and currently no browser supports HTTP&#x2F;2 unencrypted.</p>\n</blockquote>\n<p>So prepare your certificate and private key, we still need them.</p>\n<p>Server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http2 = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http2&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./server.key&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">cert</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./server.cert&quot;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http2.<span class=\"title function_\">createServer</span>(options, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, <span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;we are using http2 weeeeeeeee&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>Run it in <code>https</code> protocol with Chrome</p>\n<p><img src=\"/images/http2.png\" alt=\"http2\"></p>\n<p>In the protocol field, “h2” means we are using HTTP2 protocol.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"wikipedia-spdy\">wikipedia-spdy</a></li>\n<li><a href=\"http://http2.github.io/faq/\">HTTP&#x2F;2 Frequently Asked Questions</a>(HTTP&#x2F;2 Frequently Asked Questions)</li>\n<li><a href=\"http2.akamai.com/\">http2.akamai.com&#x2F;</a></li>\n<li><a href=\"http2-demo\">http2-demo</a></li>\n<li><a href=\"max-parallel-http-connections-in-a-browser\">max-parallel-http-connections-in-a-browser</a></li>\n<li><a href=\"http2-and-java-current-status\">http2-and-java-current-status</a></li>\n<li><a href=\"innovating-with-http-2.0-server-push\">innovating-with-http-2.0-server-push</a></li>\n<li><a href=\"http://stackoverflow.com/questions/28630108/http2-is-minifying-js-concatenate-js-css-and-using-sprites-no-longer-needed\">http2-is-minifying-js-concatenate-js-css-and-using-spritewith-spdys(with-spdy)-no-longer-needed</a></li>\n<li><a href=\"difference-between-http-pipeling-and-http-multiplexing-with-spdy\">difference-between-http-pipeling-and-http-multiplexing-with-spdy</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-HTTP-2-0\"><a href=\"#What-is-HTTP-2-0\" class=\"headerlink\" title=\"What is HTTP 2.0?\"></a>What is HTTP 2.0?</h1><p>Since HTTP protocol was released, Web world has developed rapidly, and compared to the time in which HTTP was born, today’s Web content is way more richer, and due to the heavy request loading Web has evolved, HTTP 1.1 is not capable sooner or later. In order to handle the job, HTTP have to be updated.</p>\n<p>HTTP 2.0 is based on SPDY(pronounced speedy) which is an experiment networking protocol developed by Google. SPDY aims to improve performance and security. In Feb. 2015, Google announced that SPDY will soon be deprecated since there is already a standard - HTTP 2.0.</p>\n<h1 id=\"HTTP-2-0-Features-differences-to-HTTP-1-1\"><a href=\"#HTTP-2-0-Features-differences-to-HTTP-1-1\" class=\"headerlink\" title=\"HTTP 2.0 Features (differences to HTTP 1.1)\"></a>HTTP 2.0 Features (differences to HTTP 1.1)</h1><ul>\n<li>Communicate in binary, not textual.</li>\n<li>Multiplex</li>\n<li>Header compression</li>\n<li>Server push</li>\n</ul>\n<h4 id=\"Binary-Communication\"><a href=\"#Binary-Communication\" class=\"headerlink\" title=\"Binary Communication\"></a>Binary Communication</h4><p>In HTTP 1.1 textual way, there are <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4\">4 ways to parse message</a> when in HTTP 2 there is only one way to parse, and hence its more efficient.</p>\n<h4 id=\"Multiplex\"><a href=\"#Multiplex\" class=\"headerlink\" title=\"Multiplex\"></a>Multiplex</h4><p>With HTTP 1.1, Most browsers create 6 to 8 connections to download resources from server in parallel; In HTTP 2.0, only one connection is needed. Not like HTTP 1.1, HTTP 2.0 is non-blocking. Client can send requests at once and get responses out of order, while HTTP 1.1 can only send request by request in a connection. It’s like a car driving through a tunnel, but only one at a time.</p>\n<h4 id=\"Header-compression\"><a href=\"#Header-compression\" class=\"headerlink\" title=\"Header compression\"></a>Header compression</h4><p>Even though there are already performance optimizations to compress our content, say <strong>image sprite, in-lining, resource bundle</strong>, headers still take space(say cookies, referer…), and for environment like mobile with limited bandwidth, it’s more crucial. That’s why we need header compression.</p>\n<h4 id=\"Server-Push\"><a href=\"#Server-Push\" class=\"headerlink\" title=\"Server Push\"></a>Server Push</h4><p>Server can send response without any request from client.</p>\n<p>Traditional scenario:</p>\n<blockquote>\n<p>Client: Hey server, I want index.html!</p>\n<p>Server: (Gives index.html)</p>\n<p>Client: Hey server, I want style.css!</p>\n<p>Server: (Gives style.css)</p>\n<p>Client: Thanks!</p>\n</blockquote>\n<p>With server push:</p>\n<blockquote>\n<p>Client: Hey server, I want index.html!</p>\n<p>Server: (Gives index.html, style.css and lots of resources client didn’t ask for but do need.)</p>\n<p>Client: Err…these are what I want! thanks!</p>\n</blockquote>\n<h1 id=\"Platforms-Support\"><a href=\"#Platforms-Support\" class=\"headerlink\" title=\"Platforms Support\"></a>Platforms Support</h1><p><a href=\"http://caniuse.com/#search=http2\">Can I use http2?</a></p>\n<p>Currently, except for some mobile browsers and old IE, most modern browsers support HTTP 2.0.</p>\n<h1 id=\"HTTP-2-0-In-Practice\"><a href=\"#HTTP-2-0-In-Practice\" class=\"headerlink\" title=\"HTTP 2.0 In Practice\"></a>HTTP 2.0 In Practice</h1><p>First install <code>node-http2</code> for Nodejs.</p>\n<p><code>npm install node-http2</code></p>\n<p>And from the [HTTP&#x2F;2 FAQ](HTTP&#x2F;2 Frequently Asked Questions), it says:</p>\n<blockquote>\n<h1 id=\"Does-HTTP-2-require-encryption\"><a href=\"#Does-HTTP-2-require-encryption\" class=\"headerlink\" title=\"Does HTTP&#x2F;2 require encryption?\"></a>Does HTTP&#x2F;2 require encryption?</h1><p>No. After extensive discussion, the Working Group did not have consensus to require the use of encryption (e.g., TLS) for the new protocol.</p>\n<p>However, some implementations have stated that they will only support HTTP&#x2F;2 when it is used over an encrypted connection, and currently no browser supports HTTP&#x2F;2 unencrypted.</p>\n</blockquote>\n<p>So prepare your certificate and private key, we still need them.</p>\n<p>Server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http2 = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http2&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./server.key&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">cert</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./server.cert&quot;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http2.<span class=\"title function_\">createServer</span>(options, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHead</span>(<span class=\"number\">200</span>, <span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;we are using http2 weeeeeeeee&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>Run it in <code>https</code> protocol with Chrome</p>\n<p><img src=\"/images/http2.png\" alt=\"http2\"></p>\n<p>In the protocol field, “h2” means we are using HTTP2 protocol.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"wikipedia-spdy\">wikipedia-spdy</a></li>\n<li><a href=\"http://http2.github.io/faq/\">HTTP&#x2F;2 Frequently Asked Questions</a>(HTTP&#x2F;2 Frequently Asked Questions)</li>\n<li><a href=\"http2.akamai.com/\">http2.akamai.com&#x2F;</a></li>\n<li><a href=\"http2-demo\">http2-demo</a></li>\n<li><a href=\"max-parallel-http-connections-in-a-browser\">max-parallel-http-connections-in-a-browser</a></li>\n<li><a href=\"http2-and-java-current-status\">http2-and-java-current-status</a></li>\n<li><a href=\"innovating-with-http-2.0-server-push\">innovating-with-http-2.0-server-push</a></li>\n<li><a href=\"http://stackoverflow.com/questions/28630108/http2-is-minifying-js-concatenate-js-css-and-using-sprites-no-longer-needed\">http2-is-minifying-js-concatenate-js-css-and-using-spritewith-spdys(with-spdy)-no-longer-needed</a></li>\n<li><a href=\"difference-between-http-pipeling-and-http-multiplexing-with-spdy\">difference-between-http-pipeling-and-http-multiplexing-with-spdy</a></li>\n</ul>\n"},{"layout":"post","title":"Frontend Fundamental - HTTPS","date":"2015-10-11T14:30:50.000Z","_content":"\n# What is HTTPS?\nHTTPS stands for HTTP Secure(or HTTP over TLS, SSL). The purpose is to establish a encrypted connection which provides more protection as opposed to HTTP that only creates transparent connections that are under the risk of being eavesdropping or intercepted by man-in-the-middle.\n\nHTTPS differs from HTTP at some points -\n\n* HTTPS uses port 443 as default, while HTTP uses port 80.\n* HTTPS still uses HTTP as its essential communication method. You can take SSL/TLS as an \"upgraded connection\" as opposed to \"normal connection\" which HTTP uses with.\n\n# What is TLS/SSL?\nSSL stands for Secure Sockets Layer, and TLS stands for Transport Layer Security. They are both cryptographic protocol making network communication more secure.\n\nSSL is the predecessor to TLS. SSL was started by Netscape, and was upgraded to TLS in 1999 because Netscape was no more and thus no further maintenance from then on.\n\nToday we still refer to TLS as SSL, because historically they are the same thing, only name changed.\n\n# How does it work?\nGenerally, TLS/SSL works with **private key** ,**public key** and **certificate**.\n\n* Client and server have its own **private keys**. **Public key** is the same on both client and server.\n* **Certificate** carries **public key** and other necessary informations.\n* **Certificate** can exist on both client and server.\n* Who sends **certificate** depends on method.\n\nIn order to use HTTPS, website owner should do the following:\n\n1. Generate **Certificate Signing Request (CSR)**. By doing this, your computer will generate a **private key**.\n2. Go to a trusted third party **Certificate Authority (CA)**, and validate with your **CSR**.\n3. When validation ends, **CA** will give you a new **public key** encrypted with **CA's private key**.\n4. Install this **CSR** on your server machine.\n\nClient and server establish connection by using a handshaking procedure:\n\n#### tl;dr Version\n\nIn case you are impatient like me...\n\n1. Server sends **server's public key (certificate)** to client.\n2. Client checks if it's **expired** or **not listed on the browser's certificates authority list**.\n3. If this certificate is trusted, client will send back its **client's public key** to server.\n4. Server creates an unique hash and encrypts it with **client's public key** and **server's private key** and send it to client.\n5. Client decrypts the hash with **client's private key** and **server's public key**, and verifies it.\n6. Server and client start to communicate in cryptographic communication.\n\n#### Basic TLS Handshaking\n\n1. First, client and server must agree on both using TLS/SSL protocol (HTTPS).\n2. Client sends a **Client Hello** message. In this step, client also sends informations like *the highest TLS version it supports*, *cipher suites* and *suggest compression methods*.\n3. Server responds with a **Server Hello** message, containing *the chosen TLS version*, *a random number*, *the choices of cipher suites and compression method* which client offered.\n4. Server sends a **Certificate** to client.\n5. Server sends a **Server Key Exchange** message to client.\n6. Server sends a **Server Hello Done** message to client.\n7. Client responds with **Client Key Exchange**, which may contains with *PreMasterSecret*, *public key* or *nothing*(depends on cipher suites choice).\n8. The client and server will now use *random number* and *PreMasterSecret* to generate a *MasterSecret*, which will be used by the following key data.\n9. Client sends a **Change Cipher Spec** message back to server. That means, \"Everything I tell you now on will be authenticated.\"\n10. Client sends a encrpted **Finished** message. Server will attempt to decrpt the **Finished** message. If it fails, the connection will torn down.\n11. Server sends a **Change Cipher Spec** message to client, telling \"Everything I tell you now on will be authenticated.\"\n12. Server will do the same thing like what client does in step 9.\n\n#### Client-Authenticated TLS Handshaking\n\nThe procedure is mostly identical to basic TLS handshaking, but with some changes from step 4:\n\n4. Server sends its own **Certificate** to client.\n5. Server sends **Server Key Exchange**.\n6. Server requests client's **Certificate**.\n7. Server sends **Server Hello Done**.\n8. Client responds with its **Certificate**.\n9. Client sends **Client Key Exchange**.\n10. Client sends a **Certificate Verify** message, which is a signature over the previous message using **client's private key**. Later will be verified by server with **client's public key**.\n11. After this step is identical to step 9 of basic TLS handshaking.\n\n#### Cipher Suites\n\nYou may wonder what is **cipher suites**, right? Here's what it defines:\n\n* **Key** exchange algorithm - how client and server authenticate during connection.\n  * RSA, Diffie-Hellman, ECDH, SRP, PSK.\n* **Encryption** algorithm - the method to encrypt message stream.\n  * RC4, Triple DES, AES, IDEA, DES...\n* Message authentication code(MAC, some refer to hash) - the way to create a cryptographic hash.\n  * For TLS: HMAC-MD5, HMAC-SHA.\n  * For SSL: SHA, MD5, MD4, MD2....\n\n# Pros and Cons\nPros\n\n* Security, security and security! No one will risk exposing their password, right?\n\nCons\n\n* Complex handshaking means more bandwidth overhead.\n* Since it costs more bandwidth, you may not want to use HTTPS on every page of your site, and by separating our protocol into two may lead more complexity to our system architecture.\n\n# Acquiring Certificates\nAcquiring a valid certificate means you need to purchase it issued by 3rd party Certificate Authority.\n\nThere are tons of CA on the Web, and since this article is not about getting your best deal SSL certificate, I will use `openssl` to generate a self-signed certificate for the following demonstration, and remember **self-signed certificate is for testing/development purpose**. Don't ever use it in production, or you will scare customers away.\n\n#### Generate a Private Key\n\n`openssl req -nodes -new -x509 -keyout server.key -out server.cert`\n\nHere I use `req` command to generate a certificate and a private key under current directory.\n\nBy doing this, the following form will prompt out. Type whatever it requests, and remember to leave `challenge password` empty.\n\n```plain\nCountry Name (2 letter code) [AU]:TW\nState or Province Name (full name) [Some-State]:Taiwan\nLocality Name (eg, city) []:Taipei\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:meow\n...\n```\n\n# HTTPS In Practice\n\nServer\n\n```js\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nvar options = {\n  key: fs.readFileSync(\"./server.key\"),\n  cert: fs.readFileSync(\"./server.cert\")\n};\n\nhttps.createServer(options, function(req, res){\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\",\n  });\n  res.end(\"Hello World\");\n}).listen(3000);\n\nconsole.log(\"Server is running...\");\n```\n\nLet's proceed with Chrome...\n\n![https-big](/images/https-big.png)\n\nOf course, our certificate is not issued by authorized 3rd party CA, and thus not trusted.\n\n![https-small](/images/https-small.png)\n\nAt least, it works with our Node.js, yay~\n\n# References\n\n* [https on wikipedia](https on wikipedia)\n* [TLS on wikipedia](TLS on wikipedia)\n* [Public-key cryptography](Public-key cryptography)\n* [https and certification for dummies on Stackoverflow](https and certification for dummies on Stackoverflow)\n* [The First Few Milliseconds of an HTTPS Connection](The First Few Milliseconds of an HTTPS Connection)\n* [How SSL Works](How SSL Works)\n* [Creating a Self-Signed SSL Certificate](Creating a Self-Signed SSL Certificate)\n* [How SSL works tutorial - with HTTPS example](How SSL works tutorial - with HTTPS example)\n* [What is HTTPS?](What is HTTPS?)\n* [Is it possible to generate RSA key without pass phrase?](Is it possible to generate RSA key without pass phrase?)\n\n[https on wikipedia]: https://en.wikipedia.org/wiki/HTTPS\n[TLS on wikipedia]: https://en.wikipedia.org/wiki/Transport_Layer_Security\n[Public-key cryptography]: https://en.wikipedia.org/wiki/Public-key_cryptography\n[https and certification for dummies on Stackoverflow]: http://serverfault.com/questions/429375/https-and-certification-for-dummies\n[The First Few Milliseconds of an HTTPS Connection]: http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html\n[How SSL Works]: https://ssl.trustwave.com/support/support-how-ssl-works.php\n[Creating a Self-Signed SSL Certificate]: https://devcenter.heroku.com/articles/ssl-certificate-self\n[How SSL works tutorial - with HTTPS example]: https://www.youtube.com/watch?v=iQsKdtjwtYI\n[What is HTTPS?]: https://www.youtube.com/watch?v=JCvPnwpWVUQ\n[Is it possible to generate RSA key without pass phrase?]: http://serverfault.com/questions/366372/is-it-possible-to-generate-rsa-key-without-pass-phrase\n","source":"_posts/2015-10-11-frontend-fundamental-https.markdown","raw":"---\nlayout: post\ntitle: \"Frontend Fundamental - HTTPS\"\ndate: 2015-10-11T15:30:50+08:00\ntags: [HTTP/HTTPS]\n---\n\n# What is HTTPS?\nHTTPS stands for HTTP Secure(or HTTP over TLS, SSL). The purpose is to establish a encrypted connection which provides more protection as opposed to HTTP that only creates transparent connections that are under the risk of being eavesdropping or intercepted by man-in-the-middle.\n\nHTTPS differs from HTTP at some points -\n\n* HTTPS uses port 443 as default, while HTTP uses port 80.\n* HTTPS still uses HTTP as its essential communication method. You can take SSL/TLS as an \"upgraded connection\" as opposed to \"normal connection\" which HTTP uses with.\n\n# What is TLS/SSL?\nSSL stands for Secure Sockets Layer, and TLS stands for Transport Layer Security. They are both cryptographic protocol making network communication more secure.\n\nSSL is the predecessor to TLS. SSL was started by Netscape, and was upgraded to TLS in 1999 because Netscape was no more and thus no further maintenance from then on.\n\nToday we still refer to TLS as SSL, because historically they are the same thing, only name changed.\n\n# How does it work?\nGenerally, TLS/SSL works with **private key** ,**public key** and **certificate**.\n\n* Client and server have its own **private keys**. **Public key** is the same on both client and server.\n* **Certificate** carries **public key** and other necessary informations.\n* **Certificate** can exist on both client and server.\n* Who sends **certificate** depends on method.\n\nIn order to use HTTPS, website owner should do the following:\n\n1. Generate **Certificate Signing Request (CSR)**. By doing this, your computer will generate a **private key**.\n2. Go to a trusted third party **Certificate Authority (CA)**, and validate with your **CSR**.\n3. When validation ends, **CA** will give you a new **public key** encrypted with **CA's private key**.\n4. Install this **CSR** on your server machine.\n\nClient and server establish connection by using a handshaking procedure:\n\n#### tl;dr Version\n\nIn case you are impatient like me...\n\n1. Server sends **server's public key (certificate)** to client.\n2. Client checks if it's **expired** or **not listed on the browser's certificates authority list**.\n3. If this certificate is trusted, client will send back its **client's public key** to server.\n4. Server creates an unique hash and encrypts it with **client's public key** and **server's private key** and send it to client.\n5. Client decrypts the hash with **client's private key** and **server's public key**, and verifies it.\n6. Server and client start to communicate in cryptographic communication.\n\n#### Basic TLS Handshaking\n\n1. First, client and server must agree on both using TLS/SSL protocol (HTTPS).\n2. Client sends a **Client Hello** message. In this step, client also sends informations like *the highest TLS version it supports*, *cipher suites* and *suggest compression methods*.\n3. Server responds with a **Server Hello** message, containing *the chosen TLS version*, *a random number*, *the choices of cipher suites and compression method* which client offered.\n4. Server sends a **Certificate** to client.\n5. Server sends a **Server Key Exchange** message to client.\n6. Server sends a **Server Hello Done** message to client.\n7. Client responds with **Client Key Exchange**, which may contains with *PreMasterSecret*, *public key* or *nothing*(depends on cipher suites choice).\n8. The client and server will now use *random number* and *PreMasterSecret* to generate a *MasterSecret*, which will be used by the following key data.\n9. Client sends a **Change Cipher Spec** message back to server. That means, \"Everything I tell you now on will be authenticated.\"\n10. Client sends a encrpted **Finished** message. Server will attempt to decrpt the **Finished** message. If it fails, the connection will torn down.\n11. Server sends a **Change Cipher Spec** message to client, telling \"Everything I tell you now on will be authenticated.\"\n12. Server will do the same thing like what client does in step 9.\n\n#### Client-Authenticated TLS Handshaking\n\nThe procedure is mostly identical to basic TLS handshaking, but with some changes from step 4:\n\n4. Server sends its own **Certificate** to client.\n5. Server sends **Server Key Exchange**.\n6. Server requests client's **Certificate**.\n7. Server sends **Server Hello Done**.\n8. Client responds with its **Certificate**.\n9. Client sends **Client Key Exchange**.\n10. Client sends a **Certificate Verify** message, which is a signature over the previous message using **client's private key**. Later will be verified by server with **client's public key**.\n11. After this step is identical to step 9 of basic TLS handshaking.\n\n#### Cipher Suites\n\nYou may wonder what is **cipher suites**, right? Here's what it defines:\n\n* **Key** exchange algorithm - how client and server authenticate during connection.\n  * RSA, Diffie-Hellman, ECDH, SRP, PSK.\n* **Encryption** algorithm - the method to encrypt message stream.\n  * RC4, Triple DES, AES, IDEA, DES...\n* Message authentication code(MAC, some refer to hash) - the way to create a cryptographic hash.\n  * For TLS: HMAC-MD5, HMAC-SHA.\n  * For SSL: SHA, MD5, MD4, MD2....\n\n# Pros and Cons\nPros\n\n* Security, security and security! No one will risk exposing their password, right?\n\nCons\n\n* Complex handshaking means more bandwidth overhead.\n* Since it costs more bandwidth, you may not want to use HTTPS on every page of your site, and by separating our protocol into two may lead more complexity to our system architecture.\n\n# Acquiring Certificates\nAcquiring a valid certificate means you need to purchase it issued by 3rd party Certificate Authority.\n\nThere are tons of CA on the Web, and since this article is not about getting your best deal SSL certificate, I will use `openssl` to generate a self-signed certificate for the following demonstration, and remember **self-signed certificate is for testing/development purpose**. Don't ever use it in production, or you will scare customers away.\n\n#### Generate a Private Key\n\n`openssl req -nodes -new -x509 -keyout server.key -out server.cert`\n\nHere I use `req` command to generate a certificate and a private key under current directory.\n\nBy doing this, the following form will prompt out. Type whatever it requests, and remember to leave `challenge password` empty.\n\n```plain\nCountry Name (2 letter code) [AU]:TW\nState or Province Name (full name) [Some-State]:Taiwan\nLocality Name (eg, city) []:Taipei\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:meow\n...\n```\n\n# HTTPS In Practice\n\nServer\n\n```js\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nvar options = {\n  key: fs.readFileSync(\"./server.key\"),\n  cert: fs.readFileSync(\"./server.cert\")\n};\n\nhttps.createServer(options, function(req, res){\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\",\n  });\n  res.end(\"Hello World\");\n}).listen(3000);\n\nconsole.log(\"Server is running...\");\n```\n\nLet's proceed with Chrome...\n\n![https-big](/images/https-big.png)\n\nOf course, our certificate is not issued by authorized 3rd party CA, and thus not trusted.\n\n![https-small](/images/https-small.png)\n\nAt least, it works with our Node.js, yay~\n\n# References\n\n* [https on wikipedia](https on wikipedia)\n* [TLS on wikipedia](TLS on wikipedia)\n* [Public-key cryptography](Public-key cryptography)\n* [https and certification for dummies on Stackoverflow](https and certification for dummies on Stackoverflow)\n* [The First Few Milliseconds of an HTTPS Connection](The First Few Milliseconds of an HTTPS Connection)\n* [How SSL Works](How SSL Works)\n* [Creating a Self-Signed SSL Certificate](Creating a Self-Signed SSL Certificate)\n* [How SSL works tutorial - with HTTPS example](How SSL works tutorial - with HTTPS example)\n* [What is HTTPS?](What is HTTPS?)\n* [Is it possible to generate RSA key without pass phrase?](Is it possible to generate RSA key without pass phrase?)\n\n[https on wikipedia]: https://en.wikipedia.org/wiki/HTTPS\n[TLS on wikipedia]: https://en.wikipedia.org/wiki/Transport_Layer_Security\n[Public-key cryptography]: https://en.wikipedia.org/wiki/Public-key_cryptography\n[https and certification for dummies on Stackoverflow]: http://serverfault.com/questions/429375/https-and-certification-for-dummies\n[The First Few Milliseconds of an HTTPS Connection]: http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html\n[How SSL Works]: https://ssl.trustwave.com/support/support-how-ssl-works.php\n[Creating a Self-Signed SSL Certificate]: https://devcenter.heroku.com/articles/ssl-certificate-self\n[How SSL works tutorial - with HTTPS example]: https://www.youtube.com/watch?v=iQsKdtjwtYI\n[What is HTTPS?]: https://www.youtube.com/watch?v=JCvPnwpWVUQ\n[Is it possible to generate RSA key without pass phrase?]: http://serverfault.com/questions/366372/is-it-possible-to-generate-rsa-key-without-pass-phrase\n","slug":"2015-10-11-frontend-fundamental-https","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol85000hvfvgfk1mfi0v","comments":1,"photos":[],"link":"","content":"<h1 id=\"What-is-HTTPS\"><a href=\"#What-is-HTTPS\" class=\"headerlink\" title=\"What is HTTPS?\"></a>What is HTTPS?</h1><p>HTTPS stands for HTTP Secure(or HTTP over TLS, SSL). The purpose is to establish a encrypted connection which provides more protection as opposed to HTTP that only creates transparent connections that are under the risk of being eavesdropping or intercepted by man-in-the-middle.</p>\n<p>HTTPS differs from HTTP at some points -</p>\n<ul>\n<li>HTTPS uses port 443 as default, while HTTP uses port 80.</li>\n<li>HTTPS still uses HTTP as its essential communication method. You can take SSL&#x2F;TLS as an “upgraded connection” as opposed to “normal connection” which HTTP uses with.</li>\n</ul>\n<h1 id=\"What-is-TLS-SSL\"><a href=\"#What-is-TLS-SSL\" class=\"headerlink\" title=\"What is TLS&#x2F;SSL?\"></a>What is TLS&#x2F;SSL?</h1><p>SSL stands for Secure Sockets Layer, and TLS stands for Transport Layer Security. They are both cryptographic protocol making network communication more secure.</p>\n<p>SSL is the predecessor to TLS. SSL was started by Netscape, and was upgraded to TLS in 1999 because Netscape was no more and thus no further maintenance from then on.</p>\n<p>Today we still refer to TLS as SSL, because historically they are the same thing, only name changed.</p>\n<h1 id=\"How-does-it-work\"><a href=\"#How-does-it-work\" class=\"headerlink\" title=\"How does it work?\"></a>How does it work?</h1><p>Generally, TLS&#x2F;SSL works with <strong>private key</strong> ,<strong>public key</strong> and <strong>certificate</strong>.</p>\n<ul>\n<li>Client and server have its own <strong>private keys</strong>. <strong>Public key</strong> is the same on both client and server.</li>\n<li><strong>Certificate</strong> carries <strong>public key</strong> and other necessary informations.</li>\n<li><strong>Certificate</strong> can exist on both client and server.</li>\n<li>Who sends <strong>certificate</strong> depends on method.</li>\n</ul>\n<p>In order to use HTTPS, website owner should do the following:</p>\n<ol>\n<li>Generate <strong>Certificate Signing Request (CSR)</strong>. By doing this, your computer will generate a <strong>private key</strong>.</li>\n<li>Go to a trusted third party <strong>Certificate Authority (CA)</strong>, and validate with your <strong>CSR</strong>.</li>\n<li>When validation ends, <strong>CA</strong> will give you a new <strong>public key</strong> encrypted with <strong>CA’s private key</strong>.</li>\n<li>Install this <strong>CSR</strong> on your server machine.</li>\n</ol>\n<p>Client and server establish connection by using a handshaking procedure:</p>\n<h4 id=\"tl-dr-Version\"><a href=\"#tl-dr-Version\" class=\"headerlink\" title=\"tl;dr Version\"></a>tl;dr Version</h4><p>In case you are impatient like me…</p>\n<ol>\n<li>Server sends <strong>server’s public key (certificate)</strong> to client.</li>\n<li>Client checks if it’s <strong>expired</strong> or <strong>not listed on the browser’s certificates authority list</strong>.</li>\n<li>If this certificate is trusted, client will send back its <strong>client’s public key</strong> to server.</li>\n<li>Server creates an unique hash and encrypts it with <strong>client’s public key</strong> and <strong>server’s private key</strong> and send it to client.</li>\n<li>Client decrypts the hash with <strong>client’s private key</strong> and <strong>server’s public key</strong>, and verifies it.</li>\n<li>Server and client start to communicate in cryptographic communication.</li>\n</ol>\n<h4 id=\"Basic-TLS-Handshaking\"><a href=\"#Basic-TLS-Handshaking\" class=\"headerlink\" title=\"Basic TLS Handshaking\"></a>Basic TLS Handshaking</h4><ol>\n<li>First, client and server must agree on both using TLS&#x2F;SSL protocol (HTTPS).</li>\n<li>Client sends a <strong>Client Hello</strong> message. In this step, client also sends informations like <em>the highest TLS version it supports</em>, <em>cipher suites</em> and <em>suggest compression methods</em>.</li>\n<li>Server responds with a <strong>Server Hello</strong> message, containing <em>the chosen TLS version</em>, <em>a random number</em>, <em>the choices of cipher suites and compression method</em> which client offered.</li>\n<li>Server sends a <strong>Certificate</strong> to client.</li>\n<li>Server sends a <strong>Server Key Exchange</strong> message to client.</li>\n<li>Server sends a <strong>Server Hello Done</strong> message to client.</li>\n<li>Client responds with <strong>Client Key Exchange</strong>, which may contains with <em>PreMasterSecret</em>, <em>public key</em> or <em>nothing</em>(depends on cipher suites choice).</li>\n<li>The client and server will now use <em>random number</em> and <em>PreMasterSecret</em> to generate a <em>MasterSecret</em>, which will be used by the following key data.</li>\n<li>Client sends a <strong>Change Cipher Spec</strong> message back to server. That means, “Everything I tell you now on will be authenticated.”</li>\n<li>Client sends a encrpted <strong>Finished</strong> message. Server will attempt to decrpt the <strong>Finished</strong> message. If it fails, the connection will torn down.</li>\n<li>Server sends a <strong>Change Cipher Spec</strong> message to client, telling “Everything I tell you now on will be authenticated.”</li>\n<li>Server will do the same thing like what client does in step 9.</li>\n</ol>\n<h4 id=\"Client-Authenticated-TLS-Handshaking\"><a href=\"#Client-Authenticated-TLS-Handshaking\" class=\"headerlink\" title=\"Client-Authenticated TLS Handshaking\"></a>Client-Authenticated TLS Handshaking</h4><p>The procedure is mostly identical to basic TLS handshaking, but with some changes from step 4:</p>\n<ol start=\"4\">\n<li>Server sends its own <strong>Certificate</strong> to client.</li>\n<li>Server sends <strong>Server Key Exchange</strong>.</li>\n<li>Server requests client’s <strong>Certificate</strong>.</li>\n<li>Server sends <strong>Server Hello Done</strong>.</li>\n<li>Client responds with its <strong>Certificate</strong>.</li>\n<li>Client sends <strong>Client Key Exchange</strong>.</li>\n<li>Client sends a <strong>Certificate Verify</strong> message, which is a signature over the previous message using <strong>client’s private key</strong>. Later will be verified by server with <strong>client’s public key</strong>.</li>\n<li>After this step is identical to step 9 of basic TLS handshaking.</li>\n</ol>\n<h4 id=\"Cipher-Suites\"><a href=\"#Cipher-Suites\" class=\"headerlink\" title=\"Cipher Suites\"></a>Cipher Suites</h4><p>You may wonder what is <strong>cipher suites</strong>, right? Here’s what it defines:</p>\n<ul>\n<li><strong>Key</strong> exchange algorithm - how client and server authenticate during connection.<ul>\n<li>RSA, Diffie-Hellman, ECDH, SRP, PSK.</li>\n</ul>\n</li>\n<li><strong>Encryption</strong> algorithm - the method to encrypt message stream.<ul>\n<li>RC4, Triple DES, AES, IDEA, DES…</li>\n</ul>\n</li>\n<li>Message authentication code(MAC, some refer to hash) - the way to create a cryptographic hash.<ul>\n<li>For TLS: HMAC-MD5, HMAC-SHA.</li>\n<li>For SSL: SHA, MD5, MD4, MD2….</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h1><p>Pros</p>\n<ul>\n<li>Security, security and security! No one will risk exposing their password, right?</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Complex handshaking means more bandwidth overhead.</li>\n<li>Since it costs more bandwidth, you may not want to use HTTPS on every page of your site, and by separating our protocol into two may lead more complexity to our system architecture.</li>\n</ul>\n<h1 id=\"Acquiring-Certificates\"><a href=\"#Acquiring-Certificates\" class=\"headerlink\" title=\"Acquiring Certificates\"></a>Acquiring Certificates</h1><p>Acquiring a valid certificate means you need to purchase it issued by 3rd party Certificate Authority.</p>\n<p>There are tons of CA on the Web, and since this article is not about getting your best deal SSL certificate, I will use <code>openssl</code> to generate a self-signed certificate for the following demonstration, and remember <strong>self-signed certificate is for testing&#x2F;development purpose</strong>. Don’t ever use it in production, or you will scare customers away.</p>\n<h4 id=\"Generate-a-Private-Key\"><a href=\"#Generate-a-Private-Key\" class=\"headerlink\" title=\"Generate a Private Key\"></a>Generate a Private Key</h4><p><code>openssl req -nodes -new -x509 -keyout server.key -out server.cert</code></p>\n<p>Here I use <code>req</code> command to generate a certificate and a private key under current directory.</p>\n<p>By doing this, the following form will prompt out. Type whatever it requests, and remember to leave <code>challenge password</code> empty.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Country Name (2 letter code) [AU]:TW</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:Taiwan</span><br><span class=\"line\">Locality Name (eg, city) []:Taipei</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:meow</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTTPS-In-Practice\"><a href=\"#HTTPS-In-Practice\" class=\"headerlink\" title=\"HTTPS In Practice\"></a>HTTPS In Practice</h1><p>Server</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;https&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./server.key&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">cert</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./server.cert&quot;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">https.<span class=\"title function_\">createServer</span>(options, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Let’s proceed with Chrome…</p>\n<p><img src=\"/images/https-big.png\" alt=\"https-big\"></p>\n<p>Of course, our certificate is not issued by authorized 3rd party CA, and thus not trusted.</p>\n<p><img src=\"/images/https-small.png\" alt=\"https-small\"></p>\n<p>At least, it works with our Node.js, yay~</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTPS\">https on wikipedia</a>(https on wikipedia)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\">TLS on wikipedia</a>(TLS on wikipedia)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\">Public-key cryptography</a>(Public-key cryptography)</li>\n<li><a href=\"http://serverfault.com/questions/429375/https-and-certification-for-dummies\">https and certification for dummies on Stackoverflow</a>(https and certification for dummies on Stackoverflow)</li>\n<li><a href=\"http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html\">The First Few Milliseconds of an HTTPS Connection</a>(The First Few Milliseconds of an HTTPS Connection)</li>\n<li><a href=\"https://ssl.trustwave.com/support/support-how-ssl-works.php\">How SSL Works</a>(How SSL Works)</li>\n<li><a href=\"https://devcenter.heroku.com/articles/ssl-certificate-self\">Creating a Self-Signed SSL Certificate</a>(Creating a Self-Signed SSL Certificate)</li>\n<li><a href=\"https://www.youtube.com/watch?v=iQsKdtjwtYI\">How SSL works tutorial - with HTTPS example</a>(How SSL works tutorial - with HTTPS example)</li>\n<li><a href=\"https://www.youtube.com/watch?v=JCvPnwpWVUQ\">What is HTTPS?</a>(What is HTTPS?)</li>\n<li><a href=\"http://serverfault.com/questions/366372/is-it-possible-to-generate-rsa-key-without-pass-phrase\">Is it possible to generate RSA key without pass phrase?</a>(Is it possible to generate RSA key without pass phrase?)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-HTTPS\"><a href=\"#What-is-HTTPS\" class=\"headerlink\" title=\"What is HTTPS?\"></a>What is HTTPS?</h1><p>HTTPS stands for HTTP Secure(or HTTP over TLS, SSL). The purpose is to establish a encrypted connection which provides more protection as opposed to HTTP that only creates transparent connections that are under the risk of being eavesdropping or intercepted by man-in-the-middle.</p>\n<p>HTTPS differs from HTTP at some points -</p>\n<ul>\n<li>HTTPS uses port 443 as default, while HTTP uses port 80.</li>\n<li>HTTPS still uses HTTP as its essential communication method. You can take SSL&#x2F;TLS as an “upgraded connection” as opposed to “normal connection” which HTTP uses with.</li>\n</ul>\n<h1 id=\"What-is-TLS-SSL\"><a href=\"#What-is-TLS-SSL\" class=\"headerlink\" title=\"What is TLS&#x2F;SSL?\"></a>What is TLS&#x2F;SSL?</h1><p>SSL stands for Secure Sockets Layer, and TLS stands for Transport Layer Security. They are both cryptographic protocol making network communication more secure.</p>\n<p>SSL is the predecessor to TLS. SSL was started by Netscape, and was upgraded to TLS in 1999 because Netscape was no more and thus no further maintenance from then on.</p>\n<p>Today we still refer to TLS as SSL, because historically they are the same thing, only name changed.</p>\n<h1 id=\"How-does-it-work\"><a href=\"#How-does-it-work\" class=\"headerlink\" title=\"How does it work?\"></a>How does it work?</h1><p>Generally, TLS&#x2F;SSL works with <strong>private key</strong> ,<strong>public key</strong> and <strong>certificate</strong>.</p>\n<ul>\n<li>Client and server have its own <strong>private keys</strong>. <strong>Public key</strong> is the same on both client and server.</li>\n<li><strong>Certificate</strong> carries <strong>public key</strong> and other necessary informations.</li>\n<li><strong>Certificate</strong> can exist on both client and server.</li>\n<li>Who sends <strong>certificate</strong> depends on method.</li>\n</ul>\n<p>In order to use HTTPS, website owner should do the following:</p>\n<ol>\n<li>Generate <strong>Certificate Signing Request (CSR)</strong>. By doing this, your computer will generate a <strong>private key</strong>.</li>\n<li>Go to a trusted third party <strong>Certificate Authority (CA)</strong>, and validate with your <strong>CSR</strong>.</li>\n<li>When validation ends, <strong>CA</strong> will give you a new <strong>public key</strong> encrypted with <strong>CA’s private key</strong>.</li>\n<li>Install this <strong>CSR</strong> on your server machine.</li>\n</ol>\n<p>Client and server establish connection by using a handshaking procedure:</p>\n<h4 id=\"tl-dr-Version\"><a href=\"#tl-dr-Version\" class=\"headerlink\" title=\"tl;dr Version\"></a>tl;dr Version</h4><p>In case you are impatient like me…</p>\n<ol>\n<li>Server sends <strong>server’s public key (certificate)</strong> to client.</li>\n<li>Client checks if it’s <strong>expired</strong> or <strong>not listed on the browser’s certificates authority list</strong>.</li>\n<li>If this certificate is trusted, client will send back its <strong>client’s public key</strong> to server.</li>\n<li>Server creates an unique hash and encrypts it with <strong>client’s public key</strong> and <strong>server’s private key</strong> and send it to client.</li>\n<li>Client decrypts the hash with <strong>client’s private key</strong> and <strong>server’s public key</strong>, and verifies it.</li>\n<li>Server and client start to communicate in cryptographic communication.</li>\n</ol>\n<h4 id=\"Basic-TLS-Handshaking\"><a href=\"#Basic-TLS-Handshaking\" class=\"headerlink\" title=\"Basic TLS Handshaking\"></a>Basic TLS Handshaking</h4><ol>\n<li>First, client and server must agree on both using TLS&#x2F;SSL protocol (HTTPS).</li>\n<li>Client sends a <strong>Client Hello</strong> message. In this step, client also sends informations like <em>the highest TLS version it supports</em>, <em>cipher suites</em> and <em>suggest compression methods</em>.</li>\n<li>Server responds with a <strong>Server Hello</strong> message, containing <em>the chosen TLS version</em>, <em>a random number</em>, <em>the choices of cipher suites and compression method</em> which client offered.</li>\n<li>Server sends a <strong>Certificate</strong> to client.</li>\n<li>Server sends a <strong>Server Key Exchange</strong> message to client.</li>\n<li>Server sends a <strong>Server Hello Done</strong> message to client.</li>\n<li>Client responds with <strong>Client Key Exchange</strong>, which may contains with <em>PreMasterSecret</em>, <em>public key</em> or <em>nothing</em>(depends on cipher suites choice).</li>\n<li>The client and server will now use <em>random number</em> and <em>PreMasterSecret</em> to generate a <em>MasterSecret</em>, which will be used by the following key data.</li>\n<li>Client sends a <strong>Change Cipher Spec</strong> message back to server. That means, “Everything I tell you now on will be authenticated.”</li>\n<li>Client sends a encrpted <strong>Finished</strong> message. Server will attempt to decrpt the <strong>Finished</strong> message. If it fails, the connection will torn down.</li>\n<li>Server sends a <strong>Change Cipher Spec</strong> message to client, telling “Everything I tell you now on will be authenticated.”</li>\n<li>Server will do the same thing like what client does in step 9.</li>\n</ol>\n<h4 id=\"Client-Authenticated-TLS-Handshaking\"><a href=\"#Client-Authenticated-TLS-Handshaking\" class=\"headerlink\" title=\"Client-Authenticated TLS Handshaking\"></a>Client-Authenticated TLS Handshaking</h4><p>The procedure is mostly identical to basic TLS handshaking, but with some changes from step 4:</p>\n<ol start=\"4\">\n<li>Server sends its own <strong>Certificate</strong> to client.</li>\n<li>Server sends <strong>Server Key Exchange</strong>.</li>\n<li>Server requests client’s <strong>Certificate</strong>.</li>\n<li>Server sends <strong>Server Hello Done</strong>.</li>\n<li>Client responds with its <strong>Certificate</strong>.</li>\n<li>Client sends <strong>Client Key Exchange</strong>.</li>\n<li>Client sends a <strong>Certificate Verify</strong> message, which is a signature over the previous message using <strong>client’s private key</strong>. Later will be verified by server with <strong>client’s public key</strong>.</li>\n<li>After this step is identical to step 9 of basic TLS handshaking.</li>\n</ol>\n<h4 id=\"Cipher-Suites\"><a href=\"#Cipher-Suites\" class=\"headerlink\" title=\"Cipher Suites\"></a>Cipher Suites</h4><p>You may wonder what is <strong>cipher suites</strong>, right? Here’s what it defines:</p>\n<ul>\n<li><strong>Key</strong> exchange algorithm - how client and server authenticate during connection.<ul>\n<li>RSA, Diffie-Hellman, ECDH, SRP, PSK.</li>\n</ul>\n</li>\n<li><strong>Encryption</strong> algorithm - the method to encrypt message stream.<ul>\n<li>RC4, Triple DES, AES, IDEA, DES…</li>\n</ul>\n</li>\n<li>Message authentication code(MAC, some refer to hash) - the way to create a cryptographic hash.<ul>\n<li>For TLS: HMAC-MD5, HMAC-SHA.</li>\n<li>For SSL: SHA, MD5, MD4, MD2….</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h1><p>Pros</p>\n<ul>\n<li>Security, security and security! No one will risk exposing their password, right?</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Complex handshaking means more bandwidth overhead.</li>\n<li>Since it costs more bandwidth, you may not want to use HTTPS on every page of your site, and by separating our protocol into two may lead more complexity to our system architecture.</li>\n</ul>\n<h1 id=\"Acquiring-Certificates\"><a href=\"#Acquiring-Certificates\" class=\"headerlink\" title=\"Acquiring Certificates\"></a>Acquiring Certificates</h1><p>Acquiring a valid certificate means you need to purchase it issued by 3rd party Certificate Authority.</p>\n<p>There are tons of CA on the Web, and since this article is not about getting your best deal SSL certificate, I will use <code>openssl</code> to generate a self-signed certificate for the following demonstration, and remember <strong>self-signed certificate is for testing&#x2F;development purpose</strong>. Don’t ever use it in production, or you will scare customers away.</p>\n<h4 id=\"Generate-a-Private-Key\"><a href=\"#Generate-a-Private-Key\" class=\"headerlink\" title=\"Generate a Private Key\"></a>Generate a Private Key</h4><p><code>openssl req -nodes -new -x509 -keyout server.key -out server.cert</code></p>\n<p>Here I use <code>req</code> command to generate a certificate and a private key under current directory.</p>\n<p>By doing this, the following form will prompt out. Type whatever it requests, and remember to leave <code>challenge password</code> empty.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Country Name (2 letter code) [AU]:TW</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:Taiwan</span><br><span class=\"line\">Locality Name (eg, city) []:Taipei</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:meow</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HTTPS-In-Practice\"><a href=\"#HTTPS-In-Practice\" class=\"headerlink\" title=\"HTTPS In Practice\"></a>HTTPS In Practice</h1><p>Server</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;https&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">key</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./server.key&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">cert</span>: fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">&quot;./server.cert&quot;</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">https.<span class=\"title function_\">createServer</span>(options, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Let’s proceed with Chrome…</p>\n<p><img src=\"/images/https-big.png\" alt=\"https-big\"></p>\n<p>Of course, our certificate is not issued by authorized 3rd party CA, and thus not trusted.</p>\n<p><img src=\"/images/https-small.png\" alt=\"https-small\"></p>\n<p>At least, it works with our Node.js, yay~</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTPS\">https on wikipedia</a>(https on wikipedia)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\">TLS on wikipedia</a>(TLS on wikipedia)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Public-key_cryptography\">Public-key cryptography</a>(Public-key cryptography)</li>\n<li><a href=\"http://serverfault.com/questions/429375/https-and-certification-for-dummies\">https and certification for dummies on Stackoverflow</a>(https and certification for dummies on Stackoverflow)</li>\n<li><a href=\"http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html\">The First Few Milliseconds of an HTTPS Connection</a>(The First Few Milliseconds of an HTTPS Connection)</li>\n<li><a href=\"https://ssl.trustwave.com/support/support-how-ssl-works.php\">How SSL Works</a>(How SSL Works)</li>\n<li><a href=\"https://devcenter.heroku.com/articles/ssl-certificate-self\">Creating a Self-Signed SSL Certificate</a>(Creating a Self-Signed SSL Certificate)</li>\n<li><a href=\"https://www.youtube.com/watch?v=iQsKdtjwtYI\">How SSL works tutorial - with HTTPS example</a>(How SSL works tutorial - with HTTPS example)</li>\n<li><a href=\"https://www.youtube.com/watch?v=JCvPnwpWVUQ\">What is HTTPS?</a>(What is HTTPS?)</li>\n<li><a href=\"http://serverfault.com/questions/366372/is-it-possible-to-generate-rsa-key-without-pass-phrase\">Is it possible to generate RSA key without pass phrase?</a>(Is it possible to generate RSA key without pass phrase?)</li>\n</ul>\n"},{"layout":"post","title":"Asynchronous Programming in JavaScript","date":"2015-10-26T21:24:59.000Z","_content":"\n# Purpose\nJust a learning note here. There are already tons of glorious posts talking about this topic, so don't expect to see something super edge, extreme frontier technology here.\n\n# What is asynchronous?\nBefore moving on, knowing what exactly is Asynchronous is essential.\n\nSynchronous, contrary to Asynchronous, means blocking. That means computer can only run a task at one time. Before finishing this one, another will not start.\n\nWhen we mention about Asynchronous, we are referring to non-blocking, which means, computer runs a tasks without \"blocking\" other tasks.\n\nAnd don't confuse Asynchronous with words Concurrency or Parallel, they are different things.\n\nParallel usually refers to true multi-tasking, which means computer distributes several tasks among processors. In this way, tasks are executed in real simultaneously.\n\nConcurrent is a concept of having a group of tasks sharing an execution thread with each other to let them run simultaneously. Asynchronous and Synchronous are just descriptions of state between tasks.\n\n# How does it work in JavaScript?\nJavaScript is an event-driven language and it uses an event-loop to get codes run in asynchronous. JavaScript is also called single-threaded language because it can only run a piece of code at a time.\n\nSo, does that mean JavaScript is really a single-threaded language? Hmm, not accurate. No matter what platform JavaScript is on, either client side(browsers) or server side(Node.js), there is actually a thread pool underneath it.\n\nAfter digging here and there on the web, I realized to explicitly explain how does it work is a huge thing, and it really hurts your head. For the sake of simplicity, here is my simple version:\n\nJavaScript on both client and server side use one thread for code execution, another one for taking care of event loop, and all of others for handling events and triggering handlers. Whenever interpreter runs into async code like `button.click()`(UI events) or `fs.readFile()` (I/O events), it pushes callbacks into an event queue, and after all things in main function are done, it pops callbacks in queue to get these executed.\n\nAnd...that's it. :P\n\nTo get more illustration, visit [this awesome site](http://latentflip.com/loupe/). The website visualizes how event loop works in JavaScript in a very clear manner, and if it still can't satisfy you, scroll down to References & Resources for further reading.\n\n# Callback\nSo, how do we take advantage of async? Well, the answer is pretty simple:\n\n```js\nsetTimeout(function(){\n  console.log(\"Wolrd!\");\n}, 1000);\n\nconsole.log(\"Hello\");\n```\n\nWhen you set an callback on an event, you are using async. Another common practice is using ajax:\n\n```js\nvar ajax = new XMLHttpRequest();\najax.open(\"GET\", \"http://www.example.com\");\najax.addEventListener(\"readystatechange\", function(){\n  if(ajax.readyState === 4){\n    if(ajax.state === 200){\n      console.log(ajax.responseText);\n    }\n  }\n});\najax.send();\n```\n\nCallback really fulfills our need for async, but when our program grows larger, our callback logic may become complicated as well, which results in some nasty and hard-to-maintained code.\n\n```js\nrequest(\"http://www.example.com/api/data1\", function(result, status){\n  if(status === \"OK\"){\n    request(\"http://www.example.com/api/data2\", function(result, status){\n      if(status === \"OK\"){\n        request(\"http://www.example.com/api/data3\", function(result, status){\n          console.log(result);\n        });\n      }\n    });\n  }\n});\n```\n\nWhat worse than callback hell is that you can't even catch exceptions which was thrown in callback. This will lead our program unpredictable.\n\n```js\ntry{\n  setTimeout(function(){\n    throw new Error(\"you can't catch me!\");\n  }, 1000);\n}\ncatch(e){\n  console.log(\"Caught one!\");\n  console.log(e);\n}\n// Here is actually exception was thrown.\n```\n\nLuckily, there is a new feature called Promise which can save you from this mess.\n\n# Promise\nPromise is ES6's feature. With this, you can simplify complicated callbacks into human readable one:\n\n```js\n// if request returns Promises\nrequest(\"http://www.example.com/api/data\")\n.then((result) => {\n  return result.status === \"OK\" ? request(\"http://www.example.com/api/data2\") : throw new Error(\"Something went wrong while requesting data 2\");\n})\n.then((result) => {\n  return result.status === \"OK\" ? request(\"http://www.example.com/api/data3\") : throw new Error(\"Something went wrong while requesting data 3\");\n});\n```\n\nThis is much easier to read, right? Did I just mention about exception?\n\n```js\nnew Promise((resolve, reject) => {\n  let result = doSomething();\n  if(result){\n    resolve(result);\n  }\n  else {\n    reject(result.reason);\n  }\n})\n.then((result) => {\n  console.log(\"Succeed: \" + result);\n})\ncathc((reason) => {\n  console.log(\"Oops, something went wrong: \" + reason);\n});\n```\n\nIn this way you can solve async problem elegantly.\n\nUsing Babel like me? Insert `require(\"babel/polyfill\")` at the head of your code to enable this goodie.\n\nIf in your environment ES6 is not allowed, don't be sad, there are tons of libraries implementing this awesome feature!\n\n* [Bluebird](http://bluebirdjs.com/docs/getting-started.html)\n* [jQuery - Deferred](https://api.jquery.com/category/deferred-object/)\n* [Q](http://documentup.com/kriskowal/q/)\n* [when](https://github.com/cujojs/when/blob/master/docs/api.md)\n* ...I only named a few, google `js promise lib` for more!\n\n# Async/Await\nWhat if you could write async code like it was sync? ES7 provides a new feature called `async/await`. By combining it with promise, you can write async code in sync style!\n\n```js\nIamAsync();\n\nconsole.log(\"Hello\");\n\nasync function IamAsync(){\n  let result = await new Promise((resolve, reject) => { setTimeout(resolve, 3000, \"World!\"); });\n  return result;\n}\n\n// output:\n// Hello\n// (wait for 3 seconds...)\n// World!\n```\n\nCurrently `async/await` is only available in Babel by running with `babel source.js -o compiled.js --stage 0` and beware that it is still in experiment, everything is subject to change.\n\n\n# References & Resources\n* [How to articulate the difference between asynchronous and parallel programming?](http://stackoverflow.com/questions/6133574/how-to-articulate-the-difference-between-asynchronous-and-parallel-programming)\n* [What is the difference between concurrency, parallelism and asynchronous methods?](http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods)\n* [How does a single thread handle asynchronous code in JavaScript?](https://www.quora.com/How-does-a-single-thread-handle-asynchronous-code-in-JavaScript)\n* [Get the door, Javes! Understanding Sync & Async in JavaScript](https://www.discovermeteor.com/blog/understanding-sync-async-javascript-node/)\n* [Philip Roberts: What the heck is the event loop anyway? JSConf EU 2014](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n* [Promises for asynchronous programming](http://exploringjs.com/es6/ch_promises.html)\n* [A Primer on ES7 Async Functions](https://code.tutsplus.com/tutorials/a-primer-on-es7-async-functions--cms-22367)\n* [ES7 Async/Await](http://rossboucher.com/await/#/)\n* [The Evolution of Asynchronous JavaScript](https://blog.risingstack.com/asynchronous-javascript/)\n* [2. What is Node.js?](http://book.mixu.net/node/ch2.html)\n* [Is javascript guaranteed to be single-threaded?](http://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded)\n* [How does a single thread handle asynchronous code in JavaScript?](https://www.quora.com/How-does-a-single-thread-handle-asynchronous-code-in-JavaScript)\n","source":"_posts/2015-10-26-asynchronous-programming-in-javascript.markdown","raw":"---\nlayout: post\ntitle: \"Asynchronous Programming in JavaScript\"\ndate: 2015-10-26T22:24:59+08:00\ntags: [javascript, concurrent, meta]\n---\n\n# Purpose\nJust a learning note here. There are already tons of glorious posts talking about this topic, so don't expect to see something super edge, extreme frontier technology here.\n\n# What is asynchronous?\nBefore moving on, knowing what exactly is Asynchronous is essential.\n\nSynchronous, contrary to Asynchronous, means blocking. That means computer can only run a task at one time. Before finishing this one, another will not start.\n\nWhen we mention about Asynchronous, we are referring to non-blocking, which means, computer runs a tasks without \"blocking\" other tasks.\n\nAnd don't confuse Asynchronous with words Concurrency or Parallel, they are different things.\n\nParallel usually refers to true multi-tasking, which means computer distributes several tasks among processors. In this way, tasks are executed in real simultaneously.\n\nConcurrent is a concept of having a group of tasks sharing an execution thread with each other to let them run simultaneously. Asynchronous and Synchronous are just descriptions of state between tasks.\n\n# How does it work in JavaScript?\nJavaScript is an event-driven language and it uses an event-loop to get codes run in asynchronous. JavaScript is also called single-threaded language because it can only run a piece of code at a time.\n\nSo, does that mean JavaScript is really a single-threaded language? Hmm, not accurate. No matter what platform JavaScript is on, either client side(browsers) or server side(Node.js), there is actually a thread pool underneath it.\n\nAfter digging here and there on the web, I realized to explicitly explain how does it work is a huge thing, and it really hurts your head. For the sake of simplicity, here is my simple version:\n\nJavaScript on both client and server side use one thread for code execution, another one for taking care of event loop, and all of others for handling events and triggering handlers. Whenever interpreter runs into async code like `button.click()`(UI events) or `fs.readFile()` (I/O events), it pushes callbacks into an event queue, and after all things in main function are done, it pops callbacks in queue to get these executed.\n\nAnd...that's it. :P\n\nTo get more illustration, visit [this awesome site](http://latentflip.com/loupe/). The website visualizes how event loop works in JavaScript in a very clear manner, and if it still can't satisfy you, scroll down to References & Resources for further reading.\n\n# Callback\nSo, how do we take advantage of async? Well, the answer is pretty simple:\n\n```js\nsetTimeout(function(){\n  console.log(\"Wolrd!\");\n}, 1000);\n\nconsole.log(\"Hello\");\n```\n\nWhen you set an callback on an event, you are using async. Another common practice is using ajax:\n\n```js\nvar ajax = new XMLHttpRequest();\najax.open(\"GET\", \"http://www.example.com\");\najax.addEventListener(\"readystatechange\", function(){\n  if(ajax.readyState === 4){\n    if(ajax.state === 200){\n      console.log(ajax.responseText);\n    }\n  }\n});\najax.send();\n```\n\nCallback really fulfills our need for async, but when our program grows larger, our callback logic may become complicated as well, which results in some nasty and hard-to-maintained code.\n\n```js\nrequest(\"http://www.example.com/api/data1\", function(result, status){\n  if(status === \"OK\"){\n    request(\"http://www.example.com/api/data2\", function(result, status){\n      if(status === \"OK\"){\n        request(\"http://www.example.com/api/data3\", function(result, status){\n          console.log(result);\n        });\n      }\n    });\n  }\n});\n```\n\nWhat worse than callback hell is that you can't even catch exceptions which was thrown in callback. This will lead our program unpredictable.\n\n```js\ntry{\n  setTimeout(function(){\n    throw new Error(\"you can't catch me!\");\n  }, 1000);\n}\ncatch(e){\n  console.log(\"Caught one!\");\n  console.log(e);\n}\n// Here is actually exception was thrown.\n```\n\nLuckily, there is a new feature called Promise which can save you from this mess.\n\n# Promise\nPromise is ES6's feature. With this, you can simplify complicated callbacks into human readable one:\n\n```js\n// if request returns Promises\nrequest(\"http://www.example.com/api/data\")\n.then((result) => {\n  return result.status === \"OK\" ? request(\"http://www.example.com/api/data2\") : throw new Error(\"Something went wrong while requesting data 2\");\n})\n.then((result) => {\n  return result.status === \"OK\" ? request(\"http://www.example.com/api/data3\") : throw new Error(\"Something went wrong while requesting data 3\");\n});\n```\n\nThis is much easier to read, right? Did I just mention about exception?\n\n```js\nnew Promise((resolve, reject) => {\n  let result = doSomething();\n  if(result){\n    resolve(result);\n  }\n  else {\n    reject(result.reason);\n  }\n})\n.then((result) => {\n  console.log(\"Succeed: \" + result);\n})\ncathc((reason) => {\n  console.log(\"Oops, something went wrong: \" + reason);\n});\n```\n\nIn this way you can solve async problem elegantly.\n\nUsing Babel like me? Insert `require(\"babel/polyfill\")` at the head of your code to enable this goodie.\n\nIf in your environment ES6 is not allowed, don't be sad, there are tons of libraries implementing this awesome feature!\n\n* [Bluebird](http://bluebirdjs.com/docs/getting-started.html)\n* [jQuery - Deferred](https://api.jquery.com/category/deferred-object/)\n* [Q](http://documentup.com/kriskowal/q/)\n* [when](https://github.com/cujojs/when/blob/master/docs/api.md)\n* ...I only named a few, google `js promise lib` for more!\n\n# Async/Await\nWhat if you could write async code like it was sync? ES7 provides a new feature called `async/await`. By combining it with promise, you can write async code in sync style!\n\n```js\nIamAsync();\n\nconsole.log(\"Hello\");\n\nasync function IamAsync(){\n  let result = await new Promise((resolve, reject) => { setTimeout(resolve, 3000, \"World!\"); });\n  return result;\n}\n\n// output:\n// Hello\n// (wait for 3 seconds...)\n// World!\n```\n\nCurrently `async/await` is only available in Babel by running with `babel source.js -o compiled.js --stage 0` and beware that it is still in experiment, everything is subject to change.\n\n\n# References & Resources\n* [How to articulate the difference between asynchronous and parallel programming?](http://stackoverflow.com/questions/6133574/how-to-articulate-the-difference-between-asynchronous-and-parallel-programming)\n* [What is the difference between concurrency, parallelism and asynchronous methods?](http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods)\n* [How does a single thread handle asynchronous code in JavaScript?](https://www.quora.com/How-does-a-single-thread-handle-asynchronous-code-in-JavaScript)\n* [Get the door, Javes! Understanding Sync & Async in JavaScript](https://www.discovermeteor.com/blog/understanding-sync-async-javascript-node/)\n* [Philip Roberts: What the heck is the event loop anyway? JSConf EU 2014](https://www.youtube.com/watch?v=8aGhZQkoFbQ)\n* [Promises for asynchronous programming](http://exploringjs.com/es6/ch_promises.html)\n* [A Primer on ES7 Async Functions](https://code.tutsplus.com/tutorials/a-primer-on-es7-async-functions--cms-22367)\n* [ES7 Async/Await](http://rossboucher.com/await/#/)\n* [The Evolution of Asynchronous JavaScript](https://blog.risingstack.com/asynchronous-javascript/)\n* [2. What is Node.js?](http://book.mixu.net/node/ch2.html)\n* [Is javascript guaranteed to be single-threaded?](http://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded)\n* [How does a single thread handle asynchronous code in JavaScript?](https://www.quora.com/How-does-a-single-thread-handle-asynchronous-code-in-JavaScript)\n","slug":"2015-10-26-asynchronous-programming-in-javascript","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol86000jvfvgepyv1iqb","comments":1,"photos":[],"link":"","content":"<h1 id=\"Purpose\"><a href=\"#Purpose\" class=\"headerlink\" title=\"Purpose\"></a>Purpose</h1><p>Just a learning note here. There are already tons of glorious posts talking about this topic, so don’t expect to see something super edge, extreme frontier technology here.</p>\n<h1 id=\"What-is-asynchronous\"><a href=\"#What-is-asynchronous\" class=\"headerlink\" title=\"What is asynchronous?\"></a>What is asynchronous?</h1><p>Before moving on, knowing what exactly is Asynchronous is essential.</p>\n<p>Synchronous, contrary to Asynchronous, means blocking. That means computer can only run a task at one time. Before finishing this one, another will not start.</p>\n<p>When we mention about Asynchronous, we are referring to non-blocking, which means, computer runs a tasks without “blocking” other tasks.</p>\n<p>And don’t confuse Asynchronous with words Concurrency or Parallel, they are different things.</p>\n<p>Parallel usually refers to true multi-tasking, which means computer distributes several tasks among processors. In this way, tasks are executed in real simultaneously.</p>\n<p>Concurrent is a concept of having a group of tasks sharing an execution thread with each other to let them run simultaneously. Asynchronous and Synchronous are just descriptions of state between tasks.</p>\n<h1 id=\"How-does-it-work-in-JavaScript\"><a href=\"#How-does-it-work-in-JavaScript\" class=\"headerlink\" title=\"How does it work in JavaScript?\"></a>How does it work in JavaScript?</h1><p>JavaScript is an event-driven language and it uses an event-loop to get codes run in asynchronous. JavaScript is also called single-threaded language because it can only run a piece of code at a time.</p>\n<p>So, does that mean JavaScript is really a single-threaded language? Hmm, not accurate. No matter what platform JavaScript is on, either client side(browsers) or server side(Node.js), there is actually a thread pool underneath it.</p>\n<p>After digging here and there on the web, I realized to explicitly explain how does it work is a huge thing, and it really hurts your head. For the sake of simplicity, here is my simple version:</p>\n<p>JavaScript on both client and server side use one thread for code execution, another one for taking care of event loop, and all of others for handling events and triggering handlers. Whenever interpreter runs into async code like <code>button.click()</code>(UI events) or <code>fs.readFile()</code> (I&#x2F;O events), it pushes callbacks into an event queue, and after all things in main function are done, it pops callbacks in queue to get these executed.</p>\n<p>And…that’s it. :P</p>\n<p>To get more illustration, visit <a href=\"http://latentflip.com/loupe/\">this awesome site</a>. The website visualizes how event loop works in JavaScript in a very clear manner, and if it still can’t satisfy you, scroll down to References &amp; Resources for further reading.</p>\n<h1 id=\"Callback\"><a href=\"#Callback\" class=\"headerlink\" title=\"Callback\"></a>Callback</h1><p>So, how do we take advantage of async? Well, the answer is pretty simple:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Wolrd!&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>When you set an callback on an event, you are using async. Another common practice is using ajax:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://www.example.com&quot;</span>);</span><br><span class=\"line\">ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ajax.<span class=\"property\">state</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ajax.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ajax.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Callback really fulfills our need for async, but when our program grows larger, our callback logic may become complicated as well, which results in some nasty and hard-to-maintained code.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data1&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">result, status</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(status === <span class=\"string\">&quot;OK&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data2&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">result, status</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(status === <span class=\"string\">&quot;OK&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data3&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">result, status</span>)&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>What worse than callback hell is that you can’t even catch exceptions which was thrown in callback. This will lead our program unpredictable.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;you can&#x27;t catch me!&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Caught one!&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Here is actually exception was thrown.</span></span><br></pre></td></tr></table></figure>\n\n<p>Luckily, there is a new feature called Promise which can save you from this mess.</p>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><p>Promise is ES6’s feature. With this, you can simplify complicated callbacks into human readable one:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// if request returns Promises</span></span><br><span class=\"line\"><span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data&quot;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"property\">status</span> === <span class=\"string\">&quot;OK&quot;</span> ? <span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data2&quot;</span>) : <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Something went wrong while requesting data 2&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"property\">status</span> === <span class=\"string\">&quot;OK&quot;</span> ? <span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data3&quot;</span>) : <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Something went wrong while requesting data 3&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This is much easier to read, right? Did I just mention about exception?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(result)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(result.<span class=\"property\">reason</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Succeed: &quot;</span> + result);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">cathc</span>(<span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Oops, something went wrong: &quot;</span> + reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>In this way you can solve async problem elegantly.</p>\n<p>Using Babel like me? Insert <code>require(&quot;babel/polyfill&quot;)</code> at the head of your code to enable this goodie.</p>\n<p>If in your environment ES6 is not allowed, don’t be sad, there are tons of libraries implementing this awesome feature!</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/docs/getting-started.html\">Bluebird</a></li>\n<li><a href=\"https://api.jquery.com/category/deferred-object/\">jQuery - Deferred</a></li>\n<li><a href=\"http://documentup.com/kriskowal/q/\">Q</a></li>\n<li><a href=\"https://github.com/cujojs/when/blob/master/docs/api.md\">when</a></li>\n<li>…I only named a few, google <code>js promise lib</code> for more!</li>\n</ul>\n<h1 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async&#x2F;Await\"></a>Async&#x2F;Await</h1><p>What if you could write async code like it was sync? ES7 provides a new feature called <code>async/await</code>. By combining it with promise, you can write async code in sync style!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">IamAsync</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">IamAsync</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">3000</span>, <span class=\"string\">&quot;World!&quot;</span>); &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output:</span></span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br><span class=\"line\"><span class=\"comment\">// (wait for 3 seconds...)</span></span><br><span class=\"line\"><span class=\"comment\">// World!</span></span><br></pre></td></tr></table></figure>\n\n<p>Currently <code>async/await</code> is only available in Babel by running with <code>babel source.js -o compiled.js --stage 0</code> and beware that it is still in experiment, everything is subject to change.</p>\n<h1 id=\"References-Resources\"><a href=\"#References-Resources\" class=\"headerlink\" title=\"References &amp; Resources\"></a>References &amp; Resources</h1><ul>\n<li><a href=\"http://stackoverflow.com/questions/6133574/how-to-articulate-the-difference-between-asynchronous-and-parallel-programming\">How to articulate the difference between asynchronous and parallel programming?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods\">What is the difference between concurrency, parallelism and asynchronous methods?</a></li>\n<li><a href=\"https://www.quora.com/How-does-a-single-thread-handle-asynchronous-code-in-JavaScript\">How does a single thread handle asynchronous code in JavaScript?</a></li>\n<li><a href=\"https://www.discovermeteor.com/blog/understanding-sync-async-javascript-node/\">Get the door, Javes! Understanding Sync &amp; Async in JavaScript</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">Philip Roberts: What the heck is the event loop anyway? JSConf EU 2014</a></li>\n<li><a href=\"http://exploringjs.com/es6/ch_promises.html\">Promises for asynchronous programming</a></li>\n<li><a href=\"https://code.tutsplus.com/tutorials/a-primer-on-es7-async-functions--cms-22367\">A Primer on ES7 Async Functions</a></li>\n<li><a href=\"http://rossboucher.com/await/#/\">ES7 Async&#x2F;Await</a></li>\n<li><a href=\"https://blog.risingstack.com/asynchronous-javascript/\">The Evolution of Asynchronous JavaScript</a></li>\n<li><a href=\"http://book.mixu.net/node/ch2.html\">2. What is Node.js?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded\">Is javascript guaranteed to be single-threaded?</a></li>\n<li><a href=\"https://www.quora.com/How-does-a-single-thread-handle-asynchronous-code-in-JavaScript\">How does a single thread handle asynchronous code in JavaScript?</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Purpose\"><a href=\"#Purpose\" class=\"headerlink\" title=\"Purpose\"></a>Purpose</h1><p>Just a learning note here. There are already tons of glorious posts talking about this topic, so don’t expect to see something super edge, extreme frontier technology here.</p>\n<h1 id=\"What-is-asynchronous\"><a href=\"#What-is-asynchronous\" class=\"headerlink\" title=\"What is asynchronous?\"></a>What is asynchronous?</h1><p>Before moving on, knowing what exactly is Asynchronous is essential.</p>\n<p>Synchronous, contrary to Asynchronous, means blocking. That means computer can only run a task at one time. Before finishing this one, another will not start.</p>\n<p>When we mention about Asynchronous, we are referring to non-blocking, which means, computer runs a tasks without “blocking” other tasks.</p>\n<p>And don’t confuse Asynchronous with words Concurrency or Parallel, they are different things.</p>\n<p>Parallel usually refers to true multi-tasking, which means computer distributes several tasks among processors. In this way, tasks are executed in real simultaneously.</p>\n<p>Concurrent is a concept of having a group of tasks sharing an execution thread with each other to let them run simultaneously. Asynchronous and Synchronous are just descriptions of state between tasks.</p>\n<h1 id=\"How-does-it-work-in-JavaScript\"><a href=\"#How-does-it-work-in-JavaScript\" class=\"headerlink\" title=\"How does it work in JavaScript?\"></a>How does it work in JavaScript?</h1><p>JavaScript is an event-driven language and it uses an event-loop to get codes run in asynchronous. JavaScript is also called single-threaded language because it can only run a piece of code at a time.</p>\n<p>So, does that mean JavaScript is really a single-threaded language? Hmm, not accurate. No matter what platform JavaScript is on, either client side(browsers) or server side(Node.js), there is actually a thread pool underneath it.</p>\n<p>After digging here and there on the web, I realized to explicitly explain how does it work is a huge thing, and it really hurts your head. For the sake of simplicity, here is my simple version:</p>\n<p>JavaScript on both client and server side use one thread for code execution, another one for taking care of event loop, and all of others for handling events and triggering handlers. Whenever interpreter runs into async code like <code>button.click()</code>(UI events) or <code>fs.readFile()</code> (I&#x2F;O events), it pushes callbacks into an event queue, and after all things in main function are done, it pops callbacks in queue to get these executed.</p>\n<p>And…that’s it. :P</p>\n<p>To get more illustration, visit <a href=\"http://latentflip.com/loupe/\">this awesome site</a>. The website visualizes how event loop works in JavaScript in a very clear manner, and if it still can’t satisfy you, scroll down to References &amp; Resources for further reading.</p>\n<h1 id=\"Callback\"><a href=\"#Callback\" class=\"headerlink\" title=\"Callback\"></a>Callback</h1><p>So, how do we take advantage of async? Well, the answer is pretty simple:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Wolrd!&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>When you set an callback on an event, you are using async. Another common practice is using ajax:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://www.example.com&quot;</span>);</span><br><span class=\"line\">ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ajax.<span class=\"property\">state</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ajax.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ajax.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>Callback really fulfills our need for async, but when our program grows larger, our callback logic may become complicated as well, which results in some nasty and hard-to-maintained code.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data1&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">result, status</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(status === <span class=\"string\">&quot;OK&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data2&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">result, status</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(status === <span class=\"string\">&quot;OK&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data3&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">result, status</span>)&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>What worse than callback hell is that you can’t even catch exceptions which was thrown in callback. This will lead our program unpredictable.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;you can&#x27;t catch me!&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Caught one!&quot;</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Here is actually exception was thrown.</span></span><br></pre></td></tr></table></figure>\n\n<p>Luckily, there is a new feature called Promise which can save you from this mess.</p>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><p>Promise is ES6’s feature. With this, you can simplify complicated callbacks into human readable one:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// if request returns Promises</span></span><br><span class=\"line\"><span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data&quot;</span>)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"property\">status</span> === <span class=\"string\">&quot;OK&quot;</span> ? <span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data2&quot;</span>) : <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Something went wrong while requesting data 2&quot;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result.<span class=\"property\">status</span> === <span class=\"string\">&quot;OK&quot;</span> ? <span class=\"title function_\">request</span>(<span class=\"string\">&quot;http://www.example.com/api/data3&quot;</span>) : <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Something went wrong while requesting data 3&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>This is much easier to read, right? Did I just mention about exception?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(result)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(result);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">reject</span>(result.<span class=\"property\">reason</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Succeed: &quot;</span> + result);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">cathc</span>(<span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Oops, something went wrong: &quot;</span> + reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>In this way you can solve async problem elegantly.</p>\n<p>Using Babel like me? Insert <code>require(&quot;babel/polyfill&quot;)</code> at the head of your code to enable this goodie.</p>\n<p>If in your environment ES6 is not allowed, don’t be sad, there are tons of libraries implementing this awesome feature!</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/docs/getting-started.html\">Bluebird</a></li>\n<li><a href=\"https://api.jquery.com/category/deferred-object/\">jQuery - Deferred</a></li>\n<li><a href=\"http://documentup.com/kriskowal/q/\">Q</a></li>\n<li><a href=\"https://github.com/cujojs/when/blob/master/docs/api.md\">when</a></li>\n<li>…I only named a few, google <code>js promise lib</code> for more!</li>\n</ul>\n<h1 id=\"Async-Await\"><a href=\"#Async-Await\" class=\"headerlink\" title=\"Async&#x2F;Await\"></a>Async&#x2F;Await</h1><p>What if you could write async code like it was sync? ES7 provides a new feature called <code>async/await</code>. By combining it with promise, you can write async code in sync style!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">IamAsync</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">IamAsync</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">3000</span>, <span class=\"string\">&quot;World!&quot;</span>); &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output:</span></span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br><span class=\"line\"><span class=\"comment\">// (wait for 3 seconds...)</span></span><br><span class=\"line\"><span class=\"comment\">// World!</span></span><br></pre></td></tr></table></figure>\n\n<p>Currently <code>async/await</code> is only available in Babel by running with <code>babel source.js -o compiled.js --stage 0</code> and beware that it is still in experiment, everything is subject to change.</p>\n<h1 id=\"References-Resources\"><a href=\"#References-Resources\" class=\"headerlink\" title=\"References &amp; Resources\"></a>References &amp; Resources</h1><ul>\n<li><a href=\"http://stackoverflow.com/questions/6133574/how-to-articulate-the-difference-between-asynchronous-and-parallel-programming\">How to articulate the difference between asynchronous and parallel programming?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods\">What is the difference between concurrency, parallelism and asynchronous methods?</a></li>\n<li><a href=\"https://www.quora.com/How-does-a-single-thread-handle-asynchronous-code-in-JavaScript\">How does a single thread handle asynchronous code in JavaScript?</a></li>\n<li><a href=\"https://www.discovermeteor.com/blog/understanding-sync-async-javascript-node/\">Get the door, Javes! Understanding Sync &amp; Async in JavaScript</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8aGhZQkoFbQ\">Philip Roberts: What the heck is the event loop anyway? JSConf EU 2014</a></li>\n<li><a href=\"http://exploringjs.com/es6/ch_promises.html\">Promises for asynchronous programming</a></li>\n<li><a href=\"https://code.tutsplus.com/tutorials/a-primer-on-es7-async-functions--cms-22367\">A Primer on ES7 Async Functions</a></li>\n<li><a href=\"http://rossboucher.com/await/#/\">ES7 Async&#x2F;Await</a></li>\n<li><a href=\"https://blog.risingstack.com/asynchronous-javascript/\">The Evolution of Asynchronous JavaScript</a></li>\n<li><a href=\"http://book.mixu.net/node/ch2.html\">2. What is Node.js?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded\">Is javascript guaranteed to be single-threaded?</a></li>\n<li><a href=\"https://www.quora.com/How-does-a-single-thread-handle-asynchronous-code-in-JavaScript\">How does a single thread handle asynchronous code in JavaScript?</a></li>\n</ul>\n"},{"layout":"post","title":"Frontend Fundamental - Communication Techniques","date":"2015-10-13T17:38:11.000Z","_content":"\nPolling, long-polling, websocket and blah blah blah, these tech buzz words have existed for many years, and the shameful thing is, as an frontend engineer(at least I think I am), I can't even explain to someone else what the heck are they clearly, and that's why I come up and write it down.\n\nI will use Nodejs as backend with below demonstrations.\n\n# Polling\nThe most common technique when a client wants to fetch data from server.\n\nClient establishes a connection between server, sends request, server responds and closes this connection.\n\n```js title:\"server.js\"\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nvar index = null;\n\nfs.readFile(\"./index.html\", function(err, file){\n  if(err){\n    throw err;\n  }\n  index = file.toString();\n});\n\nhttp.createServer(function(req, res){\n  if(req.url === \"/\"){\n    res.writeHeader(200, {\n      \"content-type\": \"text/html\"\n    });\n    res.end(index);\n  }\n  else if(req.url === \"/polling\"){\n    res.writeHeader(200, {\n      \"content-type\": \"text/plain\"\n    });\n    res.end(\"polling~\");\n  }\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <script>\n      var text = document.getElementById(\"text\");\n      var ajax = new XMLHttpRequest();\n      ajax.addEventListener(\"readystatechange\", function(){\n        if(ajax.readyState === 4){\n          if(ajax.status === 200){\n            text.appendChild(document.createTextNode(ajax.responseText));\n          }\n        }\n      });\n      ajax.open(\"GET\", \"http://localhost:3000/polling\");\n      ajax.send();\n    </script>\n  </body>\n</html>\n```\n\n![polling](/images/ct/polling.png)\n\n# Long-Polling\nIn some applications like stock market, online games and friends status, you need to get **realtime** data from server. Before Websocket was born, web programmers usually use long-polling ajax technique to simulate realtime data exchange.\n\nThe difference between traditional polling and long-polling is that long-polling sends a request, and **waits** until server responds and closes connection and finally, opens another one. When repeatedly doing this, we call it **keep-alive** connection.\n\nThe Pros are:\n\n* Server side code remains unmodified in most case. Only need to change client side code.\n* Our data updates in a fancy manner, which leads our customers happy, profit!\n\nThe Cons are:\n\n* Opening and closing connections repeatedly means unnecessary bandwidth cost.\n* Client sometimes gets unexpected results because long-polling fires requests regularly on a fixed time, however server might respond in longer or shorter time than what client expected.\n\nLet's add following codes to simulate time of processing.\n```js title:\"server.js\"\n...\nelse if(req.url === \"/polling\"){\n  setTimeout(function(){\n    res.writeHeader(200, {\n      \"content-type\": \"text/plain\"\n    });\n    res.end(\"polling~\");\n  }, 2500);\n}\n...\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <script>\n      var text = document.getElementById(\"text\");\n\n      (function longPolling(){\n        setTimeout(function(){\n          var ajax = new XMLHttpRequest();\n          ajax.addEventListener(\"readystatechange\", function(){\n            if(ajax.readyState === 4){\n              if(ajax.status === 200){\n                text.appendChild(document.createTextNode(ajax.responseText));\n                longPolling();\n              }\n            }\n          });\n          ajax.open(\"GET\", \"http://localhost:3000/polling\");\n          ajax.send();\n        }, 3000);\n      })();\n    </script>\n  </body>\n</html>\n```\n\n![long-polling](/images/ct/long-polling.png)\n\n# Websocket\nLuckily, we don't need to simulate realtime anymore (unless you need to support old browsers) because now we get the **real realtime** technique with Websocket!\n\nWebsocket lets client and server to communicate with each other asynchronously, which means, client and server can send and get data at the same time without waiting for each other (non-blocking).\n\nModern browsers (not you IE8 and IE9!) this day all support native Websocket, but for the cross platform compatibility, many people use 3rd party libraries to get rid of handling compatibility themselves.\n\nIn this example I use `socket.io` as our Websocket helper: `npm install socket.io`\n\n```js title:\"server.js\"\nvar app = require(\"http\").createServer(handler);\nvar io = require(\"socket.io\")(app);\nvar fs = require(\"fs\");\n\napp.listen(3000);\n\nfunction handler(req, res){\n  fs.readFile(__dirname + \"/index.html\", function(err, file){\n    if(err){\n      res.writeHeader(500, {\n        \"content-type\": \"text/plain\"\n      });\n      res.end(filename + \" : not found\");\n    }\n\n    res.writeHeader(200, {\n      \"content-type\": \"text.html\"\n    });\n    res.end(file);\n  });\n}\n\nio.on(\"connection\", function(socket){\n  socket.emit(\"server_says\", \"Hello Client\");\n  socket.on(\"client_says\", function(data){\n    console.log(data);\n  });\n});\n\nconsole.log(\"server is running...\");\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n    <script src=\"https://cdn.socket.io/socket.io-1.3.7.js\"></script>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">Hello Server!</button>\n    <script>\n      var text = document.getElementById(\"text\");\n      var button = document.getElementById(\"button\");\n      var socket = io(\"http://localhost:3000\");\n      socket.on(\"server_says\", function(data){\n        text.appendChild(document.createTextNode(data));\n      });\n\n      button.addEventListener(\"click\", function(e){\n        socket.emit(\"client_says\", \"Hello Server!\");\n      });\n    </script>\n  </body>\n</html>\n```\n\nAs you can see in Chrome developer's network tool, websocket helps us maintain a persistent connection.\n![websocket client](/images/ct/websocket-client.png)\n\n![websocket server](/images/ct/websocket-server.png)\n\n# WebRTC\nUnlike Websocket's client-to-server structure, Web Real-Time Communication is peer-to-peer structure which allows browsers to exchange data like video, audio with each other directly. Browser-to-browser, in this fashion, data exchange is more efficient.\n\nSo, regarding the tag of \"browser-to-browser\", that means we don't need a server, right? Sadly, you do, but server here merely acts as a connector, not a proxy, as a result, data won't be passed through server.\n\nWebRTC currently is not being widely supported by all browsers. See [here](http://caniuse.com/#feat=rtcpeerconnection).\n\nHere I use [peerjs](http://peerjs.com/) as 3rd party helper to overcome cross browser compatibility.\n\n`npm install peer` for our server.\n\n`npm install peerjs` for client side, but here I use direct link instead:\n\n`<script src=\"http://cdn.rawgit.com/peers/peerjs/master/dist/peer.js\"></script>`\n\n```js title:\"server.js\"\nvar PeerServer = require('peer').PeerServer;\nvar server = PeerServer({port: 3000, path: \"/\"});\n\nconsole.log(\"server is running...\");\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n    <script src=\"http://cdn.rawgit.com/peers/peerjs/master/dist/peer.js\"></script>\n  </head>\n  <body>\n    <div id=\"output\"></div>\n    <script>\n      var output = document.getElementById(\"output\");\n      var peer1 = new Peer(\"Mike\", {host: \"localhost\", port: 3000, path: \"/\"});\n      var peer2 = new Peer(\"Bob\", {host: \"localhost\", port: 3000, path: \"/\"});\n\n      peer1.on(\"open\", function(){\n        appendMessage(peer1.id + \" is ready to connect with others.\");\n      });\n\n      peer1.on(\"connection\", function(c){\n        c.on(\"open\", function(){\n          c.send(\"Hello \" + c.peer);\n        });\n        c.on(\"data\", function(data){\n          appendMessage(data);\n        });\n      });\n\n      var c = peer2.connect(peer1.id);\n      c.on(\"data\", function(data){\n        appendMessage(data);\n      });\n\n      setTimeout(function(){\n        c.send(\"Hello \" + c.peer);\n      }, 1000);\n\n      function appendMessage(message){\n        var p = document.createElement(\"p\");\n        p.appendChild(document.createTextNode(message));\n        output.appendChild(p);\n      }\n    </script>\n  </body>\n</html>\n```\n\n![webRTC result](/images/ct/webrtc-result.png)\n\n# Server Push\nUnlike Websocket which opens a duplex connection for client and server, server push (aka server sent) only opens a unidirectional connection for client and server. Server, as an message sender, only push message to client. Client, as a message receiver, only accepts message from server.\n\nSince there is a Websocket for duplex connection, why would someone only want one-way connection? In come scenarios like news feeds or friends notifications, client requests only once for page, and waits for following responses from server.\n\n```js title:\"server.js\"\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nhttp.createServer(function(req, res){\n  if(req.headers.accept === \"text/event-stream\"){\n    if(req.url === \"/events\"){\n      res.writeHeader(200, {\n        \"content-type\": \"text/event-stream\"\n      });\n      setInterval(function(){\n        res.write(\"data: Hello Server Push!\\n\\n\");\n      }, 2000);\n    }\n  }\n  else {\n    res.writeHeader(200, { \"content-type\": \"text/html\"});\n    res.write(fs.readFileSync(__dirname + \"/index.html\"));\n    res.end();\n  }\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n  </head>\n  <body>\n    <div id=\"output\"></div>\n    <script>\n      var output = document.getElementById(\"output\");\n      var es = new EventSource(\"/events\");\n\n      es.addEventListener(\"message\", function(e){\n        appendMessage(e.data);\n      });\n\n      function appendMessage(message){\n        var p = document.createElement(\"p\");\n        p.appendChild(document.createTextNode(message));\n        output.appendChild(p);\n      }\n    </script>\n  </body>\n</html>\n```\n\n![server push](/images/ct/server-push.png)\n\n# References\n\n* [stackoverflow: websocket vs long-polling vs webrtc vs server sent events](http://stackoverflow.com/questions/10028770/html5-websocket-vs-long-polling-vs-ajax-vs-webrtc-vs-server-sent-events)\n* [simple long-polling with javascript and jquery](http://techoctave.com/c7/posts/60-simple-long-polling-example-with-javascript-and-jquery/)\n* [stackoverflow: what are websockets, sse and comet?](http://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet?lq=1)\n* [finding the right nodejs websocket implementation](https://medium.com/@denizozger/finding-the-right-node-js-websocket-implementation-b63bfca0539)\n* [MDN: writing websocket client applications](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications)\n* [webRTC on wikipedia](https://en.wikipedia.org/wiki/WebRTC)\n* [what is webrtc and how does it work](http://www.innoarchitech.com/what-is-webrtc-and-how-does-it-work/)\n* [peejs.com](http://peerjs.com/)\n* [Stream Updates with SSE](http://www.html5rocks.com/en/tutorials/eventsource/basics/?redirect_from_locale=tw)\n","source":"_posts/2015-10-13-frontend-fundamental-communication-techniques.markdown","raw":"---\nlayout: post\ntitle: \"Frontend Fundamental - Communication Techniques\"\ndate: 2015-10-13T18:38:11+08:00\ntags: [websocket, web, network]\n---\n\nPolling, long-polling, websocket and blah blah blah, these tech buzz words have existed for many years, and the shameful thing is, as an frontend engineer(at least I think I am), I can't even explain to someone else what the heck are they clearly, and that's why I come up and write it down.\n\nI will use Nodejs as backend with below demonstrations.\n\n# Polling\nThe most common technique when a client wants to fetch data from server.\n\nClient establishes a connection between server, sends request, server responds and closes this connection.\n\n```js title:\"server.js\"\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nvar index = null;\n\nfs.readFile(\"./index.html\", function(err, file){\n  if(err){\n    throw err;\n  }\n  index = file.toString();\n});\n\nhttp.createServer(function(req, res){\n  if(req.url === \"/\"){\n    res.writeHeader(200, {\n      \"content-type\": \"text/html\"\n    });\n    res.end(index);\n  }\n  else if(req.url === \"/polling\"){\n    res.writeHeader(200, {\n      \"content-type\": \"text/plain\"\n    });\n    res.end(\"polling~\");\n  }\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <script>\n      var text = document.getElementById(\"text\");\n      var ajax = new XMLHttpRequest();\n      ajax.addEventListener(\"readystatechange\", function(){\n        if(ajax.readyState === 4){\n          if(ajax.status === 200){\n            text.appendChild(document.createTextNode(ajax.responseText));\n          }\n        }\n      });\n      ajax.open(\"GET\", \"http://localhost:3000/polling\");\n      ajax.send();\n    </script>\n  </body>\n</html>\n```\n\n![polling](/images/ct/polling.png)\n\n# Long-Polling\nIn some applications like stock market, online games and friends status, you need to get **realtime** data from server. Before Websocket was born, web programmers usually use long-polling ajax technique to simulate realtime data exchange.\n\nThe difference between traditional polling and long-polling is that long-polling sends a request, and **waits** until server responds and closes connection and finally, opens another one. When repeatedly doing this, we call it **keep-alive** connection.\n\nThe Pros are:\n\n* Server side code remains unmodified in most case. Only need to change client side code.\n* Our data updates in a fancy manner, which leads our customers happy, profit!\n\nThe Cons are:\n\n* Opening and closing connections repeatedly means unnecessary bandwidth cost.\n* Client sometimes gets unexpected results because long-polling fires requests regularly on a fixed time, however server might respond in longer or shorter time than what client expected.\n\nLet's add following codes to simulate time of processing.\n```js title:\"server.js\"\n...\nelse if(req.url === \"/polling\"){\n  setTimeout(function(){\n    res.writeHeader(200, {\n      \"content-type\": \"text/plain\"\n    });\n    res.end(\"polling~\");\n  }, 2500);\n}\n...\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <script>\n      var text = document.getElementById(\"text\");\n\n      (function longPolling(){\n        setTimeout(function(){\n          var ajax = new XMLHttpRequest();\n          ajax.addEventListener(\"readystatechange\", function(){\n            if(ajax.readyState === 4){\n              if(ajax.status === 200){\n                text.appendChild(document.createTextNode(ajax.responseText));\n                longPolling();\n              }\n            }\n          });\n          ajax.open(\"GET\", \"http://localhost:3000/polling\");\n          ajax.send();\n        }, 3000);\n      })();\n    </script>\n  </body>\n</html>\n```\n\n![long-polling](/images/ct/long-polling.png)\n\n# Websocket\nLuckily, we don't need to simulate realtime anymore (unless you need to support old browsers) because now we get the **real realtime** technique with Websocket!\n\nWebsocket lets client and server to communicate with each other asynchronously, which means, client and server can send and get data at the same time without waiting for each other (non-blocking).\n\nModern browsers (not you IE8 and IE9!) this day all support native Websocket, but for the cross platform compatibility, many people use 3rd party libraries to get rid of handling compatibility themselves.\n\nIn this example I use `socket.io` as our Websocket helper: `npm install socket.io`\n\n```js title:\"server.js\"\nvar app = require(\"http\").createServer(handler);\nvar io = require(\"socket.io\")(app);\nvar fs = require(\"fs\");\n\napp.listen(3000);\n\nfunction handler(req, res){\n  fs.readFile(__dirname + \"/index.html\", function(err, file){\n    if(err){\n      res.writeHeader(500, {\n        \"content-type\": \"text/plain\"\n      });\n      res.end(filename + \" : not found\");\n    }\n\n    res.writeHeader(200, {\n      \"content-type\": \"text.html\"\n    });\n    res.end(file);\n  });\n}\n\nio.on(\"connection\", function(socket){\n  socket.emit(\"server_says\", \"Hello Client\");\n  socket.on(\"client_says\", function(data){\n    console.log(data);\n  });\n});\n\nconsole.log(\"server is running...\");\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n    <script src=\"https://cdn.socket.io/socket.io-1.3.7.js\"></script>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">Hello Server!</button>\n    <script>\n      var text = document.getElementById(\"text\");\n      var button = document.getElementById(\"button\");\n      var socket = io(\"http://localhost:3000\");\n      socket.on(\"server_says\", function(data){\n        text.appendChild(document.createTextNode(data));\n      });\n\n      button.addEventListener(\"click\", function(e){\n        socket.emit(\"client_says\", \"Hello Server!\");\n      });\n    </script>\n  </body>\n</html>\n```\n\nAs you can see in Chrome developer's network tool, websocket helps us maintain a persistent connection.\n![websocket client](/images/ct/websocket-client.png)\n\n![websocket server](/images/ct/websocket-server.png)\n\n# WebRTC\nUnlike Websocket's client-to-server structure, Web Real-Time Communication is peer-to-peer structure which allows browsers to exchange data like video, audio with each other directly. Browser-to-browser, in this fashion, data exchange is more efficient.\n\nSo, regarding the tag of \"browser-to-browser\", that means we don't need a server, right? Sadly, you do, but server here merely acts as a connector, not a proxy, as a result, data won't be passed through server.\n\nWebRTC currently is not being widely supported by all browsers. See [here](http://caniuse.com/#feat=rtcpeerconnection).\n\nHere I use [peerjs](http://peerjs.com/) as 3rd party helper to overcome cross browser compatibility.\n\n`npm install peer` for our server.\n\n`npm install peerjs` for client side, but here I use direct link instead:\n\n`<script src=\"http://cdn.rawgit.com/peers/peerjs/master/dist/peer.js\"></script>`\n\n```js title:\"server.js\"\nvar PeerServer = require('peer').PeerServer;\nvar server = PeerServer({port: 3000, path: \"/\"});\n\nconsole.log(\"server is running...\");\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n    <script src=\"http://cdn.rawgit.com/peers/peerjs/master/dist/peer.js\"></script>\n  </head>\n  <body>\n    <div id=\"output\"></div>\n    <script>\n      var output = document.getElementById(\"output\");\n      var peer1 = new Peer(\"Mike\", {host: \"localhost\", port: 3000, path: \"/\"});\n      var peer2 = new Peer(\"Bob\", {host: \"localhost\", port: 3000, path: \"/\"});\n\n      peer1.on(\"open\", function(){\n        appendMessage(peer1.id + \" is ready to connect with others.\");\n      });\n\n      peer1.on(\"connection\", function(c){\n        c.on(\"open\", function(){\n          c.send(\"Hello \" + c.peer);\n        });\n        c.on(\"data\", function(data){\n          appendMessage(data);\n        });\n      });\n\n      var c = peer2.connect(peer1.id);\n      c.on(\"data\", function(data){\n        appendMessage(data);\n      });\n\n      setTimeout(function(){\n        c.send(\"Hello \" + c.peer);\n      }, 1000);\n\n      function appendMessage(message){\n        var p = document.createElement(\"p\");\n        p.appendChild(document.createTextNode(message));\n        output.appendChild(p);\n      }\n    </script>\n  </body>\n</html>\n```\n\n![webRTC result](/images/ct/webrtc-result.png)\n\n# Server Push\nUnlike Websocket which opens a duplex connection for client and server, server push (aka server sent) only opens a unidirectional connection for client and server. Server, as an message sender, only push message to client. Client, as a message receiver, only accepts message from server.\n\nSince there is a Websocket for duplex connection, why would someone only want one-way connection? In come scenarios like news feeds or friends notifications, client requests only once for page, and waits for following responses from server.\n\n```js title:\"server.js\"\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nhttp.createServer(function(req, res){\n  if(req.headers.accept === \"text/event-stream\"){\n    if(req.url === \"/events\"){\n      res.writeHeader(200, {\n        \"content-type\": \"text/event-stream\"\n      });\n      setInterval(function(){\n        res.write(\"data: Hello Server Push!\\n\\n\");\n      }, 2000);\n    }\n  }\n  else {\n    res.writeHeader(200, { \"content-type\": \"text/html\"});\n    res.write(fs.readFileSync(__dirname + \"/index.html\"));\n    res.end();\n  }\n}).listen(3000);\n\nconsole.log(\"server is running...\");\n```\n\n```html title:\"index.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index</title>\n  </head>\n  <body>\n    <div id=\"output\"></div>\n    <script>\n      var output = document.getElementById(\"output\");\n      var es = new EventSource(\"/events\");\n\n      es.addEventListener(\"message\", function(e){\n        appendMessage(e.data);\n      });\n\n      function appendMessage(message){\n        var p = document.createElement(\"p\");\n        p.appendChild(document.createTextNode(message));\n        output.appendChild(p);\n      }\n    </script>\n  </body>\n</html>\n```\n\n![server push](/images/ct/server-push.png)\n\n# References\n\n* [stackoverflow: websocket vs long-polling vs webrtc vs server sent events](http://stackoverflow.com/questions/10028770/html5-websocket-vs-long-polling-vs-ajax-vs-webrtc-vs-server-sent-events)\n* [simple long-polling with javascript and jquery](http://techoctave.com/c7/posts/60-simple-long-polling-example-with-javascript-and-jquery/)\n* [stackoverflow: what are websockets, sse and comet?](http://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet?lq=1)\n* [finding the right nodejs websocket implementation](https://medium.com/@denizozger/finding-the-right-node-js-websocket-implementation-b63bfca0539)\n* [MDN: writing websocket client applications](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications)\n* [webRTC on wikipedia](https://en.wikipedia.org/wiki/WebRTC)\n* [what is webrtc and how does it work](http://www.innoarchitech.com/what-is-webrtc-and-how-does-it-work/)\n* [peejs.com](http://peerjs.com/)\n* [Stream Updates with SSE](http://www.html5rocks.com/en/tutorials/eventsource/basics/?redirect_from_locale=tw)\n","slug":"2015-10-13-frontend-fundamental-communication-techniques","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol87000lvfvg7aav8lvw","comments":1,"photos":[],"link":"","content":"<p>Polling, long-polling, websocket and blah blah blah, these tech buzz words have existed for many years, and the shameful thing is, as an frontend engineer(at least I think I am), I can’t even explain to someone else what the heck are they clearly, and that’s why I come up and write it down.</p>\n<p>I will use Nodejs as backend with below demonstrations.</p>\n<h1 id=\"Polling\"><a href=\"#Polling\" class=\"headerlink\" title=\"Polling\"></a>Polling</h1><p>The most common technique when a client wants to fetch data from server.</p>\n<p>Client establishes a connection between server, sends request, server responds and closes this connection.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./index.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  index = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/&quot;</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/polling&quot;</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;polling~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">if</span>(ajax.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(ajax.<span class=\"property\">responseText</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:3000/polling&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ajax.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/ct/polling.png\" alt=\"polling\"></p>\n<h1 id=\"Long-Polling\"><a href=\"#Long-Polling\" class=\"headerlink\" title=\"Long-Polling\"></a>Long-Polling</h1><p>In some applications like stock market, online games and friends status, you need to get <strong>realtime</strong> data from server. Before Websocket was born, web programmers usually use long-polling ajax technique to simulate realtime data exchange.</p>\n<p>The difference between traditional polling and long-polling is that long-polling sends a request, and <strong>waits</strong> until server responds and closes connection and finally, opens another one. When repeatedly doing this, we call it <strong>keep-alive</strong> connection.</p>\n<p>The Pros are:</p>\n<ul>\n<li>Server side code remains unmodified in most case. Only need to change client side code.</li>\n<li>Our data updates in a fancy manner, which leads our customers happy, profit!</li>\n</ul>\n<p>The Cons are:</p>\n<ul>\n<li>Opening and closing connections repeatedly means unnecessary bandwidth cost.</li>\n<li>Client sometimes gets unexpected results because long-polling fires requests regularly on a fixed time, however server might respond in longer or shorter time than what client expected.</li>\n</ul>\n<p>Let’s add following codes to simulate time of processing.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/polling&quot;</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;polling~&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">2500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      (<span class=\"keyword\">function</span> <span class=\"title function_\">longPolling</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">if</span>(ajax.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(ajax.<span class=\"property\">responseText</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">longPolling</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">              &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:3000/polling&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;, <span class=\"number\">3000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/ct/long-polling.png\" alt=\"long-polling\"></p>\n<h1 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h1><p>Luckily, we don’t need to simulate realtime anymore (unless you need to support old browsers) because now we get the <strong>real realtime</strong> technique with Websocket!</p>\n<p>Websocket lets client and server to communicate with each other asynchronously, which means, client and server can send and get data at the same time without waiting for each other (non-blocking).</p>\n<p>Modern browsers (not you IE8 and IE9!) this day all support native Websocket, but for the cross platform compatibility, many people use 3rd party libraries to get rid of handling compatibility themselves.</p>\n<p>In this example I use <code>socket.io</code> as our Websocket helper: <code>npm install socket.io</code></p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>).<span class=\"title function_\">createServer</span>(handler);</span><br><span class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;socket.io&quot;</span>)(app);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handler</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFile</span>(__dirname + <span class=\"string\">&quot;/index.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">500</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(filename + <span class=\"string\">&quot; : not found&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text.html&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(file);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">io.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;connection&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">socket</span>)&#123;</span><br><span class=\"line\">  socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;server_says&quot;</span>, <span class=\"string\">&quot;Hello Client&quot;</span>);</span><br><span class=\"line\">  socket.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;client_says&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.socket.io/socket.io-1.3.7.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>Hello Server!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> socket = <span class=\"title function_\">io</span>(<span class=\"string\">&quot;http://localhost:3000&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      socket.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;server_says&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(data));</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;client_says&quot;</span>, <span class=\"string\">&quot;Hello Server!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>As you can see in Chrome developer’s network tool, websocket helps us maintain a persistent connection.<br><img src=\"/images/ct/websocket-client.png\" alt=\"websocket client\"></p>\n<p><img src=\"/images/ct/websocket-server.png\" alt=\"websocket server\"></p>\n<h1 id=\"WebRTC\"><a href=\"#WebRTC\" class=\"headerlink\" title=\"WebRTC\"></a>WebRTC</h1><p>Unlike Websocket’s client-to-server structure, Web Real-Time Communication is peer-to-peer structure which allows browsers to exchange data like video, audio with each other directly. Browser-to-browser, in this fashion, data exchange is more efficient.</p>\n<p>So, regarding the tag of “browser-to-browser”, that means we don’t need a server, right? Sadly, you do, but server here merely acts as a connector, not a proxy, as a result, data won’t be passed through server.</p>\n<p>WebRTC currently is not being widely supported by all browsers. See <a href=\"http://caniuse.com/#feat=rtcpeerconnection\">here</a>.</p>\n<p>Here I use <a href=\"http://peerjs.com/\">peerjs</a> as 3rd party helper to overcome cross browser compatibility.</p>\n<p><code>npm install peer</code> for our server.</p>\n<p><code>npm install peerjs</code> for client side, but here I use direct link instead:</p>\n<p><code>&lt;script src=&quot;http://cdn.rawgit.com/peers/peerjs/master/dist/peer.js&quot;&gt;&lt;/script&gt;</code></p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">PeerServer</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;peer&#x27;</span>).<span class=\"property\">PeerServer</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"title class_\">PeerServer</span>(&#123;<span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://cdn.rawgit.com/peers/peerjs/master/dist/peer.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;output&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> output = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;output&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> peer1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Peer</span>(<span class=\"string\">&quot;Mike&quot;</span>, &#123;<span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> peer2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Peer</span>(<span class=\"string\">&quot;Bob&quot;</span>, &#123;<span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      peer1.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;open&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">appendMessage</span>(peer1.<span class=\"property\">id</span> + <span class=\"string\">&quot; is ready to connect with others.&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      peer1.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;connection&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">c</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        c.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;open&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          c.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;Hello &quot;</span> + c.<span class=\"property\">peer</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        c.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">appendMessage</span>(data);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> c = peer2.<span class=\"title function_\">connect</span>(peer1.<span class=\"property\">id</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      c.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">appendMessage</span>(data);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        c.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;Hello &quot;</span> + c.<span class=\"property\">peer</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;, <span class=\"number\">1000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">appendMessage</span>(<span class=\"params\">message</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> p = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        p.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(message));</span></span><br><span class=\"line\"><span class=\"language-javascript\">        output.<span class=\"title function_\">appendChild</span>(p);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/ct/webrtc-result.png\" alt=\"webRTC result\"></p>\n<h1 id=\"Server-Push\"><a href=\"#Server-Push\" class=\"headerlink\" title=\"Server Push\"></a>Server Push</h1><p>Unlike Websocket which opens a duplex connection for client and server, server push (aka server sent) only opens a unidirectional connection for client and server. Server, as an message sender, only push message to client. Client, as a message receiver, only accepts message from server.</p>\n<p>Since there is a Websocket for duplex connection, why would someone only want one-way connection? In come scenarios like news feeds or friends notifications, client requests only once for page, and waits for following responses from server.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(req.<span class=\"property\">headers</span>.<span class=\"property\">accept</span> === <span class=\"string\">&quot;text/event-stream&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/events&quot;</span>)&#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/event-stream&quot;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;data: Hello Server Push!\\n\\n&quot;</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>&#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">write</span>(fs.<span class=\"title function_\">readFileSync</span>(__dirname + <span class=\"string\">&quot;/index.html&quot;</span>));</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;output&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> output = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;output&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> es = <span class=\"keyword\">new</span> <span class=\"title class_\">EventSource</span>(<span class=\"string\">&quot;/events&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      es.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">appendMessage</span>(e.<span class=\"property\">data</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">appendMessage</span>(<span class=\"params\">message</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> p = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        p.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(message));</span></span><br><span class=\"line\"><span class=\"language-javascript\">        output.<span class=\"title function_\">appendChild</span>(p);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/ct/server-push.png\" alt=\"server push\"></p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"http://stackoverflow.com/questions/10028770/html5-websocket-vs-long-polling-vs-ajax-vs-webrtc-vs-server-sent-events\">stackoverflow: websocket vs long-polling vs webrtc vs server sent events</a></li>\n<li><a href=\"http://techoctave.com/c7/posts/60-simple-long-polling-example-with-javascript-and-jquery/\">simple long-polling with javascript and jquery</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet?lq=1\">stackoverflow: what are websockets, sse and comet?</a></li>\n<li><a href=\"https://medium.com/@denizozger/finding-the-right-node-js-websocket-implementation-b63bfca0539\">finding the right nodejs websocket implementation</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications\">MDN: writing websocket client applications</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/WebRTC\">webRTC on wikipedia</a></li>\n<li><a href=\"http://www.innoarchitech.com/what-is-webrtc-and-how-does-it-work/\">what is webrtc and how does it work</a></li>\n<li><a href=\"http://peerjs.com/\">peejs.com</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/eventsource/basics/?redirect_from_locale=tw\">Stream Updates with SSE</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Polling, long-polling, websocket and blah blah blah, these tech buzz words have existed for many years, and the shameful thing is, as an frontend engineer(at least I think I am), I can’t even explain to someone else what the heck are they clearly, and that’s why I come up and write it down.</p>\n<p>I will use Nodejs as backend with below demonstrations.</p>\n<h1 id=\"Polling\"><a href=\"#Polling\" class=\"headerlink\" title=\"Polling\"></a>Polling</h1><p>The most common technique when a client wants to fetch data from server.</p>\n<p>Client establishes a connection between server, sends request, server responds and closes this connection.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;./index.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  index = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/&quot;</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/polling&quot;</span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;polling~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">if</span>(ajax.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(ajax.<span class=\"property\">responseText</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:3000/polling&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      ajax.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/ct/polling.png\" alt=\"polling\"></p>\n<h1 id=\"Long-Polling\"><a href=\"#Long-Polling\" class=\"headerlink\" title=\"Long-Polling\"></a>Long-Polling</h1><p>In some applications like stock market, online games and friends status, you need to get <strong>realtime</strong> data from server. Before Websocket was born, web programmers usually use long-polling ajax technique to simulate realtime data exchange.</p>\n<p>The difference between traditional polling and long-polling is that long-polling sends a request, and <strong>waits</strong> until server responds and closes connection and finally, opens another one. When repeatedly doing this, we call it <strong>keep-alive</strong> connection.</p>\n<p>The Pros are:</p>\n<ul>\n<li>Server side code remains unmodified in most case. Only need to change client side code.</li>\n<li>Our data updates in a fancy manner, which leads our customers happy, profit!</li>\n</ul>\n<p>The Cons are:</p>\n<ul>\n<li>Opening and closing connections repeatedly means unnecessary bandwidth cost.</li>\n<li>Client sometimes gets unexpected results because long-polling fires requests regularly on a fixed time, however server might respond in longer or shorter time than what client expected.</li>\n</ul>\n<p>Let’s add following codes to simulate time of processing.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/polling&quot;</span>)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;polling~&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">2500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      (<span class=\"keyword\">function</span> <span class=\"title function_\">longPolling</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">if</span>(ajax.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(ajax.<span class=\"property\">responseText</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">longPolling</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">              &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:3000/polling&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;, <span class=\"number\">3000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/ct/long-polling.png\" alt=\"long-polling\"></p>\n<h1 id=\"Websocket\"><a href=\"#Websocket\" class=\"headerlink\" title=\"Websocket\"></a>Websocket</h1><p>Luckily, we don’t need to simulate realtime anymore (unless you need to support old browsers) because now we get the <strong>real realtime</strong> technique with Websocket!</p>\n<p>Websocket lets client and server to communicate with each other asynchronously, which means, client and server can send and get data at the same time without waiting for each other (non-blocking).</p>\n<p>Modern browsers (not you IE8 and IE9!) this day all support native Websocket, but for the cross platform compatibility, many people use 3rd party libraries to get rid of handling compatibility themselves.</p>\n<p>In this example I use <code>socket.io</code> as our Websocket helper: <code>npm install socket.io</code></p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>).<span class=\"title function_\">createServer</span>(handler);</span><br><span class=\"line\"><span class=\"keyword\">var</span> io = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;socket.io&quot;</span>)(app);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handler</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  fs.<span class=\"title function_\">readFile</span>(__dirname + <span class=\"string\">&quot;/index.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">500</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      res.<span class=\"title function_\">end</span>(filename + <span class=\"string\">&quot; : not found&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text.html&quot;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>(file);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">io.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;connection&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">socket</span>)&#123;</span><br><span class=\"line\">  socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;server_says&quot;</span>, <span class=\"string\">&quot;Hello Client&quot;</span>);</span><br><span class=\"line\">  socket.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;client_says&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.socket.io/socket.io-1.3.7.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>Hello Server!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> socket = <span class=\"title function_\">io</span>(<span class=\"string\">&quot;http://localhost:3000&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      socket.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;server_says&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(data));</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        socket.<span class=\"title function_\">emit</span>(<span class=\"string\">&quot;client_says&quot;</span>, <span class=\"string\">&quot;Hello Server!&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>As you can see in Chrome developer’s network tool, websocket helps us maintain a persistent connection.<br><img src=\"/images/ct/websocket-client.png\" alt=\"websocket client\"></p>\n<p><img src=\"/images/ct/websocket-server.png\" alt=\"websocket server\"></p>\n<h1 id=\"WebRTC\"><a href=\"#WebRTC\" class=\"headerlink\" title=\"WebRTC\"></a>WebRTC</h1><p>Unlike Websocket’s client-to-server structure, Web Real-Time Communication is peer-to-peer structure which allows browsers to exchange data like video, audio with each other directly. Browser-to-browser, in this fashion, data exchange is more efficient.</p>\n<p>So, regarding the tag of “browser-to-browser”, that means we don’t need a server, right? Sadly, you do, but server here merely acts as a connector, not a proxy, as a result, data won’t be passed through server.</p>\n<p>WebRTC currently is not being widely supported by all browsers. See <a href=\"http://caniuse.com/#feat=rtcpeerconnection\">here</a>.</p>\n<p>Here I use <a href=\"http://peerjs.com/\">peerjs</a> as 3rd party helper to overcome cross browser compatibility.</p>\n<p><code>npm install peer</code> for our server.</p>\n<p><code>npm install peerjs</code> for client side, but here I use direct link instead:</p>\n<p><code>&lt;script src=&quot;http://cdn.rawgit.com/peers/peerjs/master/dist/peer.js&quot;&gt;&lt;/script&gt;</code></p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">PeerServer</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;peer&#x27;</span>).<span class=\"property\">PeerServer</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"title class_\">PeerServer</span>(&#123;<span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://cdn.rawgit.com/peers/peerjs/master/dist/peer.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;output&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> output = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;output&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> peer1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Peer</span>(<span class=\"string\">&quot;Mike&quot;</span>, &#123;<span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> peer2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Peer</span>(<span class=\"string\">&quot;Bob&quot;</span>, &#123;<span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"attr\">port</span>: <span class=\"number\">3000</span>, <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>&#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      peer1.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;open&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">appendMessage</span>(peer1.<span class=\"property\">id</span> + <span class=\"string\">&quot; is ready to connect with others.&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      peer1.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;connection&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">c</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        c.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;open&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          c.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;Hello &quot;</span> + c.<span class=\"property\">peer</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        c.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">appendMessage</span>(data);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> c = peer2.<span class=\"title function_\">connect</span>(peer1.<span class=\"property\">id</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      c.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;data&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">appendMessage</span>(data);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        c.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;Hello &quot;</span> + c.<span class=\"property\">peer</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;, <span class=\"number\">1000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">appendMessage</span>(<span class=\"params\">message</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> p = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        p.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(message));</span></span><br><span class=\"line\"><span class=\"language-javascript\">        output.<span class=\"title function_\">appendChild</span>(p);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/ct/webrtc-result.png\" alt=\"webRTC result\"></p>\n<h1 id=\"Server-Push\"><a href=\"#Server-Push\" class=\"headerlink\" title=\"Server Push\"></a>Server Push</h1><p>Unlike Websocket which opens a duplex connection for client and server, server push (aka server sent) only opens a unidirectional connection for client and server. Server, as an message sender, only push message to client. Client, as a message receiver, only accepts message from server.</p>\n<p>Since there is a Websocket for duplex connection, why would someone only want one-way connection? In come scenarios like news feeds or friends notifications, client requests only once for page, and waits for following responses from server.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server.js\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(req.<span class=\"property\">headers</span>.<span class=\"property\">accept</span> === <span class=\"string\">&quot;text/event-stream&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.<span class=\"property\">url</span> === <span class=\"string\">&quot;/events&quot;</span>)&#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/event-stream&quot;</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">write</span>(<span class=\"string\">&quot;data: Hello Server Push!\\n\\n&quot;</span>);</span><br><span class=\"line\">      &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123; <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span>&#125;);</span><br><span class=\"line\">    res.<span class=\"title function_\">write</span>(fs.<span class=\"title function_\">readFileSync</span>(__dirname + <span class=\"string\">&quot;/index.html&quot;</span>));</span><br><span class=\"line\">    res.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;server is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"index.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>index<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;output&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> output = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;output&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> es = <span class=\"keyword\">new</span> <span class=\"title class_\">EventSource</span>(<span class=\"string\">&quot;/events&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      es.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;message&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">appendMessage</span>(e.<span class=\"property\">data</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">appendMessage</span>(<span class=\"params\">message</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> p = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        p.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(message));</span></span><br><span class=\"line\"><span class=\"language-javascript\">        output.<span class=\"title function_\">appendChild</span>(p);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/ct/server-push.png\" alt=\"server push\"></p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"http://stackoverflow.com/questions/10028770/html5-websocket-vs-long-polling-vs-ajax-vs-webrtc-vs-server-sent-events\">stackoverflow: websocket vs long-polling vs webrtc vs server sent events</a></li>\n<li><a href=\"http://techoctave.com/c7/posts/60-simple-long-polling-example-with-javascript-and-jquery/\">simple long-polling with javascript and jquery</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet?lq=1\">stackoverflow: what are websockets, sse and comet?</a></li>\n<li><a href=\"https://medium.com/@denizozger/finding-the-right-node-js-websocket-implementation-b63bfca0539\">finding the right nodejs websocket implementation</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications\">MDN: writing websocket client applications</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/WebRTC\">webRTC on wikipedia</a></li>\n<li><a href=\"http://www.innoarchitech.com/what-is-webrtc-and-how-does-it-work/\">what is webrtc and how does it work</a></li>\n<li><a href=\"http://peerjs.com/\">peejs.com</a></li>\n<li><a href=\"http://www.html5rocks.com/en/tutorials/eventsource/basics/?redirect_from_locale=tw\">Stream Updates with SSE</a></li>\n</ul>\n"},{"layout":"post","title":"Backend Fundamental - Cookie and Session","date":"2015-11-20T22:35:27.000Z","_content":"\n# Yet Another Cookie & Session Explanation?\nCurrently I am working on a website with user account written with Node. I did have some backend experience though, but it was around 2 years ago. Grabbing memories back needs some effort.\n\nTo engrave these concepts into my brain more deeper, I have to write it down, and this time, it will go advance rather than simply explaining \"Cookie is this and Session is that. Done!\"\n\n# Why Use Cookie & Session?\nHTTP is a stateless protocol, which means it forgets anything about information it carried last time. In order to maintain a persistent communication between client and server, cookie and session were invented.\n\n# Cookie\nCookie is a traditional way to save **non-sensitive** user informations in browsers. To sum up the feature of Cookie:\n\n* Cookie is a key-value set.\n* Cookie is sent via HTTP.\n* Cookie is an attribute of HTTP header.\n* Every cookie has its own attributes:\n  * Domain - tells the browser which domain it belongs to. Usually this should be current resource's top domain. If you set it to `.com`, every sub-domain of `.com` like `google.com` will be able to access this cookie.\n  * Path - almost identical to the `domain` attribute, but only relative to current resource's top domain. This tells the browser when to send this cookie on what path.\n  * Expires - tells the browser to delete this cookie on a specified date.\n  * Max-Age - tells the browser to delete this cookie on a specified time relative to now in second.\n  * Secure - can only be sent via HTTPS or not. Make it on for more serious security concern.\n  * HttpOnly - should be allowed to access by JavaScript or not. Normally it's on to prevent from Cross-Site-Script attack.\n* Can only support up to 4096 bytes in size.\n\nWhen I mention about **non-sensitive** informations I mean:\n\n* Session ID - most websites nowadays no longer store \"shopping cart\" or anything user-sensitive in the cookie. Instead, They store an unique ID generated by the server for looking up corresponding user at server side database.\n* Personal Preferences - the background user like, the font size user preferred...etc.\n* Browsing Habits - remember login, the last page user visited, the browsing histories of one user...etc.\n\nThe reason why cookie should never store sensitive data like username, password or credit card number is that cookies are more easily to be intercepted or tampered. Though you can send cookies by **https** or using **signed cookie**(which will be introduced latter) to store hashed data, exposing more informations means lower the cost and difficulty of cracking, and thus the best way is don't even store sensitive data to the cookie.\n\nTypical ways to set cookie in Node:\n\n```js\nvar express = require(\"express\");\n\nvar app = express();\n\napp.get(\"/\", function(req, res, next){\n  var rawCookie = req.get(\"cookie\");\n  var cookie = {count: 1};\n  if(rawCookie){\n    cookie.count = parseInt(rawCookie.split(\"=\")[1]);\n    cookie.count++;\n  }\n  res.append(\"set-cookie\", \"count=\" + cookie.count + \";max-age=5\");\n  res.send(\"count: \" + cookie.count);\n});\n\napp.listen(3000);\n```\n\nThis will increase `count` by one when user visits `localhost:3000` in 5 seconds. If user doesn't visit again in 5 seconds, set count to 1.\n\nAccessing to cookie is such a pain, right? `cookie-parse` to the rescue!\n\n`npm install cookie-parse` and then...\n\n```js\nvar express = require(\"express\");\nvar cookieParser = require(\"cookie-parser\");\n\nvar app = express();\n\napp.use(cookieParser());\n\napp.get(\"/\", function(req, res, next){\n  var count = parseInt(req.cookies.count, 10);\n  count = count ? count + 1 : 1;\n  res.cookie(\"count\", count.toString(), {maxAge: 5000});\n  res.send(\"count: \" + count);\n});\n\napp.listen(3000);\n```\n\nTada! I am sure there are something like `cookie-parser` which exists in other languages.\n\n# Common Variation Of Cookies\n\n#### Session Cookie\nSession cookie is contrary to persistent cookie(or just called it cookie) and only lives when user is still browsing the website. When user closes the browser, the session cookie is deleted by the browser as well.\n\nA common usage of session cookie is storing session ID. Session ID is an unique ID generated by the server and was stored when connection is established. Session ID is used for letting the server know who the current user is in order to look up relative informations in the database.\n\nSetting a session cookie is simple - just leave `expires` and `maxAge` attributes empty.\n\nUse `npm install express-session` for saving time of building another wheel.\n\n```js\nvar express = require(\"express\");\n\nvar app = express();\n\napp.use(require(\"express-session\")({\n  secret: \"i am a secret\",\n  resave: false,\n  saveUninitialized: true\n}));\n\napp.get(\"/\", function(req, res, next){\n  var count = req.session.count;\n  count = count ? count + 1 : 1;\n  req.session.count = count;\n  res.send(\"count: \" + req.session.count);\n});\n\napp.listen(3000);\n```\n\nBy using `express-session`, a cookie named `connect.sid` will be stored with a **hashed value plus a signature aside** in the browser.\n\nAs for session ID security topic I'd recommend [here](http://security.stackexchange.com/questions/92122/why-is-it-insecure-to-store-the-session-id-in-a-cookie-directly) for further reading.\n\n#### Signed Cookie\nIn web development world, you will accidentally bump into a word - **Signed Cookie**. What is it? Basically, a signed cookie stores a value by appending a signature after it. According to frameworks, they claimed that by singing values, server can determine if this value is tampered, however there are some debates on this topic:\n\n* [Why is it insecure to store the session ID in a cookie directly?](http://security.stackexchange.com/questions/92122/why-is-it-insecure-to-store-the-session-id-in-a-cookie-directly)\n* [Why sign the cookie?](https://github.com/expressjs/session/issues/68)\n* [Why doesn't this module store the raw session ID in the cookie directly?](https://github.com/expressjs/session/issues/176)\n* [Signed session cookies. A good idea?](http://stackoverflow.com/questions/3240246/signed-session-cookies-a-good-idea)\n\nI am not an expert at security so can't do any assertion. I will just leave it here.\n\n```js\nvar express = require(\"express\");\nvar cookieParser = require(\"cookie-parser\");\n\nvar app = express();\n\napp.use(cookieParser(\"write down your secret here\"));\n\napp.get(\"/\", function(req, res, next){\n  var count = parseInt(req.signedCookies.count, 10);\n  count = count ? count + 1 : 1;\n  res.cookie(\"count\", count, {signed: true});\n  res.send(\"count: \" + count);\n});\n\napp.listen(3000);\n```\n\nThis is a showcase of how to use signed cookie in Node with express' extension module. Signature changes whenever `count` changes.\n\n# Session\nWe have dealt with storing informations on the client side, so what exactly session is? Well, session is just an description of state that when the connection between client and server is alive, session lives, when connection closes, session ends.\n\nThe main task that session runs is telling the server which one is the current client by giving each client an unique id, it's called session ID. There are several possible places to store the session ID:\n\n#### Memory\nFast, but not practical. Let's assume you have prepared a database for storing the actual data of users, and only store session ID in memory, and use session ID to look up corresponding user informations in database, but in most cases, we expect hundreds of clients to maintain its' session between server, which means these session data will eat up some part of memory, which it's not a smart move, and plus, you will have to deal with data sharing problem like race condition in concurrent environments.\n\n#### Cookie\nA common place to store session ID. Usually used with database where actual user information lays.\n\n#### Database\nWe also generate something corresponding to the session ID for indexing the actual place where user information belongs to and still have to combine forces of memory and cookie to store our session ID, why? Because indexing in database is way more time costly than indexing in memory.\n\nHere I use [Redis](http://redis.io/) to give a quick database showcase. Install package file from Redis to benefit full support.\n\n```js\nvar express = require(\"express\");\nvar session = require(\"express-session\");\nvar db = require(\"redis\").createClient();\n\nvar app = express();\n\ndb.on(\"error\", function(err, reply){\n  console.log(err);\n});\n\ndb.on(\"connect\", function(err, reply){\n  console.log(\"connected to database...\");\n});\n\napp.use(session({\n    secret: \"such secret much safe wow\",\n    resave: false,\n    saveUninitialized: true,\n  }));\n\napp.get(\"/\", function(req, res, next){\n  var count = 1;\n  db.hget([req.session.id, \"count\"], function(err, reply){\n    if(err){console.log(err); return;}\n    if(reply){\n      count = ++reply;\n      db.hset([req.session.id, \"count\", count], logErr);\n    }\n    else{ db.hset([req.session.id, \"count\", count], logErr); }\n    res.send(\"count: \" + count);\n  })\n});\n\nfunction logErr(err, reply){\n  if(err){ console.log(err); }\n}\n\napp.listen(3000);\n```\n\n# Conclusion\nWeb development is all about security. When developers want to take advantages of cookie and session, some principles should be concerned:\n\n* Cookie should not store sensitive data.\n* Set cookie's `secure` attribute on if HTTPS is available.\n* Set cookie's `HttpOnly` attribute on if possible to prevent man-in-the-middle from tampering.\n* Use Signed Cookie technique to have signed values.\n* If you still consider Signed Cookies are not secure enough, deal it like you deal with passwords.\n\n# References\n* [Wikipedia - HTTP Cookie](https://en.wikipedia.org/wiki/HTTP_cookie)\n* [What information is OK to store in cookies?](http://stackoverflow.com/questions/706858/what-information-is-ok-to-store-in-cookies)\n* [What are “signed” cookies in connect/expressjs?](http://stackoverflow.com/questions/11897965/what-are-signed-cookies-in-connect-expressjs)\n* [Signed session cookies. A good idea?](http://stackoverflow.com/questions/3240246/signed-session-cookies-a-good-idea)\n* [cookie 和 session](http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html)\n","source":"_posts/2015-11-20-backend-fundamental-cookie-and-session.markdown","raw":"---\nlayout: post\ntitle: \"Backend Fundamental - Cookie and Session\"\ndate: 2015-11-20T22:35:27+08:00\ntags: [backend, web]\n---\n\n# Yet Another Cookie & Session Explanation?\nCurrently I am working on a website with user account written with Node. I did have some backend experience though, but it was around 2 years ago. Grabbing memories back needs some effort.\n\nTo engrave these concepts into my brain more deeper, I have to write it down, and this time, it will go advance rather than simply explaining \"Cookie is this and Session is that. Done!\"\n\n# Why Use Cookie & Session?\nHTTP is a stateless protocol, which means it forgets anything about information it carried last time. In order to maintain a persistent communication between client and server, cookie and session were invented.\n\n# Cookie\nCookie is a traditional way to save **non-sensitive** user informations in browsers. To sum up the feature of Cookie:\n\n* Cookie is a key-value set.\n* Cookie is sent via HTTP.\n* Cookie is an attribute of HTTP header.\n* Every cookie has its own attributes:\n  * Domain - tells the browser which domain it belongs to. Usually this should be current resource's top domain. If you set it to `.com`, every sub-domain of `.com` like `google.com` will be able to access this cookie.\n  * Path - almost identical to the `domain` attribute, but only relative to current resource's top domain. This tells the browser when to send this cookie on what path.\n  * Expires - tells the browser to delete this cookie on a specified date.\n  * Max-Age - tells the browser to delete this cookie on a specified time relative to now in second.\n  * Secure - can only be sent via HTTPS or not. Make it on for more serious security concern.\n  * HttpOnly - should be allowed to access by JavaScript or not. Normally it's on to prevent from Cross-Site-Script attack.\n* Can only support up to 4096 bytes in size.\n\nWhen I mention about **non-sensitive** informations I mean:\n\n* Session ID - most websites nowadays no longer store \"shopping cart\" or anything user-sensitive in the cookie. Instead, They store an unique ID generated by the server for looking up corresponding user at server side database.\n* Personal Preferences - the background user like, the font size user preferred...etc.\n* Browsing Habits - remember login, the last page user visited, the browsing histories of one user...etc.\n\nThe reason why cookie should never store sensitive data like username, password or credit card number is that cookies are more easily to be intercepted or tampered. Though you can send cookies by **https** or using **signed cookie**(which will be introduced latter) to store hashed data, exposing more informations means lower the cost and difficulty of cracking, and thus the best way is don't even store sensitive data to the cookie.\n\nTypical ways to set cookie in Node:\n\n```js\nvar express = require(\"express\");\n\nvar app = express();\n\napp.get(\"/\", function(req, res, next){\n  var rawCookie = req.get(\"cookie\");\n  var cookie = {count: 1};\n  if(rawCookie){\n    cookie.count = parseInt(rawCookie.split(\"=\")[1]);\n    cookie.count++;\n  }\n  res.append(\"set-cookie\", \"count=\" + cookie.count + \";max-age=5\");\n  res.send(\"count: \" + cookie.count);\n});\n\napp.listen(3000);\n```\n\nThis will increase `count` by one when user visits `localhost:3000` in 5 seconds. If user doesn't visit again in 5 seconds, set count to 1.\n\nAccessing to cookie is such a pain, right? `cookie-parse` to the rescue!\n\n`npm install cookie-parse` and then...\n\n```js\nvar express = require(\"express\");\nvar cookieParser = require(\"cookie-parser\");\n\nvar app = express();\n\napp.use(cookieParser());\n\napp.get(\"/\", function(req, res, next){\n  var count = parseInt(req.cookies.count, 10);\n  count = count ? count + 1 : 1;\n  res.cookie(\"count\", count.toString(), {maxAge: 5000});\n  res.send(\"count: \" + count);\n});\n\napp.listen(3000);\n```\n\nTada! I am sure there are something like `cookie-parser` which exists in other languages.\n\n# Common Variation Of Cookies\n\n#### Session Cookie\nSession cookie is contrary to persistent cookie(or just called it cookie) and only lives when user is still browsing the website. When user closes the browser, the session cookie is deleted by the browser as well.\n\nA common usage of session cookie is storing session ID. Session ID is an unique ID generated by the server and was stored when connection is established. Session ID is used for letting the server know who the current user is in order to look up relative informations in the database.\n\nSetting a session cookie is simple - just leave `expires` and `maxAge` attributes empty.\n\nUse `npm install express-session` for saving time of building another wheel.\n\n```js\nvar express = require(\"express\");\n\nvar app = express();\n\napp.use(require(\"express-session\")({\n  secret: \"i am a secret\",\n  resave: false,\n  saveUninitialized: true\n}));\n\napp.get(\"/\", function(req, res, next){\n  var count = req.session.count;\n  count = count ? count + 1 : 1;\n  req.session.count = count;\n  res.send(\"count: \" + req.session.count);\n});\n\napp.listen(3000);\n```\n\nBy using `express-session`, a cookie named `connect.sid` will be stored with a **hashed value plus a signature aside** in the browser.\n\nAs for session ID security topic I'd recommend [here](http://security.stackexchange.com/questions/92122/why-is-it-insecure-to-store-the-session-id-in-a-cookie-directly) for further reading.\n\n#### Signed Cookie\nIn web development world, you will accidentally bump into a word - **Signed Cookie**. What is it? Basically, a signed cookie stores a value by appending a signature after it. According to frameworks, they claimed that by singing values, server can determine if this value is tampered, however there are some debates on this topic:\n\n* [Why is it insecure to store the session ID in a cookie directly?](http://security.stackexchange.com/questions/92122/why-is-it-insecure-to-store-the-session-id-in-a-cookie-directly)\n* [Why sign the cookie?](https://github.com/expressjs/session/issues/68)\n* [Why doesn't this module store the raw session ID in the cookie directly?](https://github.com/expressjs/session/issues/176)\n* [Signed session cookies. A good idea?](http://stackoverflow.com/questions/3240246/signed-session-cookies-a-good-idea)\n\nI am not an expert at security so can't do any assertion. I will just leave it here.\n\n```js\nvar express = require(\"express\");\nvar cookieParser = require(\"cookie-parser\");\n\nvar app = express();\n\napp.use(cookieParser(\"write down your secret here\"));\n\napp.get(\"/\", function(req, res, next){\n  var count = parseInt(req.signedCookies.count, 10);\n  count = count ? count + 1 : 1;\n  res.cookie(\"count\", count, {signed: true});\n  res.send(\"count: \" + count);\n});\n\napp.listen(3000);\n```\n\nThis is a showcase of how to use signed cookie in Node with express' extension module. Signature changes whenever `count` changes.\n\n# Session\nWe have dealt with storing informations on the client side, so what exactly session is? Well, session is just an description of state that when the connection between client and server is alive, session lives, when connection closes, session ends.\n\nThe main task that session runs is telling the server which one is the current client by giving each client an unique id, it's called session ID. There are several possible places to store the session ID:\n\n#### Memory\nFast, but not practical. Let's assume you have prepared a database for storing the actual data of users, and only store session ID in memory, and use session ID to look up corresponding user informations in database, but in most cases, we expect hundreds of clients to maintain its' session between server, which means these session data will eat up some part of memory, which it's not a smart move, and plus, you will have to deal with data sharing problem like race condition in concurrent environments.\n\n#### Cookie\nA common place to store session ID. Usually used with database where actual user information lays.\n\n#### Database\nWe also generate something corresponding to the session ID for indexing the actual place where user information belongs to and still have to combine forces of memory and cookie to store our session ID, why? Because indexing in database is way more time costly than indexing in memory.\n\nHere I use [Redis](http://redis.io/) to give a quick database showcase. Install package file from Redis to benefit full support.\n\n```js\nvar express = require(\"express\");\nvar session = require(\"express-session\");\nvar db = require(\"redis\").createClient();\n\nvar app = express();\n\ndb.on(\"error\", function(err, reply){\n  console.log(err);\n});\n\ndb.on(\"connect\", function(err, reply){\n  console.log(\"connected to database...\");\n});\n\napp.use(session({\n    secret: \"such secret much safe wow\",\n    resave: false,\n    saveUninitialized: true,\n  }));\n\napp.get(\"/\", function(req, res, next){\n  var count = 1;\n  db.hget([req.session.id, \"count\"], function(err, reply){\n    if(err){console.log(err); return;}\n    if(reply){\n      count = ++reply;\n      db.hset([req.session.id, \"count\", count], logErr);\n    }\n    else{ db.hset([req.session.id, \"count\", count], logErr); }\n    res.send(\"count: \" + count);\n  })\n});\n\nfunction logErr(err, reply){\n  if(err){ console.log(err); }\n}\n\napp.listen(3000);\n```\n\n# Conclusion\nWeb development is all about security. When developers want to take advantages of cookie and session, some principles should be concerned:\n\n* Cookie should not store sensitive data.\n* Set cookie's `secure` attribute on if HTTPS is available.\n* Set cookie's `HttpOnly` attribute on if possible to prevent man-in-the-middle from tampering.\n* Use Signed Cookie technique to have signed values.\n* If you still consider Signed Cookies are not secure enough, deal it like you deal with passwords.\n\n# References\n* [Wikipedia - HTTP Cookie](https://en.wikipedia.org/wiki/HTTP_cookie)\n* [What information is OK to store in cookies?](http://stackoverflow.com/questions/706858/what-information-is-ok-to-store-in-cookies)\n* [What are “signed” cookies in connect/expressjs?](http://stackoverflow.com/questions/11897965/what-are-signed-cookies-in-connect-expressjs)\n* [Signed session cookies. A good idea?](http://stackoverflow.com/questions/3240246/signed-session-cookies-a-good-idea)\n* [cookie 和 session](http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html)\n","slug":"2015-11-20-backend-fundamental-cookie-and-session","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol87000nvfvg3jc8hzah","comments":1,"photos":[],"link":"","content":"<h1 id=\"Yet-Another-Cookie-Session-Explanation\"><a href=\"#Yet-Another-Cookie-Session-Explanation\" class=\"headerlink\" title=\"Yet Another Cookie &amp; Session Explanation?\"></a>Yet Another Cookie &amp; Session Explanation?</h1><p>Currently I am working on a website with user account written with Node. I did have some backend experience though, but it was around 2 years ago. Grabbing memories back needs some effort.</p>\n<p>To engrave these concepts into my brain more deeper, I have to write it down, and this time, it will go advance rather than simply explaining “Cookie is this and Session is that. Done!”</p>\n<h1 id=\"Why-Use-Cookie-Session\"><a href=\"#Why-Use-Cookie-Session\" class=\"headerlink\" title=\"Why Use Cookie &amp; Session?\"></a>Why Use Cookie &amp; Session?</h1><p>HTTP is a stateless protocol, which means it forgets anything about information it carried last time. In order to maintain a persistent communication between client and server, cookie and session were invented.</p>\n<h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><p>Cookie is a traditional way to save <strong>non-sensitive</strong> user informations in browsers. To sum up the feature of Cookie:</p>\n<ul>\n<li>Cookie is a key-value set.</li>\n<li>Cookie is sent via HTTP.</li>\n<li>Cookie is an attribute of HTTP header.</li>\n<li>Every cookie has its own attributes:<ul>\n<li>Domain - tells the browser which domain it belongs to. Usually this should be current resource’s top domain. If you set it to <code>.com</code>, every sub-domain of <code>.com</code> like <code>google.com</code> will be able to access this cookie.</li>\n<li>Path - almost identical to the <code>domain</code> attribute, but only relative to current resource’s top domain. This tells the browser when to send this cookie on what path.</li>\n<li>Expires - tells the browser to delete this cookie on a specified date.</li>\n<li>Max-Age - tells the browser to delete this cookie on a specified time relative to now in second.</li>\n<li>Secure - can only be sent via HTTPS or not. Make it on for more serious security concern.</li>\n<li>HttpOnly - should be allowed to access by JavaScript or not. Normally it’s on to prevent from Cross-Site-Script attack.</li>\n</ul>\n</li>\n<li>Can only support up to 4096 bytes in size.</li>\n</ul>\n<p>When I mention about <strong>non-sensitive</strong> informations I mean:</p>\n<ul>\n<li>Session ID - most websites nowadays no longer store “shopping cart” or anything user-sensitive in the cookie. Instead, They store an unique ID generated by the server for looking up corresponding user at server side database.</li>\n<li>Personal Preferences - the background user like, the font size user preferred…etc.</li>\n<li>Browsing Habits - remember login, the last page user visited, the browsing histories of one user…etc.</li>\n</ul>\n<p>The reason why cookie should never store sensitive data like username, password or credit card number is that cookies are more easily to be intercepted or tampered. Though you can send cookies by <strong>https</strong> or using <strong>signed cookie</strong>(which will be introduced latter) to store hashed data, exposing more informations means lower the cost and difficulty of cracking, and thus the best way is don’t even store sensitive data to the cookie.</p>\n<p>Typical ways to set cookie in Node:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rawCookie = req.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;cookie&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cookie = &#123;<span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(rawCookie)&#123;</span><br><span class=\"line\">    cookie.<span class=\"property\">count</span> = <span class=\"built_in\">parseInt</span>(rawCookie.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    cookie.<span class=\"property\">count</span>++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;set-cookie&quot;</span>, <span class=\"string\">&quot;count=&quot;</span> + cookie.<span class=\"property\">count</span> + <span class=\"string\">&quot;;max-age=5&quot;</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + cookie.<span class=\"property\">count</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>This will increase <code>count</code> by one when user visits <code>localhost:3000</code> in 5 seconds. If user doesn’t visit again in 5 seconds, set count to 1.</p>\n<p>Accessing to cookie is such a pain, right? <code>cookie-parse</code> to the rescue!</p>\n<p><code>npm install cookie-parse</code> and then…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cookie-parser&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">cookieParser</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"built_in\">parseInt</span>(req.<span class=\"property\">cookies</span>.<span class=\"property\">count</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  count = count ? count + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  res.<span class=\"title function_\">cookie</span>(<span class=\"string\">&quot;count&quot;</span>, count.<span class=\"title function_\">toString</span>(), &#123;<span class=\"attr\">maxAge</span>: <span class=\"number\">5000</span>&#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + count);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Tada! I am sure there are something like <code>cookie-parser</code> which exists in other languages.</p>\n<h1 id=\"Common-Variation-Of-Cookies\"><a href=\"#Common-Variation-Of-Cookies\" class=\"headerlink\" title=\"Common Variation Of Cookies\"></a>Common Variation Of Cookies</h1><h4 id=\"Session-Cookie\"><a href=\"#Session-Cookie\" class=\"headerlink\" title=\"Session Cookie\"></a>Session Cookie</h4><p>Session cookie is contrary to persistent cookie(or just called it cookie) and only lives when user is still browsing the website. When user closes the browser, the session cookie is deleted by the browser as well.</p>\n<p>A common usage of session cookie is storing session ID. Session ID is an unique ID generated by the server and was stored when connection is established. Session ID is used for letting the server know who the current user is in order to look up relative informations in the database.</p>\n<p>Setting a session cookie is simple - just leave <code>expires</code> and <code>maxAge</code> attributes empty.</p>\n<p>Use <code>npm install express-session</code> for saving time of building another wheel.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"built_in\">require</span>(<span class=\"string\">&quot;express-session&quot;</span>)(&#123;</span><br><span class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"string\">&quot;i am a secret&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">resave</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = req.<span class=\"property\">session</span>.<span class=\"property\">count</span>;</span><br><span class=\"line\">  count = count ? count + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  req.<span class=\"property\">session</span>.<span class=\"property\">count</span> = count;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + req.<span class=\"property\">session</span>.<span class=\"property\">count</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>By using <code>express-session</code>, a cookie named <code>connect.sid</code> will be stored with a <strong>hashed value plus a signature aside</strong> in the browser.</p>\n<p>As for session ID security topic I’d recommend <a href=\"http://security.stackexchange.com/questions/92122/why-is-it-insecure-to-store-the-session-id-in-a-cookie-directly\">here</a> for further reading.</p>\n<h4 id=\"Signed-Cookie\"><a href=\"#Signed-Cookie\" class=\"headerlink\" title=\"Signed Cookie\"></a>Signed Cookie</h4><p>In web development world, you will accidentally bump into a word - <strong>Signed Cookie</strong>. What is it? Basically, a signed cookie stores a value by appending a signature after it. According to frameworks, they claimed that by singing values, server can determine if this value is tampered, however there are some debates on this topic:</p>\n<ul>\n<li><a href=\"http://security.stackexchange.com/questions/92122/why-is-it-insecure-to-store-the-session-id-in-a-cookie-directly\">Why is it insecure to store the session ID in a cookie directly?</a></li>\n<li><a href=\"https://github.com/expressjs/session/issues/68\">Why sign the cookie?</a></li>\n<li><a href=\"https://github.com/expressjs/session/issues/176\">Why doesn’t this module store the raw session ID in the cookie directly?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3240246/signed-session-cookies-a-good-idea\">Signed session cookies. A good idea?</a></li>\n</ul>\n<p>I am not an expert at security so can’t do any assertion. I will just leave it here.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cookie-parser&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">cookieParser</span>(<span class=\"string\">&quot;write down your secret here&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"built_in\">parseInt</span>(req.<span class=\"property\">signedCookies</span>.<span class=\"property\">count</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  count = count ? count + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  res.<span class=\"title function_\">cookie</span>(<span class=\"string\">&quot;count&quot;</span>, count, &#123;<span class=\"attr\">signed</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + count);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>This is a showcase of how to use signed cookie in Node with express’ extension module. Signature changes whenever <code>count</code> changes.</p>\n<h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h1><p>We have dealt with storing informations on the client side, so what exactly session is? Well, session is just an description of state that when the connection between client and server is alive, session lives, when connection closes, session ends.</p>\n<p>The main task that session runs is telling the server which one is the current client by giving each client an unique id, it’s called session ID. There are several possible places to store the session ID:</p>\n<h4 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h4><p>Fast, but not practical. Let’s assume you have prepared a database for storing the actual data of users, and only store session ID in memory, and use session ID to look up corresponding user informations in database, but in most cases, we expect hundreds of clients to maintain its’ session between server, which means these session data will eat up some part of memory, which it’s not a smart move, and plus, you will have to deal with data sharing problem like race condition in concurrent environments.</p>\n<h4 id=\"Cookie-1\"><a href=\"#Cookie-1\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>A common place to store session ID. Usually used with database where actual user information lays.</p>\n<h4 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h4><p>We also generate something corresponding to the session ID for indexing the actual place where user information belongs to and still have to combine forces of memory and cookie to store our session ID, why? Because indexing in database is way more time costly than indexing in memory.</p>\n<p>Here I use <a href=\"http://redis.io/\">Redis</a> to give a quick database showcase. Install package file from Redis to benefit full support.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express-session&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;redis&quot;</span>).<span class=\"title function_\">createClient</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;connect&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;connected to database...&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">session</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: <span class=\"string\">&quot;such secret much safe wow&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">resave</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  db.<span class=\"title function_\">hget</span>([req.<span class=\"property\">session</span>.<span class=\"property\">id</span>, <span class=\"string\">&quot;count&quot;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err); <span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reply)&#123;</span><br><span class=\"line\">      count = ++reply;</span><br><span class=\"line\">      db.<span class=\"title function_\">hset</span>([req.<span class=\"property\">session</span>.<span class=\"property\">id</span>, <span class=\"string\">&quot;count&quot;</span>, count], logErr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123; db.<span class=\"title function_\">hset</span>([req.<span class=\"property\">session</span>.<span class=\"property\">id</span>, <span class=\"string\">&quot;count&quot;</span>, count], logErr); &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + count);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logErr</span>(<span class=\"params\">err, reply</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Web development is all about security. When developers want to take advantages of cookie and session, some principles should be concerned:</p>\n<ul>\n<li>Cookie should not store sensitive data.</li>\n<li>Set cookie’s <code>secure</code> attribute on if HTTPS is available.</li>\n<li>Set cookie’s <code>HttpOnly</code> attribute on if possible to prevent man-in-the-middle from tampering.</li>\n<li>Use Signed Cookie technique to have signed values.</li>\n<li>If you still consider Signed Cookies are not secure enough, deal it like you deal with passwords.</li>\n</ul>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTP_cookie\">Wikipedia - HTTP Cookie</a></li>\n<li><a href=\"http://stackoverflow.com/questions/706858/what-information-is-ok-to-store-in-cookies\">What information is OK to store in cookies?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11897965/what-are-signed-cookies-in-connect-expressjs\">What are “signed” cookies in connect&#x2F;expressjs?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3240246/signed-session-cookies-a-good-idea\">Signed session cookies. A good idea?</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html\">cookie 和 session</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Yet-Another-Cookie-Session-Explanation\"><a href=\"#Yet-Another-Cookie-Session-Explanation\" class=\"headerlink\" title=\"Yet Another Cookie &amp; Session Explanation?\"></a>Yet Another Cookie &amp; Session Explanation?</h1><p>Currently I am working on a website with user account written with Node. I did have some backend experience though, but it was around 2 years ago. Grabbing memories back needs some effort.</p>\n<p>To engrave these concepts into my brain more deeper, I have to write it down, and this time, it will go advance rather than simply explaining “Cookie is this and Session is that. Done!”</p>\n<h1 id=\"Why-Use-Cookie-Session\"><a href=\"#Why-Use-Cookie-Session\" class=\"headerlink\" title=\"Why Use Cookie &amp; Session?\"></a>Why Use Cookie &amp; Session?</h1><p>HTTP is a stateless protocol, which means it forgets anything about information it carried last time. In order to maintain a persistent communication between client and server, cookie and session were invented.</p>\n<h1 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h1><p>Cookie is a traditional way to save <strong>non-sensitive</strong> user informations in browsers. To sum up the feature of Cookie:</p>\n<ul>\n<li>Cookie is a key-value set.</li>\n<li>Cookie is sent via HTTP.</li>\n<li>Cookie is an attribute of HTTP header.</li>\n<li>Every cookie has its own attributes:<ul>\n<li>Domain - tells the browser which domain it belongs to. Usually this should be current resource’s top domain. If you set it to <code>.com</code>, every sub-domain of <code>.com</code> like <code>google.com</code> will be able to access this cookie.</li>\n<li>Path - almost identical to the <code>domain</code> attribute, but only relative to current resource’s top domain. This tells the browser when to send this cookie on what path.</li>\n<li>Expires - tells the browser to delete this cookie on a specified date.</li>\n<li>Max-Age - tells the browser to delete this cookie on a specified time relative to now in second.</li>\n<li>Secure - can only be sent via HTTPS or not. Make it on for more serious security concern.</li>\n<li>HttpOnly - should be allowed to access by JavaScript or not. Normally it’s on to prevent from Cross-Site-Script attack.</li>\n</ul>\n</li>\n<li>Can only support up to 4096 bytes in size.</li>\n</ul>\n<p>When I mention about <strong>non-sensitive</strong> informations I mean:</p>\n<ul>\n<li>Session ID - most websites nowadays no longer store “shopping cart” or anything user-sensitive in the cookie. Instead, They store an unique ID generated by the server for looking up corresponding user at server side database.</li>\n<li>Personal Preferences - the background user like, the font size user preferred…etc.</li>\n<li>Browsing Habits - remember login, the last page user visited, the browsing histories of one user…etc.</li>\n</ul>\n<p>The reason why cookie should never store sensitive data like username, password or credit card number is that cookies are more easily to be intercepted or tampered. Though you can send cookies by <strong>https</strong> or using <strong>signed cookie</strong>(which will be introduced latter) to store hashed data, exposing more informations means lower the cost and difficulty of cracking, and thus the best way is don’t even store sensitive data to the cookie.</p>\n<p>Typical ways to set cookie in Node:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rawCookie = req.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;cookie&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cookie = &#123;<span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(rawCookie)&#123;</span><br><span class=\"line\">    cookie.<span class=\"property\">count</span> = <span class=\"built_in\">parseInt</span>(rawCookie.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>)[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    cookie.<span class=\"property\">count</span>++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;set-cookie&quot;</span>, <span class=\"string\">&quot;count=&quot;</span> + cookie.<span class=\"property\">count</span> + <span class=\"string\">&quot;;max-age=5&quot;</span>);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + cookie.<span class=\"property\">count</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>This will increase <code>count</code> by one when user visits <code>localhost:3000</code> in 5 seconds. If user doesn’t visit again in 5 seconds, set count to 1.</p>\n<p>Accessing to cookie is such a pain, right? <code>cookie-parse</code> to the rescue!</p>\n<p><code>npm install cookie-parse</code> and then…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cookie-parser&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">cookieParser</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"built_in\">parseInt</span>(req.<span class=\"property\">cookies</span>.<span class=\"property\">count</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  count = count ? count + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  res.<span class=\"title function_\">cookie</span>(<span class=\"string\">&quot;count&quot;</span>, count.<span class=\"title function_\">toString</span>(), &#123;<span class=\"attr\">maxAge</span>: <span class=\"number\">5000</span>&#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + count);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Tada! I am sure there are something like <code>cookie-parser</code> which exists in other languages.</p>\n<h1 id=\"Common-Variation-Of-Cookies\"><a href=\"#Common-Variation-Of-Cookies\" class=\"headerlink\" title=\"Common Variation Of Cookies\"></a>Common Variation Of Cookies</h1><h4 id=\"Session-Cookie\"><a href=\"#Session-Cookie\" class=\"headerlink\" title=\"Session Cookie\"></a>Session Cookie</h4><p>Session cookie is contrary to persistent cookie(or just called it cookie) and only lives when user is still browsing the website. When user closes the browser, the session cookie is deleted by the browser as well.</p>\n<p>A common usage of session cookie is storing session ID. Session ID is an unique ID generated by the server and was stored when connection is established. Session ID is used for letting the server know who the current user is in order to look up relative informations in the database.</p>\n<p>Setting a session cookie is simple - just leave <code>expires</code> and <code>maxAge</code> attributes empty.</p>\n<p>Use <code>npm install express-session</code> for saving time of building another wheel.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"built_in\">require</span>(<span class=\"string\">&quot;express-session&quot;</span>)(&#123;</span><br><span class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"string\">&quot;i am a secret&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">resave</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = req.<span class=\"property\">session</span>.<span class=\"property\">count</span>;</span><br><span class=\"line\">  count = count ? count + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  req.<span class=\"property\">session</span>.<span class=\"property\">count</span> = count;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + req.<span class=\"property\">session</span>.<span class=\"property\">count</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>By using <code>express-session</code>, a cookie named <code>connect.sid</code> will be stored with a <strong>hashed value plus a signature aside</strong> in the browser.</p>\n<p>As for session ID security topic I’d recommend <a href=\"http://security.stackexchange.com/questions/92122/why-is-it-insecure-to-store-the-session-id-in-a-cookie-directly\">here</a> for further reading.</p>\n<h4 id=\"Signed-Cookie\"><a href=\"#Signed-Cookie\" class=\"headerlink\" title=\"Signed Cookie\"></a>Signed Cookie</h4><p>In web development world, you will accidentally bump into a word - <strong>Signed Cookie</strong>. What is it? Basically, a signed cookie stores a value by appending a signature after it. According to frameworks, they claimed that by singing values, server can determine if this value is tampered, however there are some debates on this topic:</p>\n<ul>\n<li><a href=\"http://security.stackexchange.com/questions/92122/why-is-it-insecure-to-store-the-session-id-in-a-cookie-directly\">Why is it insecure to store the session ID in a cookie directly?</a></li>\n<li><a href=\"https://github.com/expressjs/session/issues/68\">Why sign the cookie?</a></li>\n<li><a href=\"https://github.com/expressjs/session/issues/176\">Why doesn’t this module store the raw session ID in the cookie directly?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3240246/signed-session-cookies-a-good-idea\">Signed session cookies. A good idea?</a></li>\n</ul>\n<p>I am not an expert at security so can’t do any assertion. I will just leave it here.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cookie-parser&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">cookieParser</span>(<span class=\"string\">&quot;write down your secret here&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"built_in\">parseInt</span>(req.<span class=\"property\">signedCookies</span>.<span class=\"property\">count</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  count = count ? count + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  res.<span class=\"title function_\">cookie</span>(<span class=\"string\">&quot;count&quot;</span>, count, &#123;<span class=\"attr\">signed</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + count);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>This is a showcase of how to use signed cookie in Node with express’ extension module. Signature changes whenever <code>count</code> changes.</p>\n<h1 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h1><p>We have dealt with storing informations on the client side, so what exactly session is? Well, session is just an description of state that when the connection between client and server is alive, session lives, when connection closes, session ends.</p>\n<p>The main task that session runs is telling the server which one is the current client by giving each client an unique id, it’s called session ID. There are several possible places to store the session ID:</p>\n<h4 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h4><p>Fast, but not practical. Let’s assume you have prepared a database for storing the actual data of users, and only store session ID in memory, and use session ID to look up corresponding user informations in database, but in most cases, we expect hundreds of clients to maintain its’ session between server, which means these session data will eat up some part of memory, which it’s not a smart move, and plus, you will have to deal with data sharing problem like race condition in concurrent environments.</p>\n<h4 id=\"Cookie-1\"><a href=\"#Cookie-1\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>A common place to store session ID. Usually used with database where actual user information lays.</p>\n<h4 id=\"Database\"><a href=\"#Database\" class=\"headerlink\" title=\"Database\"></a>Database</h4><p>We also generate something corresponding to the session ID for indexing the actual place where user information belongs to and still have to combine forces of memory and cookie to store our session ID, why? Because indexing in database is way more time costly than indexing in memory.</p>\n<p>Here I use <a href=\"http://redis.io/\">Redis</a> to give a quick database showcase. Install package file from Redis to benefit full support.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express-session&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;redis&quot;</span>).<span class=\"title function_\">createClient</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">db.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;connect&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;connected to database...&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">session</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">secret</span>: <span class=\"string\">&quot;such secret much safe wow&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">resave</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  db.<span class=\"title function_\">hget</span>([req.<span class=\"property\">session</span>.<span class=\"property\">id</span>, <span class=\"string\">&quot;count&quot;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">err, reply</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err); <span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reply)&#123;</span><br><span class=\"line\">      count = ++reply;</span><br><span class=\"line\">      db.<span class=\"title function_\">hset</span>([req.<span class=\"property\">session</span>.<span class=\"property\">id</span>, <span class=\"string\">&quot;count&quot;</span>, count], logErr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123; db.<span class=\"title function_\">hset</span>([req.<span class=\"property\">session</span>.<span class=\"property\">id</span>, <span class=\"string\">&quot;count&quot;</span>, count], logErr); &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">send</span>(<span class=\"string\">&quot;count: &quot;</span> + count);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logErr</span>(<span class=\"params\">err, reply</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Web development is all about security. When developers want to take advantages of cookie and session, some principles should be concerned:</p>\n<ul>\n<li>Cookie should not store sensitive data.</li>\n<li>Set cookie’s <code>secure</code> attribute on if HTTPS is available.</li>\n<li>Set cookie’s <code>HttpOnly</code> attribute on if possible to prevent man-in-the-middle from tampering.</li>\n<li>Use Signed Cookie technique to have signed values.</li>\n<li>If you still consider Signed Cookies are not secure enough, deal it like you deal with passwords.</li>\n</ul>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTP_cookie\">Wikipedia - HTTP Cookie</a></li>\n<li><a href=\"http://stackoverflow.com/questions/706858/what-information-is-ok-to-store-in-cookies\">What information is OK to store in cookies?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/11897965/what-are-signed-cookies-in-connect-expressjs\">What are “signed” cookies in connect&#x2F;expressjs?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3240246/signed-session-cookies-a-good-idea\">Signed session cookies. A good idea?</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html\">cookie 和 session</a></li>\n</ul>\n"},{"layout":"post","title":"Frontend Fundamental - AJAX, JSONP and CORS","date":"2015-10-12T22:42:01.000Z","_content":"\nSometimes front-end noob like me will run into Same-Origin-Policy when dealing with ajax things. This article is a note for myself to get clear of what is it and how to deal with it when encounter.\n\n# Same-Origin-Policy\nSame-Origin-Policy is a concept of preventing malicious script from getting sensitive data through [CCRF](Cross-site request forgery) and [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting). Under this policy, browser can access resources only if current document and target server are under the same domain.\n\nThe question is, why do we need to access data from other domain? The reason is that in web development, sometimes we store resources like html, css and js on different server/domain in order to reduce the burden of server. Another reason is that today's web is RESTful, which means client sends request to server to get operation on resources.\n\n# AJAX\nOne way to access cross domain resource without violating SOP is using current server that sends resources to us as a proxy.\n\nBy doing this, fetching cross domain resources is our server's job now since **SOP only works on browser, not server**.\n\n> client's request <---> our server as proxy <---> another server\n\n# JSONP\nSOP restricts where we can request resources we want, however, there are still exceptions.\n\nThese exceptions are `script`, `img`, `link` tags.\n\nAccording to [the draft of origin](http://tools.ietf.org/html/draft-abarth-principles-of-origin-00) (or [this question](http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy) from stackoverflow if you are lazy like me), it says that because not wanting to make web development a painful thing, they decided not to treat every page as an independent origin, and thus they made some exceptions.\n\nThe spirit of this approach is that you still need the server holding resources you want implements a way to provide this service. We will see how to do this with following code. Let's code!\n\n```js title:\"server 1\"\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nvar html = null;\n\nfs.readFile(\"jsonp.html\", function(err, file){\n  if(err){\n    throw err;\n  }\n  html = file.toString();\n});\n\nhttp.createServer(function(req, res){\n  res.writeHeader(200, {\n    \"content-type\": \"text/html\"\n  });\n  res.end(html);\n}).listen(3000);\n\nconsole.log(\"domain 1 is running...\");\n```\n\n```js title:\"server 2\"\nvar http = require(\"http\");\n\nhttp.createServer(function(req, res){\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\"\n  });\n  res.end(\"Hello JSONP!\");\n}).listen(3001);\n\nconsole.log(\"domain 2 is running...\");\n```\n\n```HTML title:\"jsonp.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>jsonp test</title>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">ajax!</button>\n    <script>\n      function contentLoaded(){\n        var text = document.getElementById(\"text\");\n        var button = document.getElementById(\"button\");\n        button.addEventListener(\"click\", function(e){\n          var ajax = new XMLHttpRequest();\n          ajax.addEventListener(\"readystatechange\", function(){\n            if(ajax.readyState === 4){\n              if(ajax.status === 200){\n                text.appendChild(document.createTextNode(ajax.responseText));\n              }\n            }\n          });\n          ajax.open(\"GET\", \"http://localhost:3001\");\n          ajax.send();\n        });\n      }\n\n      window.addEventListener(\"DOMContentLoaded\", contentLoaded);\n    </script>\n  </body>\n</html>\n```\n\n```plain title:\"Result in Chrome console\"\nXMLHttpRequest cannot load http://localhost:3001/. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access.\n```\n\nWell, of course it doesn't work since it violates SOP. Let's correct this.\n\n```js title:\"server 2\"\nvar http = require(\"http\");\nvar url = require(\"url\");\nvar querystring = require(\"querystring\");\n\nhttp.createServer(function(req, res){\n  var queryTemp = url.parse(req.url).query;\n  var query = querystring.parse(queryTemp);\n\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\"\n  });\n  res.end(query.callback + \"('Hello JSONP!')\");\n}).listen(3001);\n\nconsole.log(\"domain 2 is running...\");\n```\n\n```html title:\"jsonp.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>jsonp test</title>\n    <script id=\"jsonp\"></script>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">jsonp!</button>\n    <script>\n      var text = document.getElementById(\"text\");\n      var button = document.getElementById(\"button\");\n      var jsonp = document.getElementById(\"jsonp\");\n\n      function contentLoaded(){\n        button.addEventListener(\"click\", function(e){\n          jsonp.src= \"http://localhost:3001/?callback=changeText\";\n        });\n      }\n\n      function changeText(string){\n        text.appendChild(document.createTextNode(string));\n      }\n\n      window.addEventListener(\"DOMContentLoaded\", contentLoaded);\n    </script>\n  </body>\n</html>\n```\n\nWhen you click `jsonp!` button `text` div should be appened with `Hello JSONP!` text.\n\n# CORS\nCross-Origin-Resource-Sharing, CORS, is a standard mechanism that let you access cross-domain resources with standard ajax request. You don't need those sorcery ways to do the magic anymore.\n\nBy simply enabling the following header in server 2:\n\n`Access-Control-Allow-Origin: http://localhost:3000`\n\nVisit [here](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) if you want more headers for customization.\n\n```js title:\"server 2\"\nvar http = require(\"http\");\n\nhttp.createServer(function(req, res){\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\",\n    \"access-control-allow-origin\": \"http://localhost:3000\"\n  });\n  res.end(\"Hello CORS!\");\n}).listen(3001);\n\nconsole.log(\"domain 2 is running...\");\n```\n\n```js title:\"index\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>CORS test</title>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">CORS rocks!</button>\n    <script>\n    function contentLoaded(){\n      var text = document.getElementById(\"text\");\n      var button = document.getElementById(\"button\");\n      button.addEventListener(\"click\", function(e){\n        var ajax = new XMLHttpRequest();\n        ajax.addEventListener(\"readystatechange\", function(){\n          if(ajax.readyState === 4){\n            if(ajax.status === 200){\n              text.appendChild(document.createTextNode(ajax.responseText));\n            }\n          }\n        });\n        ajax.open(\"GET\", \"http://localhost:3001\");\n        ajax.send();\n      });\n    }\n    window.addEventListener(\"DOMContentLoaded\", contentLoaded);\n    </script>\n  </body>\n</html>\n```\n\nWe are now be able to acess cross-domain resources in standard ajax way without any errors, weeeeeeeeee!\n\n# References\n\n* [Same-Origin-Policy on Wikipedia](https://en.wikipedia.org/wiki/Same-origin_policy)\n* [Cross-site request forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery)\n* [Cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting)\n* [JSON Vs JSONP Vs CORS](http://stackoverflow.com/questions/15136602/json-vs-jsonp-vs-cors)\n* [usamadar.com: SOP, JSONP and CORS](http://usamadar.com/2012/06/24/getting-around-browsers-same-origin-policy-sop-with-proxies-script-injection-jsonp-and-cors/)\n* [Why is the HTML SCRIPT tag not subject to the same origin policy](http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy)\n* [Principles of the Same-Origin Policy](http://tools.ietf.org/html/draft-abarth-principles-of-origin-00)\n\n[Same-Origin-Policy on Wikipedia]: https://en.wikipedia.org/wiki/Same-origin_policy\n[Cross-site request forgery]: https://en.wikipedia.org/wiki/Cross-site_request_forgery\n[Cross-site scripting]: https://en.wikipedia.org/wiki/Cross-site_scripting\n[JSON Vs JSONP Vs CORS]: http://stackoverflow.com/questions/15136602/json-vs-jsonp-vs-cors\n[usamadar.com: SOP, JSONP and CORS]: http://usamadar.com/2012/06/24/getting-around-browsers-same-origin-policy-sop-with-proxies-script-injection-jsonp-and-cors/\n[Why is the HTML SCRIPT tag not subject to the same origin policy]: http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy\n[Principles of the Same-Origin Policy]: http://tools.ietf.org/html/draft-abarth-principles-of-origin-00\n[CORS on wikipedia]: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n","source":"_posts/2015-10-12-frontend-fundamental-ajax-jsonp-and-cors.markdown","raw":"---\nlayout: post\ntitle: \"Frontend Fundamental - AJAX, JSONP and CORS\"\ndate: 2015-10-12T23:42:01+08:00\ntags: [web, HTTP/HTTPS, AJAX, CORS]\n---\n\nSometimes front-end noob like me will run into Same-Origin-Policy when dealing with ajax things. This article is a note for myself to get clear of what is it and how to deal with it when encounter.\n\n# Same-Origin-Policy\nSame-Origin-Policy is a concept of preventing malicious script from getting sensitive data through [CCRF](Cross-site request forgery) and [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting). Under this policy, browser can access resources only if current document and target server are under the same domain.\n\nThe question is, why do we need to access data from other domain? The reason is that in web development, sometimes we store resources like html, css and js on different server/domain in order to reduce the burden of server. Another reason is that today's web is RESTful, which means client sends request to server to get operation on resources.\n\n# AJAX\nOne way to access cross domain resource without violating SOP is using current server that sends resources to us as a proxy.\n\nBy doing this, fetching cross domain resources is our server's job now since **SOP only works on browser, not server**.\n\n> client's request <---> our server as proxy <---> another server\n\n# JSONP\nSOP restricts where we can request resources we want, however, there are still exceptions.\n\nThese exceptions are `script`, `img`, `link` tags.\n\nAccording to [the draft of origin](http://tools.ietf.org/html/draft-abarth-principles-of-origin-00) (or [this question](http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy) from stackoverflow if you are lazy like me), it says that because not wanting to make web development a painful thing, they decided not to treat every page as an independent origin, and thus they made some exceptions.\n\nThe spirit of this approach is that you still need the server holding resources you want implements a way to provide this service. We will see how to do this with following code. Let's code!\n\n```js title:\"server 1\"\nvar http = require(\"http\");\nvar fs = require(\"fs\");\n\nvar html = null;\n\nfs.readFile(\"jsonp.html\", function(err, file){\n  if(err){\n    throw err;\n  }\n  html = file.toString();\n});\n\nhttp.createServer(function(req, res){\n  res.writeHeader(200, {\n    \"content-type\": \"text/html\"\n  });\n  res.end(html);\n}).listen(3000);\n\nconsole.log(\"domain 1 is running...\");\n```\n\n```js title:\"server 2\"\nvar http = require(\"http\");\n\nhttp.createServer(function(req, res){\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\"\n  });\n  res.end(\"Hello JSONP!\");\n}).listen(3001);\n\nconsole.log(\"domain 2 is running...\");\n```\n\n```HTML title:\"jsonp.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>jsonp test</title>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">ajax!</button>\n    <script>\n      function contentLoaded(){\n        var text = document.getElementById(\"text\");\n        var button = document.getElementById(\"button\");\n        button.addEventListener(\"click\", function(e){\n          var ajax = new XMLHttpRequest();\n          ajax.addEventListener(\"readystatechange\", function(){\n            if(ajax.readyState === 4){\n              if(ajax.status === 200){\n                text.appendChild(document.createTextNode(ajax.responseText));\n              }\n            }\n          });\n          ajax.open(\"GET\", \"http://localhost:3001\");\n          ajax.send();\n        });\n      }\n\n      window.addEventListener(\"DOMContentLoaded\", contentLoaded);\n    </script>\n  </body>\n</html>\n```\n\n```plain title:\"Result in Chrome console\"\nXMLHttpRequest cannot load http://localhost:3001/. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access.\n```\n\nWell, of course it doesn't work since it violates SOP. Let's correct this.\n\n```js title:\"server 2\"\nvar http = require(\"http\");\nvar url = require(\"url\");\nvar querystring = require(\"querystring\");\n\nhttp.createServer(function(req, res){\n  var queryTemp = url.parse(req.url).query;\n  var query = querystring.parse(queryTemp);\n\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\"\n  });\n  res.end(query.callback + \"('Hello JSONP!')\");\n}).listen(3001);\n\nconsole.log(\"domain 2 is running...\");\n```\n\n```html title:\"jsonp.html\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>jsonp test</title>\n    <script id=\"jsonp\"></script>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">jsonp!</button>\n    <script>\n      var text = document.getElementById(\"text\");\n      var button = document.getElementById(\"button\");\n      var jsonp = document.getElementById(\"jsonp\");\n\n      function contentLoaded(){\n        button.addEventListener(\"click\", function(e){\n          jsonp.src= \"http://localhost:3001/?callback=changeText\";\n        });\n      }\n\n      function changeText(string){\n        text.appendChild(document.createTextNode(string));\n      }\n\n      window.addEventListener(\"DOMContentLoaded\", contentLoaded);\n    </script>\n  </body>\n</html>\n```\n\nWhen you click `jsonp!` button `text` div should be appened with `Hello JSONP!` text.\n\n# CORS\nCross-Origin-Resource-Sharing, CORS, is a standard mechanism that let you access cross-domain resources with standard ajax request. You don't need those sorcery ways to do the magic anymore.\n\nBy simply enabling the following header in server 2:\n\n`Access-Control-Allow-Origin: http://localhost:3000`\n\nVisit [here](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing) if you want more headers for customization.\n\n```js title:\"server 2\"\nvar http = require(\"http\");\n\nhttp.createServer(function(req, res){\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\",\n    \"access-control-allow-origin\": \"http://localhost:3000\"\n  });\n  res.end(\"Hello CORS!\");\n}).listen(3001);\n\nconsole.log(\"domain 2 is running...\");\n```\n\n```js title:\"index\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>CORS test</title>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">CORS rocks!</button>\n    <script>\n    function contentLoaded(){\n      var text = document.getElementById(\"text\");\n      var button = document.getElementById(\"button\");\n      button.addEventListener(\"click\", function(e){\n        var ajax = new XMLHttpRequest();\n        ajax.addEventListener(\"readystatechange\", function(){\n          if(ajax.readyState === 4){\n            if(ajax.status === 200){\n              text.appendChild(document.createTextNode(ajax.responseText));\n            }\n          }\n        });\n        ajax.open(\"GET\", \"http://localhost:3001\");\n        ajax.send();\n      });\n    }\n    window.addEventListener(\"DOMContentLoaded\", contentLoaded);\n    </script>\n  </body>\n</html>\n```\n\nWe are now be able to acess cross-domain resources in standard ajax way without any errors, weeeeeeeeee!\n\n# References\n\n* [Same-Origin-Policy on Wikipedia](https://en.wikipedia.org/wiki/Same-origin_policy)\n* [Cross-site request forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery)\n* [Cross-site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting)\n* [JSON Vs JSONP Vs CORS](http://stackoverflow.com/questions/15136602/json-vs-jsonp-vs-cors)\n* [usamadar.com: SOP, JSONP and CORS](http://usamadar.com/2012/06/24/getting-around-browsers-same-origin-policy-sop-with-proxies-script-injection-jsonp-and-cors/)\n* [Why is the HTML SCRIPT tag not subject to the same origin policy](http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy)\n* [Principles of the Same-Origin Policy](http://tools.ietf.org/html/draft-abarth-principles-of-origin-00)\n\n[Same-Origin-Policy on Wikipedia]: https://en.wikipedia.org/wiki/Same-origin_policy\n[Cross-site request forgery]: https://en.wikipedia.org/wiki/Cross-site_request_forgery\n[Cross-site scripting]: https://en.wikipedia.org/wiki/Cross-site_scripting\n[JSON Vs JSONP Vs CORS]: http://stackoverflow.com/questions/15136602/json-vs-jsonp-vs-cors\n[usamadar.com: SOP, JSONP and CORS]: http://usamadar.com/2012/06/24/getting-around-browsers-same-origin-policy-sop-with-proxies-script-injection-jsonp-and-cors/\n[Why is the HTML SCRIPT tag not subject to the same origin policy]: http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy\n[Principles of the Same-Origin Policy]: http://tools.ietf.org/html/draft-abarth-principles-of-origin-00\n[CORS on wikipedia]: https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n","slug":"2015-10-12-frontend-fundamental-ajax-jsonp-and-cors","published":1,"updated":"2023-09-06T19:45:58.304Z","_id":"cln99ol87000pvfvg2cznhwbc","comments":1,"photos":[],"link":"","content":"<p>Sometimes front-end noob like me will run into Same-Origin-Policy when dealing with ajax things. This article is a note for myself to get clear of what is it and how to deal with it when encounter.</p>\n<h1 id=\"Same-Origin-Policy\"><a href=\"#Same-Origin-Policy\" class=\"headerlink\" title=\"Same-Origin-Policy\"></a>Same-Origin-Policy</h1><p>Same-Origin-Policy is a concept of preventing malicious script from getting sensitive data through [CCRF](Cross-site request forgery) and <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS</a>. Under this policy, browser can access resources only if current document and target server are under the same domain.</p>\n<p>The question is, why do we need to access data from other domain? The reason is that in web development, sometimes we store resources like html, css and js on different server&#x2F;domain in order to reduce the burden of server. Another reason is that today’s web is RESTful, which means client sends request to server to get operation on resources.</p>\n<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><p>One way to access cross domain resource without violating SOP is using current server that sends resources to us as a proxy.</p>\n<p>By doing this, fetching cross domain resources is our server’s job now since <strong>SOP only works on browser, not server</strong>.</p>\n<blockquote>\n<p>client’s request &lt;—&gt; our server as proxy &lt;—&gt; another server</p>\n</blockquote>\n<h1 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h1><p>SOP restricts where we can request resources we want, however, there are still exceptions.</p>\n<p>These exceptions are <code>script</code>, <code>img</code>, <code>link</code> tags.</p>\n<p>According to <a href=\"http://tools.ietf.org/html/draft-abarth-principles-of-origin-00\">the draft of origin</a> (or <a href=\"http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy\">this question</a> from stackoverflow if you are lazy like me), it says that because not wanting to make web development a painful thing, they decided not to treat every page as an independent origin, and thus they made some exceptions.</p>\n<p>The spirit of this approach is that you still need the server holding resources you want implements a way to provide this service. We will see how to do this with following code. Let’s code!</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server 1\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;jsonp.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  html = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(html);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;domain 1 is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>title:\"server 2\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello JSONP!&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3001</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;domain 2 is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"jsonp.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jsonp test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>ajax!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">contentLoaded</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">if</span>(ajax.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(ajax.<span class=\"property\">responseText</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">              &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:3001&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, contentLoaded);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>title:\"Result in Chrome console\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://localhost:3001/. No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource. Origin &#x27;http://localhost:3000&#x27; is therefore not allowed access.</span><br></pre></td></tr></table></figure>\n\n<p>Well, of course it doesn’t work since it violates SOP. Let’s correct this.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server 2\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryTemp = url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>).<span class=\"property\">query</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = querystring.<span class=\"title function_\">parse</span>(queryTemp);</span><br><span class=\"line\"></span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(query.<span class=\"property\">callback</span> + <span class=\"string\">&quot;(&#x27;Hello JSONP!&#x27;)&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3001</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;domain 2 is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"jsonp.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jsonp test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jsonp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>jsonp!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> jsonp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsonp&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">contentLoaded</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          jsonp.<span class=\"property\">src</span>= <span class=\"string\">&quot;http://localhost:3001/?callback=changeText&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">changeText</span>(<span class=\"params\">string</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(string));</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, contentLoaded);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>When you click <code>jsonp!</code> button <code>text</code> div should be appened with <code>Hello JSONP!</code> text.</p>\n<h1 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h1><p>Cross-Origin-Resource-Sharing, CORS, is a standard mechanism that let you access cross-domain resources with standard ajax request. You don’t need those sorcery ways to do the magic anymore.</p>\n<p>By simply enabling the following header in server 2:</p>\n<p><code>Access-Control-Allow-Origin: http://localhost:3000</code></p>\n<p>Visit <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">here</a> if you want more headers for customization.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server 2\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;access-control-allow-origin&quot;</span>: <span class=\"string\">&quot;http://localhost:3000&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello CORS!&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3001</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;domain 2 is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>title:\"index\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CORS test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>CORS rocks!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">function</span> <span class=\"title function_\">contentLoaded</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">if</span>(ajax.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(ajax.<span class=\"property\">responseText</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:3001&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        ajax.<span class=\"title function_\">send</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, contentLoaded);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>We are now be able to acess cross-domain resources in standard ajax way without any errors, weeeeeeeeee!</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">Same-Origin-Policy on Wikipedia</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">Cross-site request forgery</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">Cross-site scripting</a></li>\n<li><a href=\"http://stackoverflow.com/questions/15136602/json-vs-jsonp-vs-cors\">JSON Vs JSONP Vs CORS</a></li>\n<li><a href=\"http://usamadar.com/2012/06/24/getting-around-browsers-same-origin-policy-sop-with-proxies-script-injection-jsonp-and-cors/\">usamadar.com: SOP, JSONP and CORS</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy\">Why is the HTML SCRIPT tag not subject to the same origin policy</a></li>\n<li><a href=\"http://tools.ietf.org/html/draft-abarth-principles-of-origin-00\">Principles of the Same-Origin Policy</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Sometimes front-end noob like me will run into Same-Origin-Policy when dealing with ajax things. This article is a note for myself to get clear of what is it and how to deal with it when encounter.</p>\n<h1 id=\"Same-Origin-Policy\"><a href=\"#Same-Origin-Policy\" class=\"headerlink\" title=\"Same-Origin-Policy\"></a>Same-Origin-Policy</h1><p>Same-Origin-Policy is a concept of preventing malicious script from getting sensitive data through [CCRF](Cross-site request forgery) and <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">XSS</a>. Under this policy, browser can access resources only if current document and target server are under the same domain.</p>\n<p>The question is, why do we need to access data from other domain? The reason is that in web development, sometimes we store resources like html, css and js on different server&#x2F;domain in order to reduce the burden of server. Another reason is that today’s web is RESTful, which means client sends request to server to get operation on resources.</p>\n<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><p>One way to access cross domain resource without violating SOP is using current server that sends resources to us as a proxy.</p>\n<p>By doing this, fetching cross domain resources is our server’s job now since <strong>SOP only works on browser, not server</strong>.</p>\n<blockquote>\n<p>client’s request &lt;—&gt; our server as proxy &lt;—&gt; another server</p>\n</blockquote>\n<h1 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h1><p>SOP restricts where we can request resources we want, however, there are still exceptions.</p>\n<p>These exceptions are <code>script</code>, <code>img</code>, <code>link</code> tags.</p>\n<p>According to <a href=\"http://tools.ietf.org/html/draft-abarth-principles-of-origin-00\">the draft of origin</a> (or <a href=\"http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy\">this question</a> from stackoverflow if you are lazy like me), it says that because not wanting to make web development a painful thing, they decided not to treat every page as an independent origin, and thus they made some exceptions.</p>\n<p>The spirit of this approach is that you still need the server holding resources you want implements a way to provide this service. We will see how to do this with following code. Let’s code!</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server 1\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> html = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.<span class=\"title function_\">readFile</span>(<span class=\"string\">&quot;jsonp.html&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">err, file</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  html = file.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(html);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;domain 1 is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>title:\"server 2\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello JSONP!&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3001</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;domain 2 is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"jsonp.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jsonp test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>ajax!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">contentLoaded</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">if</span>(ajax.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(ajax.<span class=\"property\">responseText</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">              &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:3001&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ajax.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, contentLoaded);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>title:\"Result in Chrome console\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://localhost:3001/. No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource. Origin &#x27;http://localhost:3000&#x27; is therefore not allowed access.</span><br></pre></td></tr></table></figure>\n\n<p>Well, of course it doesn’t work since it violates SOP. Let’s correct this.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server 2\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryTemp = url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>).<span class=\"property\">query</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = querystring.<span class=\"title function_\">parse</span>(queryTemp);</span><br><span class=\"line\"></span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(query.<span class=\"property\">callback</span> + <span class=\"string\">&quot;(&#x27;Hello JSONP!&#x27;)&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3001</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;domain 2 is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><figcaption><span>title:\"jsonp.html\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jsonp test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jsonp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>jsonp!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">var</span> jsonp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsonp&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">contentLoaded</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          jsonp.<span class=\"property\">src</span>= <span class=\"string\">&quot;http://localhost:3001/?callback=changeText&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">changeText</span>(<span class=\"params\">string</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(string));</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, contentLoaded);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>When you click <code>jsonp!</code> button <code>text</code> div should be appened with <code>Hello JSONP!</code> text.</p>\n<h1 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h1><p>Cross-Origin-Resource-Sharing, CORS, is a standard mechanism that let you access cross-domain resources with standard ajax request. You don’t need those sorcery ways to do the magic anymore.</p>\n<p>By simply enabling the following header in server 2:</p>\n<p><code>Access-Control-Allow-Origin: http://localhost:3000</code></p>\n<p>Visit <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">here</a> if you want more headers for customization.</p>\n<figure class=\"highlight js\"><figcaption><span>title:\"server 2\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;access-control-allow-origin&quot;</span>: <span class=\"string\">&quot;http://localhost:3000&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(<span class=\"string\">&quot;Hello CORS!&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3001</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;domain 2 is running...&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><figcaption><span>title:\"index\"</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>CORS test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>CORS rocks!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">function</span> <span class=\"title function_\">contentLoaded</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;readystatechange&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"keyword\">if</span>(ajax.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">if</span>(ajax.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">              text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(ajax.<span class=\"property\">responseText</span>));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:3001&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        ajax.<span class=\"title function_\">send</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, contentLoaded);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>We are now be able to acess cross-domain resources in standard ajax way without any errors, weeeeeeeeee!</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">Same-Origin-Policy on Wikipedia</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">Cross-site request forgery</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">Cross-site scripting</a></li>\n<li><a href=\"http://stackoverflow.com/questions/15136602/json-vs-jsonp-vs-cors\">JSON Vs JSONP Vs CORS</a></li>\n<li><a href=\"http://usamadar.com/2012/06/24/getting-around-browsers-same-origin-policy-sop-with-proxies-script-injection-jsonp-and-cors/\">usamadar.com: SOP, JSONP and CORS</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10530554/why-is-the-html-script-tag-not-subject-to-the-same-origin-policy\">Why is the HTML SCRIPT tag not subject to the same origin policy</a></li>\n<li><a href=\"http://tools.ietf.org/html/draft-abarth-principles-of-origin-00\">Principles of the Same-Origin Policy</a></li>\n</ul>\n"},{"title":"Merge Branch From Another Repo","date":"2016-12-13T06:38:26.000Z","_content":"\nJust a quick TIL note here.\n\nIf you have ever encountered a similar scenario:\n\n> You have repo A and repo B.\n> Repo B is derived from repo A.\n> You are currently on repo B, and want to merge branch (or pick commit) from repo A.\n> How to achieve that?\n\nHere is what git command `remote` magically does:\n\n1. `git remote add repoA addressOfRepoA`\n2. Assume you are on `master` branch of repo B, and want to merge `master` branch from repo A.\n3. `git pull repoA master`\n4. Done.\n\nActually an repo doesn't have limitation on how many `remote repo` it can have, so if you run into similar case like me, hope this post help.\n\nReferences:\n- [Git Basics - Working with Remotes](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes)\n- [StackOverflow - git merge different repositories](http://stackoverflow.com/questions/2949738/git-merge-different-repositories)\n","source":"_posts/2016-12-12-Merge-Branch-From-Another-Repo.md","raw":"---\ntitle: Merge Branch From Another Repo\ndate: 2016-12-12 22:38:26\ntags: [git]\n---\n\nJust a quick TIL note here.\n\nIf you have ever encountered a similar scenario:\n\n> You have repo A and repo B.\n> Repo B is derived from repo A.\n> You are currently on repo B, and want to merge branch (or pick commit) from repo A.\n> How to achieve that?\n\nHere is what git command `remote` magically does:\n\n1. `git remote add repoA addressOfRepoA`\n2. Assume you are on `master` branch of repo B, and want to merge `master` branch from repo A.\n3. `git pull repoA master`\n4. Done.\n\nActually an repo doesn't have limitation on how many `remote repo` it can have, so if you run into similar case like me, hope this post help.\n\nReferences:\n- [Git Basics - Working with Remotes](https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes)\n- [StackOverflow - git merge different repositories](http://stackoverflow.com/questions/2949738/git-merge-different-repositories)\n","slug":"2016-12-12-Merge-Branch-From-Another-Repo","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol88000qvfvg0g51ewei","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Just a quick TIL note here.</p>\n<p>If you have ever encountered a similar scenario:</p>\n<blockquote>\n<p>You have repo A and repo B.<br>Repo B is derived from repo A.<br>You are currently on repo B, and want to merge branch (or pick commit) from repo A.<br>How to achieve that?</p>\n</blockquote>\n<p>Here is what git command <code>remote</code> magically does:</p>\n<ol>\n<li><code>git remote add repoA addressOfRepoA</code></li>\n<li>Assume you are on <code>master</code> branch of repo B, and want to merge <code>master</code> branch from repo A.</li>\n<li><code>git pull repoA master</code></li>\n<li>Done.</li>\n</ol>\n<p>Actually an repo doesn’t have limitation on how many <code>remote repo</code> it can have, so if you run into similar case like me, hope this post help.</p>\n<p>References:</p>\n<ul>\n<li><a href=\"https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\">Git Basics - Working with Remotes</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2949738/git-merge-different-repositories\">StackOverflow - git merge different repositories</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Just a quick TIL note here.</p>\n<p>If you have ever encountered a similar scenario:</p>\n<blockquote>\n<p>You have repo A and repo B.<br>Repo B is derived from repo A.<br>You are currently on repo B, and want to merge branch (or pick commit) from repo A.<br>How to achieve that?</p>\n</blockquote>\n<p>Here is what git command <code>remote</code> magically does:</p>\n<ol>\n<li><code>git remote add repoA addressOfRepoA</code></li>\n<li>Assume you are on <code>master</code> branch of repo B, and want to merge <code>master</code> branch from repo A.</li>\n<li><code>git pull repoA master</code></li>\n<li>Done.</li>\n</ol>\n<p>Actually an repo doesn’t have limitation on how many <code>remote repo</code> it can have, so if you run into similar case like me, hope this post help.</p>\n<p>References:</p>\n<ul>\n<li><a href=\"https://git-scm.com/book/en/v2/Git-Basics-Working-with-Remotes\">Git Basics - Working with Remotes</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2949738/git-merge-different-repositories\">StackOverflow - git merge different repositories</a></li>\n</ul>\n"},{"title":"Introduction to Progressive Web App (PWA)","date":"2017-02-14T06:37:45.000Z","_content":"\n# What is that?\nBuzz word time! Progressive Web App (will be written as PWA in the following post), promoted by Google, basically means delivering user an app-like web app. It concludes the following features:\n\n- Responsive - available on many devices: desktop, phone and tablet.\n- Reliable - accessible even if the network is down.\n- Fresh - always up-to-date, updating without getting through app store.\n- Safe - can only be accessed via HTTPS.\n- Discoverable - unlike native app, since it's an web app, content should be discoverable by the search engines.\n- Engaging - PWA can be access like an native app. You can access them by adding them to home screen, and provide them an seamless full screen experience.\n\nbut that sounds very...unclear. We want to know how it was made right. Here is the *heart of Progressive Web App*:\n\n- [Service Worker](https://w3c.github.io/ServiceWorker/) - the first pillar of PWA. It's an API that hijacks networking request, and responds browser with additional messages.\n- [Cache Storage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) - the second pillar of PWA. A member of Web Storage. An API developer often use with Service Worker. It caches request as key and responds with cached value if corresponding key is found.\n- [Web App Manifest](https://w3c.github.io/manifest/) - a JSON-based manifest file provides ability to set things like app icon name or display mode and many other things.\n\n# Platform support\n[service worker API on MDN](https://developer.mozilla.org/en-US/docs/Web/API/serviceworker)\n\nIn the current status, service worker is not available on iOS, which says your app still can't benefit from PWA, but the good news is even if the working environment hasn't support yet, your app will fallback to the traditional caching strategy. Your app still works without modifying codes!\n\n# PWA vs Native\nPWA is an improvement to the web and user experience, making it more like an native app, but that doesn't mean it's going to replace native app or against native app on par.\n\nPWA is just a collection of features and it's not a platform like native. A fair fight should be \"browser vs native\".\n\nIf you take a look at [what web can do](https://whatwebcando.today/), you might think \"cool I can finally develop something like native does on mobile!\" However the current compatibility on iOS still has long way to go, if you take a look on those API closely, you will find out most of them only available on Chrome on Android.\n\n# How does it work?\nPlease check [pwa-test](https://github.com/zushenyan/pwa-test) written by me. It's a simplified version of [Your Frist Progressive Web App](https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0).\n\nI don't want to write every step down here, because, first, I am lazy, and more important, I think [Your Frist Progressive Web App](https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0) has done a great job on tutoring. I believe it already provides all the details you need.\n\nHowever there are still some pitfalls when developing with service worker, in order to save your time, [here](https://gist.github.com/Rich-Harris/fd6c3c73e6e707e312d7c5d7d0f3b2f9) you go.\n\n# Higher level API\nAfter read all the tutorials, you found you have to write many codes to achieve PWA, but... you are a lazy programmer like me, and wondering \"where's the higher level API candy?\" Well, people heard you. Here comes some candies!\n\n- [sw-toolbox](https://github.com/GoogleChrome/sw-toolbox) - a collection of service worker tools to help developing offline web app.\n- [sw-precache](https://github.com/GoogleChrome/sw-precache) - a helper for integrating service worker with building chain like gulp.\n- [webpack-offline-plugin](https://github.com/NekR/offline-plugin) - a webpack plugin for building offline web app.\n\n# References\n- [What is a progressive web app](http://blog.ionic.io/what-is-a-progressive-web-app/)\n- [A Beginner’s Guide To Progressive Web Apps](https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/)\n- [Your Frist Progressive Web App](https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0)\n- [Push notifications](https://codelabs.developers.google.com/codelabs/push-notifications/index.html?index=..%2F..%2Findex#6)\n- [Why “Progressive Web Apps vs. native” is the wrong question to ask](https://www.google.com.tw/search?safe=off&q=pwa+vs+native&oq=pwa+vs+&gs_l=serp.3.1.0l7j0i10k1j0l2.44121.47105.0.48621.15.11.4.0.0.0.144.882.10j1.11.0....0...1c.1.64.serp..0.13.779.0..0i22i30k1.fl5zTNkR8kI)\n","source":"_posts/2017-02-13-Introduction-to-Progressive-Web-App-PWA.md","raw":"---\ntitle: Introduction to Progressive Web App (PWA)\ndate: 2017-02-13 22:37:45\ntags: [frontend, PWA, mobile, javascript]\n---\n\n# What is that?\nBuzz word time! Progressive Web App (will be written as PWA in the following post), promoted by Google, basically means delivering user an app-like web app. It concludes the following features:\n\n- Responsive - available on many devices: desktop, phone and tablet.\n- Reliable - accessible even if the network is down.\n- Fresh - always up-to-date, updating without getting through app store.\n- Safe - can only be accessed via HTTPS.\n- Discoverable - unlike native app, since it's an web app, content should be discoverable by the search engines.\n- Engaging - PWA can be access like an native app. You can access them by adding them to home screen, and provide them an seamless full screen experience.\n\nbut that sounds very...unclear. We want to know how it was made right. Here is the *heart of Progressive Web App*:\n\n- [Service Worker](https://w3c.github.io/ServiceWorker/) - the first pillar of PWA. It's an API that hijacks networking request, and responds browser with additional messages.\n- [Cache Storage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) - the second pillar of PWA. A member of Web Storage. An API developer often use with Service Worker. It caches request as key and responds with cached value if corresponding key is found.\n- [Web App Manifest](https://w3c.github.io/manifest/) - a JSON-based manifest file provides ability to set things like app icon name or display mode and many other things.\n\n# Platform support\n[service worker API on MDN](https://developer.mozilla.org/en-US/docs/Web/API/serviceworker)\n\nIn the current status, service worker is not available on iOS, which says your app still can't benefit from PWA, but the good news is even if the working environment hasn't support yet, your app will fallback to the traditional caching strategy. Your app still works without modifying codes!\n\n# PWA vs Native\nPWA is an improvement to the web and user experience, making it more like an native app, but that doesn't mean it's going to replace native app or against native app on par.\n\nPWA is just a collection of features and it's not a platform like native. A fair fight should be \"browser vs native\".\n\nIf you take a look at [what web can do](https://whatwebcando.today/), you might think \"cool I can finally develop something like native does on mobile!\" However the current compatibility on iOS still has long way to go, if you take a look on those API closely, you will find out most of them only available on Chrome on Android.\n\n# How does it work?\nPlease check [pwa-test](https://github.com/zushenyan/pwa-test) written by me. It's a simplified version of [Your Frist Progressive Web App](https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0).\n\nI don't want to write every step down here, because, first, I am lazy, and more important, I think [Your Frist Progressive Web App](https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0) has done a great job on tutoring. I believe it already provides all the details you need.\n\nHowever there are still some pitfalls when developing with service worker, in order to save your time, [here](https://gist.github.com/Rich-Harris/fd6c3c73e6e707e312d7c5d7d0f3b2f9) you go.\n\n# Higher level API\nAfter read all the tutorials, you found you have to write many codes to achieve PWA, but... you are a lazy programmer like me, and wondering \"where's the higher level API candy?\" Well, people heard you. Here comes some candies!\n\n- [sw-toolbox](https://github.com/GoogleChrome/sw-toolbox) - a collection of service worker tools to help developing offline web app.\n- [sw-precache](https://github.com/GoogleChrome/sw-precache) - a helper for integrating service worker with building chain like gulp.\n- [webpack-offline-plugin](https://github.com/NekR/offline-plugin) - a webpack plugin for building offline web app.\n\n# References\n- [What is a progressive web app](http://blog.ionic.io/what-is-a-progressive-web-app/)\n- [A Beginner’s Guide To Progressive Web Apps](https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/)\n- [Your Frist Progressive Web App](https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0)\n- [Push notifications](https://codelabs.developers.google.com/codelabs/push-notifications/index.html?index=..%2F..%2Findex#6)\n- [Why “Progressive Web Apps vs. native” is the wrong question to ask](https://www.google.com.tw/search?safe=off&q=pwa+vs+native&oq=pwa+vs+&gs_l=serp.3.1.0l7j0i10k1j0l2.44121.47105.0.48621.15.11.4.0.0.0.144.882.10j1.11.0....0...1c.1.64.serp..0.13.779.0..0i22i30k1.fl5zTNkR8kI)\n","slug":"2017-02-13-Introduction-to-Progressive-Web-App-PWA","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol88000svfvg4zu7874n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"What-is-that\"><a href=\"#What-is-that\" class=\"headerlink\" title=\"What is that?\"></a>What is that?</h1><p>Buzz word time! Progressive Web App (will be written as PWA in the following post), promoted by Google, basically means delivering user an app-like web app. It concludes the following features:</p>\n<ul>\n<li>Responsive - available on many devices: desktop, phone and tablet.</li>\n<li>Reliable - accessible even if the network is down.</li>\n<li>Fresh - always up-to-date, updating without getting through app store.</li>\n<li>Safe - can only be accessed via HTTPS.</li>\n<li>Discoverable - unlike native app, since it’s an web app, content should be discoverable by the search engines.</li>\n<li>Engaging - PWA can be access like an native app. You can access them by adding them to home screen, and provide them an seamless full screen experience.</li>\n</ul>\n<p>but that sounds very…unclear. We want to know how it was made right. Here is the <em>heart of Progressive Web App</em>:</p>\n<ul>\n<li><a href=\"https://w3c.github.io/ServiceWorker/\">Service Worker</a> - the first pillar of PWA. It’s an API that hijacks networking request, and responds browser with additional messages.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage\">Cache Storage</a> - the second pillar of PWA. A member of Web Storage. An API developer often use with Service Worker. It caches request as key and responds with cached value if corresponding key is found.</li>\n<li><a href=\"https://w3c.github.io/manifest/\">Web App Manifest</a> - a JSON-based manifest file provides ability to set things like app icon name or display mode and many other things.</li>\n</ul>\n<h1 id=\"Platform-support\"><a href=\"#Platform-support\" class=\"headerlink\" title=\"Platform support\"></a>Platform support</h1><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/serviceworker\">service worker API on MDN</a></p>\n<p>In the current status, service worker is not available on iOS, which says your app still can’t benefit from PWA, but the good news is even if the working environment hasn’t support yet, your app will fallback to the traditional caching strategy. Your app still works without modifying codes!</p>\n<h1 id=\"PWA-vs-Native\"><a href=\"#PWA-vs-Native\" class=\"headerlink\" title=\"PWA vs Native\"></a>PWA vs Native</h1><p>PWA is an improvement to the web and user experience, making it more like an native app, but that doesn’t mean it’s going to replace native app or against native app on par.</p>\n<p>PWA is just a collection of features and it’s not a platform like native. A fair fight should be “browser vs native”.</p>\n<p>If you take a look at <a href=\"https://whatwebcando.today/\">what web can do</a>, you might think “cool I can finally develop something like native does on mobile!” However the current compatibility on iOS still has long way to go, if you take a look on those API closely, you will find out most of them only available on Chrome on Android.</p>\n<h1 id=\"How-does-it-work\"><a href=\"#How-does-it-work\" class=\"headerlink\" title=\"How does it work?\"></a>How does it work?</h1><p>Please check <a href=\"https://github.com/zushenyan/pwa-test\">pwa-test</a> written by me. It’s a simplified version of <a href=\"https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0\">Your Frist Progressive Web App</a>.</p>\n<p>I don’t want to write every step down here, because, first, I am lazy, and more important, I think <a href=\"https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0\">Your Frist Progressive Web App</a> has done a great job on tutoring. I believe it already provides all the details you need.</p>\n<p>However there are still some pitfalls when developing with service worker, in order to save your time, <a href=\"https://gist.github.com/Rich-Harris/fd6c3c73e6e707e312d7c5d7d0f3b2f9\">here</a> you go.</p>\n<h1 id=\"Higher-level-API\"><a href=\"#Higher-level-API\" class=\"headerlink\" title=\"Higher level API\"></a>Higher level API</h1><p>After read all the tutorials, you found you have to write many codes to achieve PWA, but… you are a lazy programmer like me, and wondering “where’s the higher level API candy?” Well, people heard you. Here comes some candies!</p>\n<ul>\n<li><a href=\"https://github.com/GoogleChrome/sw-toolbox\">sw-toolbox</a> - a collection of service worker tools to help developing offline web app.</li>\n<li><a href=\"https://github.com/GoogleChrome/sw-precache\">sw-precache</a> - a helper for integrating service worker with building chain like gulp.</li>\n<li><a href=\"https://github.com/NekR/offline-plugin\">webpack-offline-plugin</a> - a webpack plugin for building offline web app.</li>\n</ul>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"http://blog.ionic.io/what-is-a-progressive-web-app/\">What is a progressive web app</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/\">A Beginner’s Guide To Progressive Web Apps</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0\">Your Frist Progressive Web App</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/push-notifications/index.html?index=../../index#6\">Push notifications</a></li>\n<li><a href=\"https://www.google.com.tw/search?safe=off&q=pwa+vs+native&oq=pwa+vs+&gs_l=serp.3.1.0l7j0i10k1j0l2.44121.47105.0.48621.15.11.4.0.0.0.144.882.10j1.11.0....0...1c.1.64.serp..0.13.779.0..0i22i30k1.fl5zTNkR8kI\">Why “Progressive Web Apps vs. native” is the wrong question to ask</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-that\"><a href=\"#What-is-that\" class=\"headerlink\" title=\"What is that?\"></a>What is that?</h1><p>Buzz word time! Progressive Web App (will be written as PWA in the following post), promoted by Google, basically means delivering user an app-like web app. It concludes the following features:</p>\n<ul>\n<li>Responsive - available on many devices: desktop, phone and tablet.</li>\n<li>Reliable - accessible even if the network is down.</li>\n<li>Fresh - always up-to-date, updating without getting through app store.</li>\n<li>Safe - can only be accessed via HTTPS.</li>\n<li>Discoverable - unlike native app, since it’s an web app, content should be discoverable by the search engines.</li>\n<li>Engaging - PWA can be access like an native app. You can access them by adding them to home screen, and provide them an seamless full screen experience.</li>\n</ul>\n<p>but that sounds very…unclear. We want to know how it was made right. Here is the <em>heart of Progressive Web App</em>:</p>\n<ul>\n<li><a href=\"https://w3c.github.io/ServiceWorker/\">Service Worker</a> - the first pillar of PWA. It’s an API that hijacks networking request, and responds browser with additional messages.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage\">Cache Storage</a> - the second pillar of PWA. A member of Web Storage. An API developer often use with Service Worker. It caches request as key and responds with cached value if corresponding key is found.</li>\n<li><a href=\"https://w3c.github.io/manifest/\">Web App Manifest</a> - a JSON-based manifest file provides ability to set things like app icon name or display mode and many other things.</li>\n</ul>\n<h1 id=\"Platform-support\"><a href=\"#Platform-support\" class=\"headerlink\" title=\"Platform support\"></a>Platform support</h1><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/serviceworker\">service worker API on MDN</a></p>\n<p>In the current status, service worker is not available on iOS, which says your app still can’t benefit from PWA, but the good news is even if the working environment hasn’t support yet, your app will fallback to the traditional caching strategy. Your app still works without modifying codes!</p>\n<h1 id=\"PWA-vs-Native\"><a href=\"#PWA-vs-Native\" class=\"headerlink\" title=\"PWA vs Native\"></a>PWA vs Native</h1><p>PWA is an improvement to the web and user experience, making it more like an native app, but that doesn’t mean it’s going to replace native app or against native app on par.</p>\n<p>PWA is just a collection of features and it’s not a platform like native. A fair fight should be “browser vs native”.</p>\n<p>If you take a look at <a href=\"https://whatwebcando.today/\">what web can do</a>, you might think “cool I can finally develop something like native does on mobile!” However the current compatibility on iOS still has long way to go, if you take a look on those API closely, you will find out most of them only available on Chrome on Android.</p>\n<h1 id=\"How-does-it-work\"><a href=\"#How-does-it-work\" class=\"headerlink\" title=\"How does it work?\"></a>How does it work?</h1><p>Please check <a href=\"https://github.com/zushenyan/pwa-test\">pwa-test</a> written by me. It’s a simplified version of <a href=\"https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0\">Your Frist Progressive Web App</a>.</p>\n<p>I don’t want to write every step down here, because, first, I am lazy, and more important, I think <a href=\"https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0\">Your Frist Progressive Web App</a> has done a great job on tutoring. I believe it already provides all the details you need.</p>\n<p>However there are still some pitfalls when developing with service worker, in order to save your time, <a href=\"https://gist.github.com/Rich-Harris/fd6c3c73e6e707e312d7c5d7d0f3b2f9\">here</a> you go.</p>\n<h1 id=\"Higher-level-API\"><a href=\"#Higher-level-API\" class=\"headerlink\" title=\"Higher level API\"></a>Higher level API</h1><p>After read all the tutorials, you found you have to write many codes to achieve PWA, but… you are a lazy programmer like me, and wondering “where’s the higher level API candy?” Well, people heard you. Here comes some candies!</p>\n<ul>\n<li><a href=\"https://github.com/GoogleChrome/sw-toolbox\">sw-toolbox</a> - a collection of service worker tools to help developing offline web app.</li>\n<li><a href=\"https://github.com/GoogleChrome/sw-precache\">sw-precache</a> - a helper for integrating service worker with building chain like gulp.</li>\n<li><a href=\"https://github.com/NekR/offline-plugin\">webpack-offline-plugin</a> - a webpack plugin for building offline web app.</li>\n</ul>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"http://blog.ionic.io/what-is-a-progressive-web-app/\">What is a progressive web app</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/\">A Beginner’s Guide To Progressive Web Apps</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/your-first-pwapp/#0\">Your Frist Progressive Web App</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/push-notifications/index.html?index=../../index#6\">Push notifications</a></li>\n<li><a href=\"https://www.google.com.tw/search?safe=off&q=pwa+vs+native&oq=pwa+vs+&gs_l=serp.3.1.0l7j0i10k1j0l2.44121.47105.0.48621.15.11.4.0.0.0.144.882.10j1.11.0....0...1c.1.64.serp..0.13.779.0..0i22i30k1.fl5zTNkR8kI\">Why “Progressive Web Apps vs. native” is the wrong question to ask</a></li>\n</ul>\n"},{"title":"I love the concept of 'anything can be log'","date":"2017-03-06T16:56:03.000Z","_content":"\nA while ago I read [this](https://medium.com/poga/%E8%90%AC%E4%BA%8B%E8%90%AC%E7%89%A9%E7%9A%86%E6%98%AF-log-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E4%B9%9F%E4%BE%86%E9%BB%9E%E7%A7%91%E6%99%AE-caf3029359f8#.t37drl8hz) (chinese) article talking about how people build complicated architecture with log approach, back to then I didn't quite get it, but it did scratched something - something I am really longing with. A insight for better software architecture.\n\nThe article mentions that log is used in almost everywhere, because log has the following features:\n\n**Timestamp** - a log has timestamp describing when happens what.\n\n**Sequence** - since every log has a timestamp, we can line it up, make it an array. In that way you can see a timeline of events describing what happens in a system.\n\n**Describing Actions** - instead of really executing something, log just describes what is going to do.\n\nLog has been used in many domains like version control, database, replication, event stream and many other aspects for solving complicated problems.\n\nImagine we have a database, and it is writing something into disk, and suddenly computer crashed. Here comes the problem - how do we restore database to the point before crash and let it continue its job?\n\nThe answer is log, it writes log first, and then, really executing the action. Since we have a **log that describing the system state**, we can resume the state and make it continue its job.\n\nLog can even be used in replication as well. Syncing data among all machines/process is not an easy thing. How do you keep data on all machines identical while sharing? Move physical data? That would be inefficient because physical data is large and plus network bandwidth issue. How about sending log instead? Log is relatively small and actually its just an **history of state**, instead of sending physical data, we send a series actions that should be carried out, and by following the same trial, state should be the same in the end.\n\nAnd what's the point when it comes to front-end? Today's front-end is way more interactive than 15 years ago. Lots of actions and events come and go in our application. Trendy developers probably have heard `Redux` - a central event management implementation for resolving complicated events.\n\nOne of a reason that really makes `Redux` great is, yes, log. In `Redux` we deliver log first, and delay the **action (side effect / mutation)** afterward.\n\n```js\nconst fetchDataLoadingAction = () => {\n  type: \"FETCH_DATA_LOADING\"\n};\n\nconst fetchDataDonesAction = (data) => {\n  type: \"FETCH_DATA_DONE\",\n  payload: data\n};\n\nconst fetchDataFailAction = (err) => {\n  type: \"FETCH_DATA_FAIL\",\n  payload: err\n};\n```\n\nDespite there are **Action** in those names (a common naming convention for redux), those are actually logs describing an action, and if we want to execute an action, we can wrap it in a function\n\n```js\n\n// here we use redux-thunk for handling simple async or combining serious of actions together.\nconst fetchData = () => (dispatch) => {\n  dispatch(fetchDataLoadingAction());\n  fetchDataAjax()\n    .then(data => dispatch(fetchDataDoneAction(data)))\n    .catch(err => dispatch(fetchDataFailAction(err)));\n};\n\n// keeping new state in our reducer\nconst INIT_STATE = {\n  fetchState: \"\",\n  data:       {}\n};\nconst reducer = (state = INIT_STATE, action) => {\n  switch(action.type){\n    case \"FETCH_DATA_LOADING\": {\n      return {...state, fetchState: \"loading\"};\n    }\n    case \"FETCH_DATA_DONE\": {\n      return {fetchState: \"success\", data: action.payload};\n    }\n    case \"FETCH_DATA_FAIL\": {\n      return {fetchState: \"fail\", data: action.payload};\n    }\n    default: return state;\n  }\n};\n\n// later...\nstore.dispatch(fetchData());\n\n// if you have installed redux-logger you will see something similar to this\n// action: { type: \"FETCH_DATA_LOADING\" }\n// state: { fetchState: \"loading\", data: {} }\n// ...\n// action: { type: \"FETCH_DATA_DONE\", payload: \"foobar\" }\n// state: { fetchState: \"success\", data: \"foobar\" }\n```\n\nBy using log, developers can manipulate the timeline of an application, performing actions like undo and redo or jump to a specific time of state for debugging. This is the beauty of log.\n","source":"_posts/2017-03-06-I-love-the-concept-of-anything-can-be-log.md","raw":"---\ntitle: I love the concept of 'anything can be log'\ndate: 2017-03-06 08:56:03\ntags: [meta, javascript, redux, architecture]\n---\n\nA while ago I read [this](https://medium.com/poga/%E8%90%AC%E4%BA%8B%E8%90%AC%E7%89%A9%E7%9A%86%E6%98%AF-log-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E4%B9%9F%E4%BE%86%E9%BB%9E%E7%A7%91%E6%99%AE-caf3029359f8#.t37drl8hz) (chinese) article talking about how people build complicated architecture with log approach, back to then I didn't quite get it, but it did scratched something - something I am really longing with. A insight for better software architecture.\n\nThe article mentions that log is used in almost everywhere, because log has the following features:\n\n**Timestamp** - a log has timestamp describing when happens what.\n\n**Sequence** - since every log has a timestamp, we can line it up, make it an array. In that way you can see a timeline of events describing what happens in a system.\n\n**Describing Actions** - instead of really executing something, log just describes what is going to do.\n\nLog has been used in many domains like version control, database, replication, event stream and many other aspects for solving complicated problems.\n\nImagine we have a database, and it is writing something into disk, and suddenly computer crashed. Here comes the problem - how do we restore database to the point before crash and let it continue its job?\n\nThe answer is log, it writes log first, and then, really executing the action. Since we have a **log that describing the system state**, we can resume the state and make it continue its job.\n\nLog can even be used in replication as well. Syncing data among all machines/process is not an easy thing. How do you keep data on all machines identical while sharing? Move physical data? That would be inefficient because physical data is large and plus network bandwidth issue. How about sending log instead? Log is relatively small and actually its just an **history of state**, instead of sending physical data, we send a series actions that should be carried out, and by following the same trial, state should be the same in the end.\n\nAnd what's the point when it comes to front-end? Today's front-end is way more interactive than 15 years ago. Lots of actions and events come and go in our application. Trendy developers probably have heard `Redux` - a central event management implementation for resolving complicated events.\n\nOne of a reason that really makes `Redux` great is, yes, log. In `Redux` we deliver log first, and delay the **action (side effect / mutation)** afterward.\n\n```js\nconst fetchDataLoadingAction = () => {\n  type: \"FETCH_DATA_LOADING\"\n};\n\nconst fetchDataDonesAction = (data) => {\n  type: \"FETCH_DATA_DONE\",\n  payload: data\n};\n\nconst fetchDataFailAction = (err) => {\n  type: \"FETCH_DATA_FAIL\",\n  payload: err\n};\n```\n\nDespite there are **Action** in those names (a common naming convention for redux), those are actually logs describing an action, and if we want to execute an action, we can wrap it in a function\n\n```js\n\n// here we use redux-thunk for handling simple async or combining serious of actions together.\nconst fetchData = () => (dispatch) => {\n  dispatch(fetchDataLoadingAction());\n  fetchDataAjax()\n    .then(data => dispatch(fetchDataDoneAction(data)))\n    .catch(err => dispatch(fetchDataFailAction(err)));\n};\n\n// keeping new state in our reducer\nconst INIT_STATE = {\n  fetchState: \"\",\n  data:       {}\n};\nconst reducer = (state = INIT_STATE, action) => {\n  switch(action.type){\n    case \"FETCH_DATA_LOADING\": {\n      return {...state, fetchState: \"loading\"};\n    }\n    case \"FETCH_DATA_DONE\": {\n      return {fetchState: \"success\", data: action.payload};\n    }\n    case \"FETCH_DATA_FAIL\": {\n      return {fetchState: \"fail\", data: action.payload};\n    }\n    default: return state;\n  }\n};\n\n// later...\nstore.dispatch(fetchData());\n\n// if you have installed redux-logger you will see something similar to this\n// action: { type: \"FETCH_DATA_LOADING\" }\n// state: { fetchState: \"loading\", data: {} }\n// ...\n// action: { type: \"FETCH_DATA_DONE\", payload: \"foobar\" }\n// state: { fetchState: \"success\", data: \"foobar\" }\n```\n\nBy using log, developers can manipulate the timeline of an application, performing actions like undo and redo or jump to a specific time of state for debugging. This is the beauty of log.\n","slug":"2017-03-06-I-love-the-concept-of-anything-can-be-log","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol88000uvfvgdv3te5u4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>A while ago I read <a href=\"https://medium.com/poga/%E8%90%AC%E4%BA%8B%E8%90%AC%E7%89%A9%E7%9A%86%E6%98%AF-log-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E4%B9%9F%E4%BE%86%E9%BB%9E%E7%A7%91%E6%99%AE-caf3029359f8#.t37drl8hz\">this</a> (chinese) article talking about how people build complicated architecture with log approach, back to then I didn’t quite get it, but it did scratched something - something I am really longing with. A insight for better software architecture.</p>\n<p>The article mentions that log is used in almost everywhere, because log has the following features:</p>\n<p><strong>Timestamp</strong> - a log has timestamp describing when happens what.</p>\n<p><strong>Sequence</strong> - since every log has a timestamp, we can line it up, make it an array. In that way you can see a timeline of events describing what happens in a system.</p>\n<p><strong>Describing Actions</strong> - instead of really executing something, log just describes what is going to do.</p>\n<p>Log has been used in many domains like version control, database, replication, event stream and many other aspects for solving complicated problems.</p>\n<p>Imagine we have a database, and it is writing something into disk, and suddenly computer crashed. Here comes the problem - how do we restore database to the point before crash and let it continue its job?</p>\n<p>The answer is log, it writes log first, and then, really executing the action. Since we have a <strong>log that describing the system state</strong>, we can resume the state and make it continue its job.</p>\n<p>Log can even be used in replication as well. Syncing data among all machines&#x2F;process is not an easy thing. How do you keep data on all machines identical while sharing? Move physical data? That would be inefficient because physical data is large and plus network bandwidth issue. How about sending log instead? Log is relatively small and actually its just an <strong>history of state</strong>, instead of sending physical data, we send a series actions that should be carried out, and by following the same trial, state should be the same in the end.</p>\n<p>And what’s the point when it comes to front-end? Today’s front-end is way more interactive than 15 years ago. Lots of actions and events come and go in our application. Trendy developers probably have heard <code>Redux</code> - a central event management implementation for resolving complicated events.</p>\n<p>One of a reason that really makes <code>Redux</code> great is, yes, log. In <code>Redux</code> we deliver log first, and delay the <strong>action (side effect &#x2F; mutation)</strong> afterward.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchDataLoadingAction</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;FETCH_DATA_LOADING&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchDataDonesAction</span> = (<span class=\"params\">data</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;FETCH_DATA_DONE&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">payload</span>: data</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchDataFailAction</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;FETCH_DATA_FAIL&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">payload</span>: err</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Despite there are <strong>Action</strong> in those names (a common naming convention for redux), those are actually logs describing an action, and if we want to execute an action, we can wrap it in a function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// here we use redux-thunk for handling simple async or combining serious of actions together.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchData</span> = (<span class=\"params\"></span>) =&gt; <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchDataLoadingAction</span>());</span><br><span class=\"line\">  <span class=\"title function_\">fetchDataAjax</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchDataDoneAction</span>(data)))</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchDataFailAction</span>(err)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// keeping new state in our reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">INIT_STATE</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">fetchState</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>:       &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">state = INIT_STATE, action</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;FETCH_DATA_LOADING&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;...state, <span class=\"attr\">fetchState</span>: <span class=\"string\">&quot;loading&quot;</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;FETCH_DATA_DONE&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">fetchState</span>: <span class=\"string\">&quot;success&quot;</span>, <span class=\"attr\">data</span>: action.<span class=\"property\">payload</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;FETCH_DATA_FAIL&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">fetchState</span>: <span class=\"string\">&quot;fail&quot;</span>, <span class=\"attr\">data</span>: action.<span class=\"property\">payload</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">default</span>: <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// later...</span></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchData</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if you have installed redux-logger you will see something similar to this</span></span><br><span class=\"line\"><span class=\"comment\">// action: &#123; type: &quot;FETCH_DATA_LOADING&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// state: &#123; fetchState: &quot;loading&quot;, data: &#123;&#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// action: &#123; type: &quot;FETCH_DATA_DONE&quot;, payload: &quot;foobar&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// state: &#123; fetchState: &quot;success&quot;, data: &quot;foobar&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>By using log, developers can manipulate the timeline of an application, performing actions like undo and redo or jump to a specific time of state for debugging. This is the beauty of log.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>A while ago I read <a href=\"https://medium.com/poga/%E8%90%AC%E4%BA%8B%E8%90%AC%E7%89%A9%E7%9A%86%E6%98%AF-log-%E7%B3%BB%E7%B5%B1%E6%9E%B6%E6%A7%8B%E4%B9%9F%E4%BE%86%E9%BB%9E%E7%A7%91%E6%99%AE-caf3029359f8#.t37drl8hz\">this</a> (chinese) article talking about how people build complicated architecture with log approach, back to then I didn’t quite get it, but it did scratched something - something I am really longing with. A insight for better software architecture.</p>\n<p>The article mentions that log is used in almost everywhere, because log has the following features:</p>\n<p><strong>Timestamp</strong> - a log has timestamp describing when happens what.</p>\n<p><strong>Sequence</strong> - since every log has a timestamp, we can line it up, make it an array. In that way you can see a timeline of events describing what happens in a system.</p>\n<p><strong>Describing Actions</strong> - instead of really executing something, log just describes what is going to do.</p>\n<p>Log has been used in many domains like version control, database, replication, event stream and many other aspects for solving complicated problems.</p>\n<p>Imagine we have a database, and it is writing something into disk, and suddenly computer crashed. Here comes the problem - how do we restore database to the point before crash and let it continue its job?</p>\n<p>The answer is log, it writes log first, and then, really executing the action. Since we have a <strong>log that describing the system state</strong>, we can resume the state and make it continue its job.</p>\n<p>Log can even be used in replication as well. Syncing data among all machines&#x2F;process is not an easy thing. How do you keep data on all machines identical while sharing? Move physical data? That would be inefficient because physical data is large and plus network bandwidth issue. How about sending log instead? Log is relatively small and actually its just an <strong>history of state</strong>, instead of sending physical data, we send a series actions that should be carried out, and by following the same trial, state should be the same in the end.</p>\n<p>And what’s the point when it comes to front-end? Today’s front-end is way more interactive than 15 years ago. Lots of actions and events come and go in our application. Trendy developers probably have heard <code>Redux</code> - a central event management implementation for resolving complicated events.</p>\n<p>One of a reason that really makes <code>Redux</code> great is, yes, log. In <code>Redux</code> we deliver log first, and delay the <strong>action (side effect &#x2F; mutation)</strong> afterward.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchDataLoadingAction</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;FETCH_DATA_LOADING&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchDataDonesAction</span> = (<span class=\"params\">data</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;FETCH_DATA_DONE&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">payload</span>: data</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchDataFailAction</span> = (<span class=\"params\">err</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;FETCH_DATA_FAIL&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">payload</span>: err</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Despite there are <strong>Action</strong> in those names (a common naming convention for redux), those are actually logs describing an action, and if we want to execute an action, we can wrap it in a function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// here we use redux-thunk for handling simple async or combining serious of actions together.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchData</span> = (<span class=\"params\"></span>) =&gt; <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchDataLoadingAction</span>());</span><br><span class=\"line\">  <span class=\"title function_\">fetchDataAjax</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchDataDoneAction</span>(data)))</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchDataFailAction</span>(err)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// keeping new state in our reducer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">INIT_STATE</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">fetchState</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>:       &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> = (<span class=\"params\">state = INIT_STATE, action</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;FETCH_DATA_LOADING&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;...state, <span class=\"attr\">fetchState</span>: <span class=\"string\">&quot;loading&quot;</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;FETCH_DATA_DONE&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">fetchState</span>: <span class=\"string\">&quot;success&quot;</span>, <span class=\"attr\">data</span>: action.<span class=\"property\">payload</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;FETCH_DATA_FAIL&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;<span class=\"attr\">fetchState</span>: <span class=\"string\">&quot;fail&quot;</span>, <span class=\"attr\">data</span>: action.<span class=\"property\">payload</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">default</span>: <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// later...</span></span><br><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchData</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if you have installed redux-logger you will see something similar to this</span></span><br><span class=\"line\"><span class=\"comment\">// action: &#123; type: &quot;FETCH_DATA_LOADING&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// state: &#123; fetchState: &quot;loading&quot;, data: &#123;&#125; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// action: &#123; type: &quot;FETCH_DATA_DONE&quot;, payload: &quot;foobar&quot; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// state: &#123; fetchState: &quot;success&quot;, data: &quot;foobar&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>By using log, developers can manipulate the timeline of an application, performing actions like undo and redo or jump to a specific time of state for debugging. This is the beauty of log.</p>\n"},{"title":"How to Choose a Lib/Framework","date":"2017-02-09T02:57:05.000Z","_content":"\nChoosing a tool is not an easy thing, especially in today's front-end domain, the cycle of tools is like light speed. Developers never catch up.\n\n> Learn as many tools(frameworks, libraries) as you can.\n\nThey said. I like the spirit, but in reality, your time is limited, you have to workout, wash clothes, pay debt and blah blah, so I think the appropriate quote should be\n\n> Learn things you really need.\n\nJust learn something that is really worth you put time in, spot things that aren't.\n\nI am absolutely not a pro in picking tools, but I still want to share some ideas when evaluating them.\n\n### Does the tool you currently use solve the problem? Does it solve elegantly?\n\nBy elegantly, I mean easy to maintain.\n\nSome solutions are really simple and easy to use, but as program grows, it will no longer be easy to maintain.\n\nIn that case, it's necessary to switch tool.\n\nThe closest example I think it's [callback hell in JavaScript](http://callbackhell.com/).\n\n### Innovative & General Concept\n\nDo you think the tool is innovative enough to be a game changer or next rock star? Any criticism on it?\n\nDo we already have a similar concept before? Or just another old trick with new skin?\n\nIf this is an general concept that exist in textbook, then in my opinion, it is worth learning.\n\nBy general concept, if you want examples, I mean something like Functional Programming(lodash, ramda), or Functional Reactive Programming(Rxjs, Bacon).\n\nEven if you leave JavaScript for an new journey, they still exist as another implementation or as an abstraction form.\n\nSomething that can be carried around is more worth time investment.\n\n### Is it an lib or framework?\n\nLibraries tend to solve problems in a particular aspect. They don't solve the whole puzzle, instead, only specializing in a small domain.\n\nFrameworks tend to provide a set of solutions for problems from many aspects. They are more suitable in particular scenarios and good for develop groups which want to reduce the learning curve for fresh crew.\n\nTools considered as library are often more composable with other libraries, which means they are highly independent and have been designed as minimum unit in that language as possible (like class or function).\n\n### Active Community\n\nActive community means more discussion, issue tickets, tutorials.\n\nIf you run into an issue you should find a solution in minimum effort.\n\n### Good Documents & Examples\n\nEveryone loves well structured, up-to-dated documents with rich examples, right?\n\n### Does it have tests?\n\nTests are about quality and stability. I don't believe lib/framework without tests.\n\n### Backed by who?\n\nTools that are backed by large company should be more likely to continue maintaining since they have more resource, and that means the project is less likely to be abandoned.\n\n### Reference\n\n* [Hype Driven Development](https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22#.li3y15euo)\n","source":"_posts/2017-02-08-How-to-Choose-a-lib-framework.md","raw":"---\ntitle: How to Choose a Lib/Framework\ndate: 2017-02-08 18:57:05\ntags: [meta, frontend]\n---\n\nChoosing a tool is not an easy thing, especially in today's front-end domain, the cycle of tools is like light speed. Developers never catch up.\n\n> Learn as many tools(frameworks, libraries) as you can.\n\nThey said. I like the spirit, but in reality, your time is limited, you have to workout, wash clothes, pay debt and blah blah, so I think the appropriate quote should be\n\n> Learn things you really need.\n\nJust learn something that is really worth you put time in, spot things that aren't.\n\nI am absolutely not a pro in picking tools, but I still want to share some ideas when evaluating them.\n\n### Does the tool you currently use solve the problem? Does it solve elegantly?\n\nBy elegantly, I mean easy to maintain.\n\nSome solutions are really simple and easy to use, but as program grows, it will no longer be easy to maintain.\n\nIn that case, it's necessary to switch tool.\n\nThe closest example I think it's [callback hell in JavaScript](http://callbackhell.com/).\n\n### Innovative & General Concept\n\nDo you think the tool is innovative enough to be a game changer or next rock star? Any criticism on it?\n\nDo we already have a similar concept before? Or just another old trick with new skin?\n\nIf this is an general concept that exist in textbook, then in my opinion, it is worth learning.\n\nBy general concept, if you want examples, I mean something like Functional Programming(lodash, ramda), or Functional Reactive Programming(Rxjs, Bacon).\n\nEven if you leave JavaScript for an new journey, they still exist as another implementation or as an abstraction form.\n\nSomething that can be carried around is more worth time investment.\n\n### Is it an lib or framework?\n\nLibraries tend to solve problems in a particular aspect. They don't solve the whole puzzle, instead, only specializing in a small domain.\n\nFrameworks tend to provide a set of solutions for problems from many aspects. They are more suitable in particular scenarios and good for develop groups which want to reduce the learning curve for fresh crew.\n\nTools considered as library are often more composable with other libraries, which means they are highly independent and have been designed as minimum unit in that language as possible (like class or function).\n\n### Active Community\n\nActive community means more discussion, issue tickets, tutorials.\n\nIf you run into an issue you should find a solution in minimum effort.\n\n### Good Documents & Examples\n\nEveryone loves well structured, up-to-dated documents with rich examples, right?\n\n### Does it have tests?\n\nTests are about quality and stability. I don't believe lib/framework without tests.\n\n### Backed by who?\n\nTools that are backed by large company should be more likely to continue maintaining since they have more resource, and that means the project is less likely to be abandoned.\n\n### Reference\n\n* [Hype Driven Development](https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22#.li3y15euo)\n","slug":"2017-02-08-How-to-Choose-a-lib-framework","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol89000wvfvg6l1pbrec","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Choosing a tool is not an easy thing, especially in today’s front-end domain, the cycle of tools is like light speed. Developers never catch up.</p>\n<blockquote>\n<p>Learn as many tools(frameworks, libraries) as you can.</p>\n</blockquote>\n<p>They said. I like the spirit, but in reality, your time is limited, you have to workout, wash clothes, pay debt and blah blah, so I think the appropriate quote should be</p>\n<blockquote>\n<p>Learn things you really need.</p>\n</blockquote>\n<p>Just learn something that is really worth you put time in, spot things that aren’t.</p>\n<p>I am absolutely not a pro in picking tools, but I still want to share some ideas when evaluating them.</p>\n<h3 id=\"Does-the-tool-you-currently-use-solve-the-problem-Does-it-solve-elegantly\"><a href=\"#Does-the-tool-you-currently-use-solve-the-problem-Does-it-solve-elegantly\" class=\"headerlink\" title=\"Does the tool you currently use solve the problem? Does it solve elegantly?\"></a>Does the tool you currently use solve the problem? Does it solve elegantly?</h3><p>By elegantly, I mean easy to maintain.</p>\n<p>Some solutions are really simple and easy to use, but as program grows, it will no longer be easy to maintain.</p>\n<p>In that case, it’s necessary to switch tool.</p>\n<p>The closest example I think it’s <a href=\"http://callbackhell.com/\">callback hell in JavaScript</a>.</p>\n<h3 id=\"Innovative-General-Concept\"><a href=\"#Innovative-General-Concept\" class=\"headerlink\" title=\"Innovative &amp; General Concept\"></a>Innovative &amp; General Concept</h3><p>Do you think the tool is innovative enough to be a game changer or next rock star? Any criticism on it?</p>\n<p>Do we already have a similar concept before? Or just another old trick with new skin?</p>\n<p>If this is an general concept that exist in textbook, then in my opinion, it is worth learning.</p>\n<p>By general concept, if you want examples, I mean something like Functional Programming(lodash, ramda), or Functional Reactive Programming(Rxjs, Bacon).</p>\n<p>Even if you leave JavaScript for an new journey, they still exist as another implementation or as an abstraction form.</p>\n<p>Something that can be carried around is more worth time investment.</p>\n<h3 id=\"Is-it-an-lib-or-framework\"><a href=\"#Is-it-an-lib-or-framework\" class=\"headerlink\" title=\"Is it an lib or framework?\"></a>Is it an lib or framework?</h3><p>Libraries tend to solve problems in a particular aspect. They don’t solve the whole puzzle, instead, only specializing in a small domain.</p>\n<p>Frameworks tend to provide a set of solutions for problems from many aspects. They are more suitable in particular scenarios and good for develop groups which want to reduce the learning curve for fresh crew.</p>\n<p>Tools considered as library are often more composable with other libraries, which means they are highly independent and have been designed as minimum unit in that language as possible (like class or function).</p>\n<h3 id=\"Active-Community\"><a href=\"#Active-Community\" class=\"headerlink\" title=\"Active Community\"></a>Active Community</h3><p>Active community means more discussion, issue tickets, tutorials.</p>\n<p>If you run into an issue you should find a solution in minimum effort.</p>\n<h3 id=\"Good-Documents-Examples\"><a href=\"#Good-Documents-Examples\" class=\"headerlink\" title=\"Good Documents &amp; Examples\"></a>Good Documents &amp; Examples</h3><p>Everyone loves well structured, up-to-dated documents with rich examples, right?</p>\n<h3 id=\"Does-it-have-tests\"><a href=\"#Does-it-have-tests\" class=\"headerlink\" title=\"Does it have tests?\"></a>Does it have tests?</h3><p>Tests are about quality and stability. I don’t believe lib&#x2F;framework without tests.</p>\n<h3 id=\"Backed-by-who\"><a href=\"#Backed-by-who\" class=\"headerlink\" title=\"Backed by who?\"></a>Backed by who?</h3><p>Tools that are backed by large company should be more likely to continue maintaining since they have more resource, and that means the project is less likely to be abandoned.</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ul>\n<li><a href=\"https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22#.li3y15euo\">Hype Driven Development</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Choosing a tool is not an easy thing, especially in today’s front-end domain, the cycle of tools is like light speed. Developers never catch up.</p>\n<blockquote>\n<p>Learn as many tools(frameworks, libraries) as you can.</p>\n</blockquote>\n<p>They said. I like the spirit, but in reality, your time is limited, you have to workout, wash clothes, pay debt and blah blah, so I think the appropriate quote should be</p>\n<blockquote>\n<p>Learn things you really need.</p>\n</blockquote>\n<p>Just learn something that is really worth you put time in, spot things that aren’t.</p>\n<p>I am absolutely not a pro in picking tools, but I still want to share some ideas when evaluating them.</p>\n<h3 id=\"Does-the-tool-you-currently-use-solve-the-problem-Does-it-solve-elegantly\"><a href=\"#Does-the-tool-you-currently-use-solve-the-problem-Does-it-solve-elegantly\" class=\"headerlink\" title=\"Does the tool you currently use solve the problem? Does it solve elegantly?\"></a>Does the tool you currently use solve the problem? Does it solve elegantly?</h3><p>By elegantly, I mean easy to maintain.</p>\n<p>Some solutions are really simple and easy to use, but as program grows, it will no longer be easy to maintain.</p>\n<p>In that case, it’s necessary to switch tool.</p>\n<p>The closest example I think it’s <a href=\"http://callbackhell.com/\">callback hell in JavaScript</a>.</p>\n<h3 id=\"Innovative-General-Concept\"><a href=\"#Innovative-General-Concept\" class=\"headerlink\" title=\"Innovative &amp; General Concept\"></a>Innovative &amp; General Concept</h3><p>Do you think the tool is innovative enough to be a game changer or next rock star? Any criticism on it?</p>\n<p>Do we already have a similar concept before? Or just another old trick with new skin?</p>\n<p>If this is an general concept that exist in textbook, then in my opinion, it is worth learning.</p>\n<p>By general concept, if you want examples, I mean something like Functional Programming(lodash, ramda), or Functional Reactive Programming(Rxjs, Bacon).</p>\n<p>Even if you leave JavaScript for an new journey, they still exist as another implementation or as an abstraction form.</p>\n<p>Something that can be carried around is more worth time investment.</p>\n<h3 id=\"Is-it-an-lib-or-framework\"><a href=\"#Is-it-an-lib-or-framework\" class=\"headerlink\" title=\"Is it an lib or framework?\"></a>Is it an lib or framework?</h3><p>Libraries tend to solve problems in a particular aspect. They don’t solve the whole puzzle, instead, only specializing in a small domain.</p>\n<p>Frameworks tend to provide a set of solutions for problems from many aspects. They are more suitable in particular scenarios and good for develop groups which want to reduce the learning curve for fresh crew.</p>\n<p>Tools considered as library are often more composable with other libraries, which means they are highly independent and have been designed as minimum unit in that language as possible (like class or function).</p>\n<h3 id=\"Active-Community\"><a href=\"#Active-Community\" class=\"headerlink\" title=\"Active Community\"></a>Active Community</h3><p>Active community means more discussion, issue tickets, tutorials.</p>\n<p>If you run into an issue you should find a solution in minimum effort.</p>\n<h3 id=\"Good-Documents-Examples\"><a href=\"#Good-Documents-Examples\" class=\"headerlink\" title=\"Good Documents &amp; Examples\"></a>Good Documents &amp; Examples</h3><p>Everyone loves well structured, up-to-dated documents with rich examples, right?</p>\n<h3 id=\"Does-it-have-tests\"><a href=\"#Does-it-have-tests\" class=\"headerlink\" title=\"Does it have tests?\"></a>Does it have tests?</h3><p>Tests are about quality and stability. I don’t believe lib&#x2F;framework without tests.</p>\n<h3 id=\"Backed-by-who\"><a href=\"#Backed-by-who\" class=\"headerlink\" title=\"Backed by who?\"></a>Backed by who?</h3><p>Tools that are backed by large company should be more likely to continue maintaining since they have more resource, and that means the project is less likely to be abandoned.</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ul>\n<li><a href=\"https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22#.li3y15euo\">Hype Driven Development</a></li>\n</ul>\n"},{"title":"A Learning Note of Functional Programming Part 2 - Some Common Terminology","date":"2017-04-18T06:28:59.000Z","_content":"\n# Preface\nThis is another note for introducing some common terms or words that you may see in functional programming world.\n\nExamples here will be implemented in either vanilla JS or [Ramda](http://ramdajs.com/) - a functional library that focuses on functional programming than other general-purpose same purpose libraries.\n\n# Map\n`Map` is a function which transforms data from one to any type (including itself):\n\n```js\n// array of number to array of number (transform to itself)\n// [2,3,4]\n[1,2,3].map(x => x + 1);\n\n// array of number to array of obj (transform to other types)\n// [\n//   { num: 1 },\n//   { num: 2 },\n//   { num: 3 }\n// ]\n[1,2,3].map(x => ({ num: x }));\n```\n\n# Filter\n`Filter` is a function which takes a **predicate** (a function takes an argument and return a boolean) and an list and finally returns an list:\n\n```js\n// array of number to array of number\n// [2,4]\n[1,2,3,4].filter(x => x % 2 === 0);\n```\n\n# Reduce\n`Reduce` takes a function, an initial value and transforms data to any type (including itself):\n\n```js\n// array of number to nunber\n// 10\n[1,2,3,4].reduce(\n  (acc, value) => {\n    acc += value;\n    return acc;\n  }, 0\n);\n```\n\n# Transduce\nYou might find that you can implement `map` and `filter` in `reduce`:\n\n```js\nconst map = (f, arr) => {\n  arr.reduce((acc, value) => {\n    acc.push(f(value));\n    return acc;\n  }, []);\n};\n\nconst filter = (predicate, arr) => {\n  arr.reduce((acc, value) => {\n    f(value) && acc.push(value);\n    return acc;\n  }, []);\n}\n```\n\nBasically, `reduce` does two things at same time - **transform** and **accumulation**, but in FP, a good function only does one thing at a time.\n\nSeparating helps function composition and code reusability. We can achieve that by using `transduce` - a function takes `transducer`, `accumulator` functions and an initial value as arguments.\n\n```js\n// Ramds's transduce.\nconst data       = [1,2,3];\nconst double     = (x) => x * 2; // transformer\nconst add        = (x, y) => x + y; // accumulator\nconst transducer = R.map(double); // transformer's collection\nR.transduce(transducer, add, 0, data); // 12\n```\n\n# Curry\nOutside the world of FP, functions can only be carried out when all arguments have been passed in.\n```js\nconst add = (x, y) => x + y;\nadd(1, 2); // 3\n```\n\nIn FP world, functions will be executed only when the last argument has been passed in. A curried function with partially arguments being passed in is called **partially applied** function.\n\n```js\n// Here I use Ramda's curry to make a function curried\nconst add = R.curry((x, y) => x + y);\nconst add1 = add(1); // when the last argument hasn't been fulfilled, returns a function instead;\nadd1(2); // 3\nadd(1)(2); // or you can do this\nadd(1, 2); // all of them result the same\n```\n\nAnd here is a simple `curry` implementation taking up to 2 arguments only:\n\n```js\nconst curry      = (fn) => (x) => (y) => fn(x, y);\nconst add        = (x, y) => x + y;\nconst curriedAdd = curry(add);\ncurriedAdd(1)(2); // 3\n```\n\nCurry is good for function composition, I will introduce them in next section.\n\n# Compose\n`compose` is a function that takes many **transformers** and compresses them into a function. This is also called `pipe` or `sequence` in other languages or libraries.\n\nFor the sake of simplicity I only make `compose` take two functions. In practical world `compose` can actually take as many functions as you want, not limit to two.\n\n```js\nconst compose            = R.curry((f, g) => (val) => f(g(val)));\nconst trim               = (x) => x.trim();\nconst toUpperCase        = (x) => x.toUpperCase();\nconst trimAndToUpperCase = compose(trim, toUpperCase);\ntrimAndToUpperCase(\"  Hello World  \"); // \"HELLO WORLD\"\n```\n\nBeware of its evaluation order - `f(g(val))`, functions will be evaluated in upside down. If you think it is not human friendly, in Ramda you can use [pipe](http://ramdajs.com/docs/#pipe) to get it evaluated from top to down.\n\nHere it's why `curry` shines. The benefit of `curry` is when using with `compose`, we don't have to mention data when building our transformer. Processing data without mentioning **at initial** is called **point-of-free** or **pointfree**. In other words we only care about our data's name when we start transforming.\n\n```js\nconst add1          = (x) => x + 1;\nconst double        = (x) => x * 2;\n\n// not pointfree\nconst add1AndDouble = (data) => double(add1(data));\n\n// pointfree\nconst betterAdd1AndDouble = R.compose(add1, double);\n```\n\n# Functor\n`Functor` in short explanation is:\n- a container traps values inside.\n- container can trap anything, like function or even `Functor` itself.\n- `Functor` is an **mappable** object. Something implements `map` function.\n\nHere is a `Functor` implemented in OOP.\n\n```js\nclass Functor {\n  constructor(val){\n    this._val = val;\n  }\n\n  static of(val){\n    return new Functor(val);\n  }\n\n  map(f){\n    return Functor.of(f(this._val));\n  }\n}\n\n// { _val: 6 }\nFunctor.of(5).map(x => x + 1);\n```\n\nThere is a very common example of `Functor` that every JS developer is familiar with - array.\n\n```js\n[1,2,3].map(x => x + 1);\n```\n\nThere are two common advanced types of `Functor` - one is `Maybe` and the other is `Either`.\n\n### Maybe\nIn other languages like Scala or OCaml, `Maybe` is also called `Option`. `Maybe` is a type which represents **something** or **nothing**.\n\nThis is especially good when dealing with `Functors` containing a **null** value, because when you try to apply function to **null** value, it fails softly.\n\nYou won't confuse your user with an wild error or stuck them in plain white screen.\n\n```js\nclass Maybe extends Functor {\n  static of(val){\n    return new Maybe(val);\n  }\n\n  map(f){\n    return Maybe.of(this._val && f(this._val));\n  }\n}\n\nconst add1 = (x) => x + 1;\nMaybe.of(5).map(add1); // 6\nMaybe.of(null).map(add1); // null\n```\n\n# Either\nMost programming languages have `throw/catch` mechanics for error handling,\nhowever `throw/catch` isn't nice in FP because of two reasons:\n\n- it breaks the composition of functions.\n- `throw/catch` hard fails program if errors were not caught. This is not a pure action.\n\n`Either` is the right candidate for this scenario. Basically it's like **ternary operator** `condition ? exp1 : exp2`,\nexcept it's a function:\n\n```js\neither(left, right, val)\n```\n\nIt execute/return `right` only when the condition of `right` has been fulfilled, otherwise `left` instead.\n\nHere it's a simple implementation of `Either`\n\n```js\nclass Either{\n  constructor(left, right){\n    this.left = left;\n    this.right = right;\n  }\n\n  static of(left, right){\n    return new Either(left, right);\n  }\n\n  map(f){\n    return this.right ? Either.of(this.left, f(this.right)) : Either.of(f(this.left), this.right);\n  }\n}\n\nconst add = (x) => x + 1;\nEither.of(123, 456).map(add); // Either(123, 457)\nEither.of(123, null).map(add); // Either(124, null)\n```\n\n# Applicative Functor\n`Applicative Functor (AP)` is an advanced type of `Functor`. I just mentioned `Functor` can contain anything including functions, and one of the definition of `Functor` is it's **mappable**. Now here comes a question - how do you `map` a function?\n\nThe answer is we use `ap` to apply arguments to functions:\n\n```js\nclass Functor{\n  constructor(val){\n    this._val = val;\n  }\n\n  static of(val){\n    return new Functor(val);\n  }\n\n  map(f){\n    return Functor.of(f(this._val));\n  }\n\n  // F means functor not function\n  ap(F){\n    return Functor.of(this._val(F._val));\n  }\n}\n\nconst add = curry((x, y) => x + y); // a curried version of add\n\nFunctor.of(add).ap(Functor.of(5)).ap(Functor.of(6)); // Functor(11)\nFunctor.of(add(5)).ap(Functor.of(6)); // Functor(11)\nFunctor.of(5).map(add).ap(Functor.of(6)) // Functor(11)\nFunctor.of(5).map(add(6)); // Functor(11)\n```\n\n### lift\nLet's take a look at this example more closely:\n\n```js\nFunctor.of(add).ap(Functor.of(5)).ap(Functor.of(6));\n```\n\nThis syntax is not quite elegant and functional enough. What if I already have `add` function and I want to make it able to automatically process it's argument in `Functor` level?\n\n```js\n// As we know `Array` is a common kind of Functor.\n// expect [3]\nadd([1], [2]); // \"12\" Oops\n```\n\nlet's use `lift` to **lift its arguments to functor** without using `Functor.of(x)`\n\n\n```js\n// Use Ramda's add because it's already curried.\n// Use Ramda's lift to do lifting.\nconst addA2 = lift(add);\naddA2([1,2], [3,4]); // [4,7,5,8] remember functor is mappable.\n```\n\n# Monad\nThere is another scenario - anything can be a value of `Functor`, including `Functor` itself.\n\n```js\nFunctor.of(\n  Functor.of(\n    Functor.of(42)\n  )\n);\n```\n\nWith `Functor` in this status, our `map` magic doesn't work. In order to apply function to our value, we have to **flatten** it first.\n\n```js\nclass Functor{\n  constructor(val){\n    this._val = val;\n  }\n\n  static of(val){\n    return new Functor(val);\n  }\n\n  map(f){\n    return Functor.of(f(this._val));\n  }\n\n  join(){\n    return this._val;\n  }\n\n  flatMap(f){\n    return this.join().map(f);\n  }\n}\n\nconst add1 = (x) => x + 1;\nconst num = Functor.of(Functor.of(42)).flatMap(add1); // Functor(43)\n```\n\nThe `flatten` and `map` approach is called `flatMap`. `flatMap` is also called `chain` in JS or other languages.\n\n# References\n- [functional programming jargon](https://github.com/hemanth/functional-programming-jargon)\n- [函数式编程入门教程](http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html)\n- [Reduce 和 Transduce 的含义](http://www.ruanyifeng.com/blog/2017/03/reduce_transduce.html)\n- [Understanding Transducers in JavaScript](https://medium.com/@roman01la/understanding-transducers-in-javascript-3500d3bd9624)\n- [Functors, Applicatives, and Monads in Plain English](http://www.russbishop.net/monoids-monads-and-functors)\n- [category theory for beginner](https://www.slideshare.net/kenbot/category-theory-for-beginners)\n- [mostly adequate guide](https://drboolean.gitbooks.io/mostly-adequate-guide/content/)\n- [Javascript Functor, Applicative, Monads in pictures](https://medium.com/@tzehsiang/javascript-functor-applicative-monads-in-pictures-b567c6415221)\n- [Can't wrap my head around “lift” in Ramda.js](http://stackoverflow.com/questions/36558598/cant-wrap-my-head-around-lift-in-ramda-js)\n","source":"_posts/2017-04-17-A-Learning-Note-of-Functional-Programming-Part-2-Some-Common-Terminology.md","raw":"---\ntitle: A Learning Note of Functional Programming Part 2 - Some Common Terminology\ndate: 2017-04-17 23:28:59\ntags: [meta, programming, javascript, FP]\n---\n\n# Preface\nThis is another note for introducing some common terms or words that you may see in functional programming world.\n\nExamples here will be implemented in either vanilla JS or [Ramda](http://ramdajs.com/) - a functional library that focuses on functional programming than other general-purpose same purpose libraries.\n\n# Map\n`Map` is a function which transforms data from one to any type (including itself):\n\n```js\n// array of number to array of number (transform to itself)\n// [2,3,4]\n[1,2,3].map(x => x + 1);\n\n// array of number to array of obj (transform to other types)\n// [\n//   { num: 1 },\n//   { num: 2 },\n//   { num: 3 }\n// ]\n[1,2,3].map(x => ({ num: x }));\n```\n\n# Filter\n`Filter` is a function which takes a **predicate** (a function takes an argument and return a boolean) and an list and finally returns an list:\n\n```js\n// array of number to array of number\n// [2,4]\n[1,2,3,4].filter(x => x % 2 === 0);\n```\n\n# Reduce\n`Reduce` takes a function, an initial value and transforms data to any type (including itself):\n\n```js\n// array of number to nunber\n// 10\n[1,2,3,4].reduce(\n  (acc, value) => {\n    acc += value;\n    return acc;\n  }, 0\n);\n```\n\n# Transduce\nYou might find that you can implement `map` and `filter` in `reduce`:\n\n```js\nconst map = (f, arr) => {\n  arr.reduce((acc, value) => {\n    acc.push(f(value));\n    return acc;\n  }, []);\n};\n\nconst filter = (predicate, arr) => {\n  arr.reduce((acc, value) => {\n    f(value) && acc.push(value);\n    return acc;\n  }, []);\n}\n```\n\nBasically, `reduce` does two things at same time - **transform** and **accumulation**, but in FP, a good function only does one thing at a time.\n\nSeparating helps function composition and code reusability. We can achieve that by using `transduce` - a function takes `transducer`, `accumulator` functions and an initial value as arguments.\n\n```js\n// Ramds's transduce.\nconst data       = [1,2,3];\nconst double     = (x) => x * 2; // transformer\nconst add        = (x, y) => x + y; // accumulator\nconst transducer = R.map(double); // transformer's collection\nR.transduce(transducer, add, 0, data); // 12\n```\n\n# Curry\nOutside the world of FP, functions can only be carried out when all arguments have been passed in.\n```js\nconst add = (x, y) => x + y;\nadd(1, 2); // 3\n```\n\nIn FP world, functions will be executed only when the last argument has been passed in. A curried function with partially arguments being passed in is called **partially applied** function.\n\n```js\n// Here I use Ramda's curry to make a function curried\nconst add = R.curry((x, y) => x + y);\nconst add1 = add(1); // when the last argument hasn't been fulfilled, returns a function instead;\nadd1(2); // 3\nadd(1)(2); // or you can do this\nadd(1, 2); // all of them result the same\n```\n\nAnd here is a simple `curry` implementation taking up to 2 arguments only:\n\n```js\nconst curry      = (fn) => (x) => (y) => fn(x, y);\nconst add        = (x, y) => x + y;\nconst curriedAdd = curry(add);\ncurriedAdd(1)(2); // 3\n```\n\nCurry is good for function composition, I will introduce them in next section.\n\n# Compose\n`compose` is a function that takes many **transformers** and compresses them into a function. This is also called `pipe` or `sequence` in other languages or libraries.\n\nFor the sake of simplicity I only make `compose` take two functions. In practical world `compose` can actually take as many functions as you want, not limit to two.\n\n```js\nconst compose            = R.curry((f, g) => (val) => f(g(val)));\nconst trim               = (x) => x.trim();\nconst toUpperCase        = (x) => x.toUpperCase();\nconst trimAndToUpperCase = compose(trim, toUpperCase);\ntrimAndToUpperCase(\"  Hello World  \"); // \"HELLO WORLD\"\n```\n\nBeware of its evaluation order - `f(g(val))`, functions will be evaluated in upside down. If you think it is not human friendly, in Ramda you can use [pipe](http://ramdajs.com/docs/#pipe) to get it evaluated from top to down.\n\nHere it's why `curry` shines. The benefit of `curry` is when using with `compose`, we don't have to mention data when building our transformer. Processing data without mentioning **at initial** is called **point-of-free** or **pointfree**. In other words we only care about our data's name when we start transforming.\n\n```js\nconst add1          = (x) => x + 1;\nconst double        = (x) => x * 2;\n\n// not pointfree\nconst add1AndDouble = (data) => double(add1(data));\n\n// pointfree\nconst betterAdd1AndDouble = R.compose(add1, double);\n```\n\n# Functor\n`Functor` in short explanation is:\n- a container traps values inside.\n- container can trap anything, like function or even `Functor` itself.\n- `Functor` is an **mappable** object. Something implements `map` function.\n\nHere is a `Functor` implemented in OOP.\n\n```js\nclass Functor {\n  constructor(val){\n    this._val = val;\n  }\n\n  static of(val){\n    return new Functor(val);\n  }\n\n  map(f){\n    return Functor.of(f(this._val));\n  }\n}\n\n// { _val: 6 }\nFunctor.of(5).map(x => x + 1);\n```\n\nThere is a very common example of `Functor` that every JS developer is familiar with - array.\n\n```js\n[1,2,3].map(x => x + 1);\n```\n\nThere are two common advanced types of `Functor` - one is `Maybe` and the other is `Either`.\n\n### Maybe\nIn other languages like Scala or OCaml, `Maybe` is also called `Option`. `Maybe` is a type which represents **something** or **nothing**.\n\nThis is especially good when dealing with `Functors` containing a **null** value, because when you try to apply function to **null** value, it fails softly.\n\nYou won't confuse your user with an wild error or stuck them in plain white screen.\n\n```js\nclass Maybe extends Functor {\n  static of(val){\n    return new Maybe(val);\n  }\n\n  map(f){\n    return Maybe.of(this._val && f(this._val));\n  }\n}\n\nconst add1 = (x) => x + 1;\nMaybe.of(5).map(add1); // 6\nMaybe.of(null).map(add1); // null\n```\n\n# Either\nMost programming languages have `throw/catch` mechanics for error handling,\nhowever `throw/catch` isn't nice in FP because of two reasons:\n\n- it breaks the composition of functions.\n- `throw/catch` hard fails program if errors were not caught. This is not a pure action.\n\n`Either` is the right candidate for this scenario. Basically it's like **ternary operator** `condition ? exp1 : exp2`,\nexcept it's a function:\n\n```js\neither(left, right, val)\n```\n\nIt execute/return `right` only when the condition of `right` has been fulfilled, otherwise `left` instead.\n\nHere it's a simple implementation of `Either`\n\n```js\nclass Either{\n  constructor(left, right){\n    this.left = left;\n    this.right = right;\n  }\n\n  static of(left, right){\n    return new Either(left, right);\n  }\n\n  map(f){\n    return this.right ? Either.of(this.left, f(this.right)) : Either.of(f(this.left), this.right);\n  }\n}\n\nconst add = (x) => x + 1;\nEither.of(123, 456).map(add); // Either(123, 457)\nEither.of(123, null).map(add); // Either(124, null)\n```\n\n# Applicative Functor\n`Applicative Functor (AP)` is an advanced type of `Functor`. I just mentioned `Functor` can contain anything including functions, and one of the definition of `Functor` is it's **mappable**. Now here comes a question - how do you `map` a function?\n\nThe answer is we use `ap` to apply arguments to functions:\n\n```js\nclass Functor{\n  constructor(val){\n    this._val = val;\n  }\n\n  static of(val){\n    return new Functor(val);\n  }\n\n  map(f){\n    return Functor.of(f(this._val));\n  }\n\n  // F means functor not function\n  ap(F){\n    return Functor.of(this._val(F._val));\n  }\n}\n\nconst add = curry((x, y) => x + y); // a curried version of add\n\nFunctor.of(add).ap(Functor.of(5)).ap(Functor.of(6)); // Functor(11)\nFunctor.of(add(5)).ap(Functor.of(6)); // Functor(11)\nFunctor.of(5).map(add).ap(Functor.of(6)) // Functor(11)\nFunctor.of(5).map(add(6)); // Functor(11)\n```\n\n### lift\nLet's take a look at this example more closely:\n\n```js\nFunctor.of(add).ap(Functor.of(5)).ap(Functor.of(6));\n```\n\nThis syntax is not quite elegant and functional enough. What if I already have `add` function and I want to make it able to automatically process it's argument in `Functor` level?\n\n```js\n// As we know `Array` is a common kind of Functor.\n// expect [3]\nadd([1], [2]); // \"12\" Oops\n```\n\nlet's use `lift` to **lift its arguments to functor** without using `Functor.of(x)`\n\n\n```js\n// Use Ramda's add because it's already curried.\n// Use Ramda's lift to do lifting.\nconst addA2 = lift(add);\naddA2([1,2], [3,4]); // [4,7,5,8] remember functor is mappable.\n```\n\n# Monad\nThere is another scenario - anything can be a value of `Functor`, including `Functor` itself.\n\n```js\nFunctor.of(\n  Functor.of(\n    Functor.of(42)\n  )\n);\n```\n\nWith `Functor` in this status, our `map` magic doesn't work. In order to apply function to our value, we have to **flatten** it first.\n\n```js\nclass Functor{\n  constructor(val){\n    this._val = val;\n  }\n\n  static of(val){\n    return new Functor(val);\n  }\n\n  map(f){\n    return Functor.of(f(this._val));\n  }\n\n  join(){\n    return this._val;\n  }\n\n  flatMap(f){\n    return this.join().map(f);\n  }\n}\n\nconst add1 = (x) => x + 1;\nconst num = Functor.of(Functor.of(42)).flatMap(add1); // Functor(43)\n```\n\nThe `flatten` and `map` approach is called `flatMap`. `flatMap` is also called `chain` in JS or other languages.\n\n# References\n- [functional programming jargon](https://github.com/hemanth/functional-programming-jargon)\n- [函数式编程入门教程](http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html)\n- [Reduce 和 Transduce 的含义](http://www.ruanyifeng.com/blog/2017/03/reduce_transduce.html)\n- [Understanding Transducers in JavaScript](https://medium.com/@roman01la/understanding-transducers-in-javascript-3500d3bd9624)\n- [Functors, Applicatives, and Monads in Plain English](http://www.russbishop.net/monoids-monads-and-functors)\n- [category theory for beginner](https://www.slideshare.net/kenbot/category-theory-for-beginners)\n- [mostly adequate guide](https://drboolean.gitbooks.io/mostly-adequate-guide/content/)\n- [Javascript Functor, Applicative, Monads in pictures](https://medium.com/@tzehsiang/javascript-functor-applicative-monads-in-pictures-b567c6415221)\n- [Can't wrap my head around “lift” in Ramda.js](http://stackoverflow.com/questions/36558598/cant-wrap-my-head-around-lift-in-ramda-js)\n","slug":"2017-04-17-A-Learning-Note-of-Functional-Programming-Part-2-Some-Common-Terminology","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol89000yvfvggluv2qx8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>This is another note for introducing some common terms or words that you may see in functional programming world.</p>\n<p>Examples here will be implemented in either vanilla JS or <a href=\"http://ramdajs.com/\">Ramda</a> - a functional library that focuses on functional programming than other general-purpose same purpose libraries.</p>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p><code>Map</code> is a function which transforms data from one to any type (including itself):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// array of number to array of number (transform to itself)</span></span><br><span class=\"line\"><span class=\"comment\">// [2,3,4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// array of number to array of obj (transform to other types)</span></span><br><span class=\"line\"><span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; num: 1 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; num: 2 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; num: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> (&#123; <span class=\"attr\">num</span>: x &#125;));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h1><p><code>Filter</code> is a function which takes a <strong>predicate</strong> (a function takes an argument and return a boolean) and an list and finally returns an list:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// array of number to array of number</span></span><br><span class=\"line\"><span class=\"comment\">// [2,4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Reduce\"><a href=\"#Reduce\" class=\"headerlink\" title=\"Reduce\"></a>Reduce</h1><p><code>Reduce</code> takes a function, an initial value and transforms data to any type (including itself):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// array of number to nunber</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">acc, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    acc += value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Transduce\"><a href=\"#Transduce\" class=\"headerlink\" title=\"Transduce\"></a>Transduce</h1><p>You might find that you can implement <code>map</code> and <code>filter</code> in <code>reduce</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">map</span> = (<span class=\"params\">f, arr</span>) =&gt; &#123;</span><br><span class=\"line\">  arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    acc.<span class=\"title function_\">push</span>(<span class=\"title function_\">f</span>(value));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">filter</span> = (<span class=\"params\">predicate, arr</span>) =&gt; &#123;</span><br><span class=\"line\">  arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">f</span>(value) &amp;&amp; acc.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Basically, <code>reduce</code> does two things at same time - <strong>transform</strong> and <strong>accumulation</strong>, but in FP, a good function only does one thing at a time.</p>\n<p>Separating helps function composition and code reusability. We can achieve that by using <code>transduce</code> - a function takes <code>transducer</code>, <code>accumulator</code> functions and an initial value as arguments.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Ramds&#x27;s transduce.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data       = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">double</span>     = (<span class=\"params\">x</span>) =&gt; x * <span class=\"number\">2</span>; <span class=\"comment\">// transformer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span>        = (<span class=\"params\">x, y</span>) =&gt; x + y; <span class=\"comment\">// accumulator</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transducer = R.<span class=\"title function_\">map</span>(double); <span class=\"comment\">// transformer&#x27;s collection</span></span><br><span class=\"line\">R.<span class=\"title function_\">transduce</span>(transducer, add, <span class=\"number\">0</span>, data); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Curry\"><a href=\"#Curry\" class=\"headerlink\" title=\"Curry\"></a>Curry</h1><p>Outside the world of FP, functions can only be carried out when all arguments have been passed in.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\">x, y</span>) =&gt; x + y;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>In FP world, functions will be executed only when the last argument has been passed in. A curried function with partially arguments being passed in is called <strong>partially applied</strong> function.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Here I use Ramda&#x27;s curry to make a function curried</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = R.<span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y);</span><br><span class=\"line\"><span class=\"keyword\">const</span> add1 = <span class=\"title function_\">add</span>(<span class=\"number\">1</span>); <span class=\"comment\">// when the last argument hasn&#x27;t been fulfilled, returns a function instead;</span></span><br><span class=\"line\"><span class=\"title function_\">add1</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>); <span class=\"comment\">// or you can do this</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// all of them result the same</span></span><br></pre></td></tr></table></figure>\n\n<p>And here is a simple <code>curry</code> implementation taking up to 2 arguments only:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">curry</span>      = (<span class=\"params\">fn</span>) =&gt; <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">y</span>) =&gt;</span> <span class=\"title function_\">fn</span>(x, y);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span>        = (<span class=\"params\">x, y</span>) =&gt; x + y;</span><br><span class=\"line\"><span class=\"keyword\">const</span> curriedAdd = <span class=\"title function_\">curry</span>(add);</span><br><span class=\"line\"><span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>Curry is good for function composition, I will introduce them in next section.</p>\n<h1 id=\"Compose\"><a href=\"#Compose\" class=\"headerlink\" title=\"Compose\"></a>Compose</h1><p><code>compose</code> is a function that takes many <strong>transformers</strong> and compresses them into a function. This is also called <code>pipe</code> or <code>sequence</code> in other languages or libraries.</p>\n<p>For the sake of simplicity I only make <code>compose</code> take two functions. In practical world <code>compose</code> can actually take as many functions as you want, not limit to two.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose            = R.<span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">g</span>(val)));</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">trim</span>               = (<span class=\"params\">x</span>) =&gt; x.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toUpperCase</span>        = (<span class=\"params\">x</span>) =&gt; x.<span class=\"title function_\">toUpperCase</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> trimAndToUpperCase = <span class=\"title function_\">compose</span>(trim, toUpperCase);</span><br><span class=\"line\"><span class=\"title function_\">trimAndToUpperCase</span>(<span class=\"string\">&quot;  Hello World  &quot;</span>); <span class=\"comment\">// &quot;HELLO WORLD&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Beware of its evaluation order - <code>f(g(val))</code>, functions will be evaluated in upside down. If you think it is not human friendly, in Ramda you can use <a href=\"http://ramdajs.com/docs/#pipe\">pipe</a> to get it evaluated from top to down.</p>\n<p>Here it’s why <code>curry</code> shines. The benefit of <code>curry</code> is when using with <code>compose</code>, we don’t have to mention data when building our transformer. Processing data without mentioning <strong>at initial</strong> is called <strong>point-of-free</strong> or <strong>pointfree</strong>. In other words we only care about our data’s name when we start transforming.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add1</span>          = (<span class=\"params\">x</span>) =&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">double</span>        = (<span class=\"params\">x</span>) =&gt; x * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// not pointfree</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add1AndDouble</span> = (<span class=\"params\">data</span>) =&gt; <span class=\"title function_\">double</span>(<span class=\"title function_\">add1</span>(data));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pointfree</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> betterAdd1AndDouble = R.<span class=\"title function_\">compose</span>(add1, double);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Functor\"><a href=\"#Functor\" class=\"headerlink\" title=\"Functor\"></a>Functor</h1><p><code>Functor</code> in short explanation is:</p>\n<ul>\n<li>a container traps values inside.</li>\n<li>container can trap anything, like function or even <code>Functor</code> itself.</li>\n<li><code>Functor</code> is an <strong>mappable</strong> object. Something implements <code>map</code> function.</li>\n</ul>\n<p>Here is a <code>Functor</code> implemented in OOP.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Functor</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_val</span> = val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Functor</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; _val: 6 &#125;</span></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>There is a very common example of <code>Functor</code> that every JS developer is familiar with - array.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>There are two common advanced types of <code>Functor</code> - one is <code>Maybe</code> and the other is <code>Either</code>.</p>\n<h3 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h3><p>In other languages like Scala or OCaml, <code>Maybe</code> is also called <code>Option</code>. <code>Maybe</code> is a type which represents <strong>something</strong> or <strong>nothing</strong>.</p>\n<p>This is especially good when dealing with <code>Functors</code> containing a <strong>null</strong> value, because when you try to apply function to <strong>null</strong> value, it fails softly.</p>\n<p>You won’t confuse your user with an wild error or stuck them in plain white screen.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Maybe</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Functor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Maybe</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span> &amp;&amp; <span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add1</span> = (<span class=\"params\">x</span>) =&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>).<span class=\"title function_\">map</span>(add1); <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(add1); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Either\"><a href=\"#Either\" class=\"headerlink\" title=\"Either\"></a>Either</h1><p>Most programming languages have <code>throw/catch</code> mechanics for error handling,<br>however <code>throw/catch</code> isn’t nice in FP because of two reasons:</p>\n<ul>\n<li>it breaks the composition of functions.</li>\n<li><code>throw/catch</code> hard fails program if errors were not caught. This is not a pure action.</li>\n</ul>\n<p><code>Either</code> is the right candidate for this scenario. Basically it’s like <strong>ternary operator</strong> <code>condition ? exp1 : exp2</code>,<br>except it’s a function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">either</span>(left, right, val)</span><br></pre></td></tr></table></figure>\n\n<p>It execute&#x2F;return <code>right</code> only when the condition of <code>right</code> has been fulfilled, otherwise <code>left</code> instead.</p>\n<p>Here it’s a simple implementation of <code>Either</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Either</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">left, right</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = left;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">left, right</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Either</span>(left, right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> ? <span class=\"title class_\">Either</span>.<span class=\"title function_\">of</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>, <span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>)) : <span class=\"title class_\">Either</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>), <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\">x</span>) =&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title class_\">Either</span>.<span class=\"title function_\">of</span>(<span class=\"number\">123</span>, <span class=\"number\">456</span>).<span class=\"title function_\">map</span>(add); <span class=\"comment\">// Either(123, 457)</span></span><br><span class=\"line\"><span class=\"title class_\">Either</span>.<span class=\"title function_\">of</span>(<span class=\"number\">123</span>, <span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(add); <span class=\"comment\">// Either(124, null)</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Applicative-Functor\"><a href=\"#Applicative-Functor\" class=\"headerlink\" title=\"Applicative Functor\"></a>Applicative Functor</h1><p><code>Applicative Functor (AP)</code> is an advanced type of <code>Functor</code>. I just mentioned <code>Functor</code> can contain anything including functions, and one of the definition of <code>Functor</code> is it’s <strong>mappable</strong>. Now here comes a question - how do you <code>map</code> a function?</p>\n<p>The answer is we use <code>ap</code> to apply arguments to functions:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Functor</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_val</span> = val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Functor</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// F means functor not function</span></span><br><span class=\"line\">  <span class=\"title function_\">ap</span>(<span class=\"params\">F</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">_val</span>(F.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y); <span class=\"comment\">// a curried version of add</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(add).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>)).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">6</span>)); <span class=\"comment\">// Functor(11)</span></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">add</span>(<span class=\"number\">5</span>)).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">6</span>)); <span class=\"comment\">// Functor(11)</span></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>).<span class=\"title function_\">map</span>(add).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">6</span>)) <span class=\"comment\">// Functor(11)</span></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>).<span class=\"title function_\">map</span>(<span class=\"title function_\">add</span>(<span class=\"number\">6</span>)); <span class=\"comment\">// Functor(11)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lift\"><a href=\"#lift\" class=\"headerlink\" title=\"lift\"></a>lift</h3><p>Let’s take a look at this example more closely:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(add).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>)).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">6</span>));</span><br></pre></td></tr></table></figure>\n\n<p>This syntax is not quite elegant and functional enough. What if I already have <code>add</code> function and I want to make it able to automatically process it’s argument in <code>Functor</code> level?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// As we know `Array` is a common kind of Functor.</span></span><br><span class=\"line\"><span class=\"comment\">// expect [3]</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>([<span class=\"number\">1</span>], [<span class=\"number\">2</span>]); <span class=\"comment\">// &quot;12&quot; Oops</span></span><br></pre></td></tr></table></figure>\n\n<p>let’s use <code>lift</code> to <strong>lift its arguments to functor</strong> without using <code>Functor.of(x)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use Ramda&#x27;s add because it&#x27;s already curried.</span></span><br><span class=\"line\"><span class=\"comment\">// Use Ramda&#x27;s lift to do lifting.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> addA2 = <span class=\"title function_\">lift</span>(add);</span><br><span class=\"line\"><span class=\"title function_\">addA2</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>,<span class=\"number\">4</span>]); <span class=\"comment\">// [4,7,5,8] remember functor is mappable.</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Monad\"><a href=\"#Monad\" class=\"headerlink\" title=\"Monad\"></a>Monad</h1><p>There is another scenario - anything can be a value of <code>Functor</code>, including <code>Functor</code> itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(</span><br><span class=\"line\">  <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(</span><br><span class=\"line\">    <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>With <code>Functor</code> in this status, our <code>map</code> magic doesn’t work. In order to apply function to our value, we have to <strong>flatten</strong> it first.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Functor</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_val</span> = val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Functor</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">join</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">flatMap</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">join</span>().<span class=\"title function_\">map</span>(f);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add1</span> = (<span class=\"params\">x</span>) =&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">42</span>)).<span class=\"title function_\">flatMap</span>(add1); <span class=\"comment\">// Functor(43)</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>flatten</code> and <code>map</code> approach is called <code>flatMap</code>. <code>flatMap</code> is also called <code>chain</code> in JS or other languages.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://github.com/hemanth/functional-programming-jargon\">functional programming jargon</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html\">函数式编程入门教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/03/reduce_transduce.html\">Reduce 和 Transduce 的含义</a></li>\n<li><a href=\"https://medium.com/@roman01la/understanding-transducers-in-javascript-3500d3bd9624\">Understanding Transducers in JavaScript</a></li>\n<li><a href=\"http://www.russbishop.net/monoids-monads-and-functors\">Functors, Applicatives, and Monads in Plain English</a></li>\n<li><a href=\"https://www.slideshare.net/kenbot/category-theory-for-beginners\">category theory for beginner</a></li>\n<li><a href=\"https://drboolean.gitbooks.io/mostly-adequate-guide/content/\">mostly adequate guide</a></li>\n<li><a href=\"https://medium.com/@tzehsiang/javascript-functor-applicative-monads-in-pictures-b567c6415221\">Javascript Functor, Applicative, Monads in pictures</a></li>\n<li><a href=\"http://stackoverflow.com/questions/36558598/cant-wrap-my-head-around-lift-in-ramda-js\">Can’t wrap my head around “lift” in Ramda.js</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>This is another note for introducing some common terms or words that you may see in functional programming world.</p>\n<p>Examples here will be implemented in either vanilla JS or <a href=\"http://ramdajs.com/\">Ramda</a> - a functional library that focuses on functional programming than other general-purpose same purpose libraries.</p>\n<h1 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h1><p><code>Map</code> is a function which transforms data from one to any type (including itself):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// array of number to array of number (transform to itself)</span></span><br><span class=\"line\"><span class=\"comment\">// [2,3,4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// array of number to array of obj (transform to other types)</span></span><br><span class=\"line\"><span class=\"comment\">// [</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; num: 1 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; num: 2 &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   &#123; num: 3 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// ]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> (&#123; <span class=\"attr\">num</span>: x &#125;));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h1><p><code>Filter</code> is a function which takes a <strong>predicate</strong> (a function takes an argument and return a boolean) and an list and finally returns an list:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// array of number to array of number</span></span><br><span class=\"line\"><span class=\"comment\">// [2,4]</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> === <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Reduce\"><a href=\"#Reduce\" class=\"headerlink\" title=\"Reduce\"></a>Reduce</h1><p><code>Reduce</code> takes a function, an initial value and transforms data to any type (including itself):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// array of number to nunber</span></span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>].<span class=\"title function_\">reduce</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">acc, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    acc += value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Transduce\"><a href=\"#Transduce\" class=\"headerlink\" title=\"Transduce\"></a>Transduce</h1><p>You might find that you can implement <code>map</code> and <code>filter</code> in <code>reduce</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">map</span> = (<span class=\"params\">f, arr</span>) =&gt; &#123;</span><br><span class=\"line\">  arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    acc.<span class=\"title function_\">push</span>(<span class=\"title function_\">f</span>(value));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">filter</span> = (<span class=\"params\">predicate, arr</span>) =&gt; &#123;</span><br><span class=\"line\">  arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">f</span>(value) &amp;&amp; acc.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> acc;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Basically, <code>reduce</code> does two things at same time - <strong>transform</strong> and <strong>accumulation</strong>, but in FP, a good function only does one thing at a time.</p>\n<p>Separating helps function composition and code reusability. We can achieve that by using <code>transduce</code> - a function takes <code>transducer</code>, <code>accumulator</code> functions and an initial value as arguments.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Ramds&#x27;s transduce.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data       = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">double</span>     = (<span class=\"params\">x</span>) =&gt; x * <span class=\"number\">2</span>; <span class=\"comment\">// transformer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span>        = (<span class=\"params\">x, y</span>) =&gt; x + y; <span class=\"comment\">// accumulator</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transducer = R.<span class=\"title function_\">map</span>(double); <span class=\"comment\">// transformer&#x27;s collection</span></span><br><span class=\"line\">R.<span class=\"title function_\">transduce</span>(transducer, add, <span class=\"number\">0</span>, data); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Curry\"><a href=\"#Curry\" class=\"headerlink\" title=\"Curry\"></a>Curry</h1><p>Outside the world of FP, functions can only be carried out when all arguments have been passed in.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\">x, y</span>) =&gt; x + y;</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>In FP world, functions will be executed only when the last argument has been passed in. A curried function with partially arguments being passed in is called <strong>partially applied</strong> function.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Here I use Ramda&#x27;s curry to make a function curried</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = R.<span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y);</span><br><span class=\"line\"><span class=\"keyword\">const</span> add1 = <span class=\"title function_\">add</span>(<span class=\"number\">1</span>); <span class=\"comment\">// when the last argument hasn&#x27;t been fulfilled, returns a function instead;</span></span><br><span class=\"line\"><span class=\"title function_\">add1</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>); <span class=\"comment\">// or you can do this</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// all of them result the same</span></span><br></pre></td></tr></table></figure>\n\n<p>And here is a simple <code>curry</code> implementation taking up to 2 arguments only:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">curry</span>      = (<span class=\"params\">fn</span>) =&gt; <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">y</span>) =&gt;</span> <span class=\"title function_\">fn</span>(x, y);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span>        = (<span class=\"params\">x, y</span>) =&gt; x + y;</span><br><span class=\"line\"><span class=\"keyword\">const</span> curriedAdd = <span class=\"title function_\">curry</span>(add);</span><br><span class=\"line\"><span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>Curry is good for function composition, I will introduce them in next section.</p>\n<h1 id=\"Compose\"><a href=\"#Compose\" class=\"headerlink\" title=\"Compose\"></a>Compose</h1><p><code>compose</code> is a function that takes many <strong>transformers</strong> and compresses them into a function. This is also called <code>pipe</code> or <code>sequence</code> in other languages or libraries.</p>\n<p>For the sake of simplicity I only make <code>compose</code> take two functions. In practical world <code>compose</code> can actually take as many functions as you want, not limit to two.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose            = R.<span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> <span class=\"title function_\">f</span>(<span class=\"title function_\">g</span>(val)));</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">trim</span>               = (<span class=\"params\">x</span>) =&gt; x.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toUpperCase</span>        = (<span class=\"params\">x</span>) =&gt; x.<span class=\"title function_\">toUpperCase</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> trimAndToUpperCase = <span class=\"title function_\">compose</span>(trim, toUpperCase);</span><br><span class=\"line\"><span class=\"title function_\">trimAndToUpperCase</span>(<span class=\"string\">&quot;  Hello World  &quot;</span>); <span class=\"comment\">// &quot;HELLO WORLD&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Beware of its evaluation order - <code>f(g(val))</code>, functions will be evaluated in upside down. If you think it is not human friendly, in Ramda you can use <a href=\"http://ramdajs.com/docs/#pipe\">pipe</a> to get it evaluated from top to down.</p>\n<p>Here it’s why <code>curry</code> shines. The benefit of <code>curry</code> is when using with <code>compose</code>, we don’t have to mention data when building our transformer. Processing data without mentioning <strong>at initial</strong> is called <strong>point-of-free</strong> or <strong>pointfree</strong>. In other words we only care about our data’s name when we start transforming.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add1</span>          = (<span class=\"params\">x</span>) =&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">double</span>        = (<span class=\"params\">x</span>) =&gt; x * <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// not pointfree</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add1AndDouble</span> = (<span class=\"params\">data</span>) =&gt; <span class=\"title function_\">double</span>(<span class=\"title function_\">add1</span>(data));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// pointfree</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> betterAdd1AndDouble = R.<span class=\"title function_\">compose</span>(add1, double);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Functor\"><a href=\"#Functor\" class=\"headerlink\" title=\"Functor\"></a>Functor</h1><p><code>Functor</code> in short explanation is:</p>\n<ul>\n<li>a container traps values inside.</li>\n<li>container can trap anything, like function or even <code>Functor</code> itself.</li>\n<li><code>Functor</code> is an <strong>mappable</strong> object. Something implements <code>map</code> function.</li>\n</ul>\n<p>Here is a <code>Functor</code> implemented in OOP.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Functor</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_val</span> = val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Functor</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; _val: 6 &#125;</span></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>There is a very common example of <code>Functor</code> that every JS developer is familiar with - array.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>].<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>There are two common advanced types of <code>Functor</code> - one is <code>Maybe</code> and the other is <code>Either</code>.</p>\n<h3 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h3><p>In other languages like Scala or OCaml, <code>Maybe</code> is also called <code>Option</code>. <code>Maybe</code> is a type which represents <strong>something</strong> or <strong>nothing</strong>.</p>\n<p>This is especially good when dealing with <code>Functors</code> containing a <strong>null</strong> value, because when you try to apply function to <strong>null</strong> value, it fails softly.</p>\n<p>You won’t confuse your user with an wild error or stuck them in plain white screen.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Maybe</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Functor</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Maybe</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span> &amp;&amp; <span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add1</span> = (<span class=\"params\">x</span>) =&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>).<span class=\"title function_\">map</span>(add1); <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"title class_\">Maybe</span>.<span class=\"title function_\">of</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(add1); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Either\"><a href=\"#Either\" class=\"headerlink\" title=\"Either\"></a>Either</h1><p>Most programming languages have <code>throw/catch</code> mechanics for error handling,<br>however <code>throw/catch</code> isn’t nice in FP because of two reasons:</p>\n<ul>\n<li>it breaks the composition of functions.</li>\n<li><code>throw/catch</code> hard fails program if errors were not caught. This is not a pure action.</li>\n</ul>\n<p><code>Either</code> is the right candidate for this scenario. Basically it’s like <strong>ternary operator</strong> <code>condition ? exp1 : exp2</code>,<br>except it’s a function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">either</span>(left, right, val)</span><br></pre></td></tr></table></figure>\n\n<p>It execute&#x2F;return <code>right</code> only when the condition of <code>right</code> has been fulfilled, otherwise <code>left</code> instead.</p>\n<p>Here it’s a simple implementation of <code>Either</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Either</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">left, right</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = left;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">left, right</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Either</span>(left, right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> ? <span class=\"title class_\">Either</span>.<span class=\"title function_\">of</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>, <span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">right</span>)) : <span class=\"title class_\">Either</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">left</span>), <span class=\"variable language_\">this</span>.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add</span> = (<span class=\"params\">x</span>) =&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title class_\">Either</span>.<span class=\"title function_\">of</span>(<span class=\"number\">123</span>, <span class=\"number\">456</span>).<span class=\"title function_\">map</span>(add); <span class=\"comment\">// Either(123, 457)</span></span><br><span class=\"line\"><span class=\"title class_\">Either</span>.<span class=\"title function_\">of</span>(<span class=\"number\">123</span>, <span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(add); <span class=\"comment\">// Either(124, null)</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Applicative-Functor\"><a href=\"#Applicative-Functor\" class=\"headerlink\" title=\"Applicative Functor\"></a>Applicative Functor</h1><p><code>Applicative Functor (AP)</code> is an advanced type of <code>Functor</code>. I just mentioned <code>Functor</code> can contain anything including functions, and one of the definition of <code>Functor</code> is it’s <strong>mappable</strong>. Now here comes a question - how do you <code>map</code> a function?</p>\n<p>The answer is we use <code>ap</code> to apply arguments to functions:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Functor</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_val</span> = val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Functor</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// F means functor not function</span></span><br><span class=\"line\">  <span class=\"title function_\">ap</span>(<span class=\"params\">F</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">_val</span>(F.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"title function_\">curry</span>(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y); <span class=\"comment\">// a curried version of add</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(add).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>)).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">6</span>)); <span class=\"comment\">// Functor(11)</span></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">add</span>(<span class=\"number\">5</span>)).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">6</span>)); <span class=\"comment\">// Functor(11)</span></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>).<span class=\"title function_\">map</span>(add).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">6</span>)) <span class=\"comment\">// Functor(11)</span></span><br><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>).<span class=\"title function_\">map</span>(<span class=\"title function_\">add</span>(<span class=\"number\">6</span>)); <span class=\"comment\">// Functor(11)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lift\"><a href=\"#lift\" class=\"headerlink\" title=\"lift\"></a>lift</h3><p>Let’s take a look at this example more closely:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(add).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">5</span>)).<span class=\"title function_\">ap</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">6</span>));</span><br></pre></td></tr></table></figure>\n\n<p>This syntax is not quite elegant and functional enough. What if I already have <code>add</code> function and I want to make it able to automatically process it’s argument in <code>Functor</code> level?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// As we know `Array` is a common kind of Functor.</span></span><br><span class=\"line\"><span class=\"comment\">// expect [3]</span></span><br><span class=\"line\"><span class=\"title function_\">add</span>([<span class=\"number\">1</span>], [<span class=\"number\">2</span>]); <span class=\"comment\">// &quot;12&quot; Oops</span></span><br></pre></td></tr></table></figure>\n\n<p>let’s use <code>lift</code> to <strong>lift its arguments to functor</strong> without using <code>Functor.of(x)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Use Ramda&#x27;s add because it&#x27;s already curried.</span></span><br><span class=\"line\"><span class=\"comment\">// Use Ramda&#x27;s lift to do lifting.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> addA2 = <span class=\"title function_\">lift</span>(add);</span><br><span class=\"line\"><span class=\"title function_\">addA2</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>,<span class=\"number\">4</span>]); <span class=\"comment\">// [4,7,5,8] remember functor is mappable.</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Monad\"><a href=\"#Monad\" class=\"headerlink\" title=\"Monad\"></a>Monad</h1><p>There is another scenario - anything can be a value of <code>Functor</code>, including <code>Functor</code> itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(</span><br><span class=\"line\">  <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(</span><br><span class=\"line\">    <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">42</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>With <code>Functor</code> in this status, our <code>map</code> magic doesn’t work. In order to apply function to our value, we have to <strong>flatten</strong> it first.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Functor</span>&#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_val</span> = val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">of</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Functor</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">map</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title function_\">f</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">join</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_val</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">flatMap</span>(<span class=\"params\">f</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">join</span>().<span class=\"title function_\">map</span>(f);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add1</span> = (<span class=\"params\">x</span>) =&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"title class_\">Functor</span>.<span class=\"title function_\">of</span>(<span class=\"number\">42</span>)).<span class=\"title function_\">flatMap</span>(add1); <span class=\"comment\">// Functor(43)</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>flatten</code> and <code>map</code> approach is called <code>flatMap</code>. <code>flatMap</code> is also called <code>chain</code> in JS or other languages.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://github.com/hemanth/functional-programming-jargon\">functional programming jargon</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html\">函数式编程入门教程</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/03/reduce_transduce.html\">Reduce 和 Transduce 的含义</a></li>\n<li><a href=\"https://medium.com/@roman01la/understanding-transducers-in-javascript-3500d3bd9624\">Understanding Transducers in JavaScript</a></li>\n<li><a href=\"http://www.russbishop.net/monoids-monads-and-functors\">Functors, Applicatives, and Monads in Plain English</a></li>\n<li><a href=\"https://www.slideshare.net/kenbot/category-theory-for-beginners\">category theory for beginner</a></li>\n<li><a href=\"https://drboolean.gitbooks.io/mostly-adequate-guide/content/\">mostly adequate guide</a></li>\n<li><a href=\"https://medium.com/@tzehsiang/javascript-functor-applicative-monads-in-pictures-b567c6415221\">Javascript Functor, Applicative, Monads in pictures</a></li>\n<li><a href=\"http://stackoverflow.com/questions/36558598/cant-wrap-my-head-around-lift-in-ramda-js\">Can’t wrap my head around “lift” in Ramda.js</a></li>\n</ul>\n"},{"title":"GraphQL vs REST - My Review","date":"2017-08-11T05:31:47.000Z","_content":"\n# Prologue\nI heard there is a hype train of GraphQL. In order to find out how good it is, I decided to give GraphQL a try in my recently made side project - [graphql-sso-example](https://github.com/zushenyan/graphql-sso-example).\n\nAnd yep, it's a practice of GraphQL and SSO(Single Sign On). You can view the demo [here](https://graphql-sso.herokuapp.com/#/).\n\nSo there are already tons of articles talking about the comparison between REST and GraphQL, and combine with public article and my review. Here is the short version:\n\n# GraphQL vs REST - General Comparison\n### No Custom Status Code\nSince GraphQL doesn't care about transport layer error, You can't customize status code like REST.\n\nThe only way for clients to get them is putting them in the resolver (e.g. JSON response).\n\n### Increase Development Time\nGraphQL is a whole standalone tool for solving how APIs should present. You have to define schemes for a simple API response, which is an overkill sometimes.\n\n### REST Can Be Query Language Too\nGraphQL is an query language, and actually, you can make REST doing so by adding query to URL like `[GET] /api/user?include=email,name,age`.\n\n### Cache Missing\nSince all the GraphQL requests are sent in `POST` method, you can't use `browser caching` (with HTTP headers `etag` or `cache-control`) and `network caching`(reverse proxy like [varnish](https://www.varnish-cache.org/)).\n\nThe only way to cache it is by using `application caching`, for example Facebook's [dataloader](https://github.com/facebook/dataloader).\n\nHowever if you use REST in query `include` style, it also shares the similar issue.\n\n# TL;DR Conclusion\nGraphQL is not an replacement for REST. There is no winner. Both of them have its strength and weakness.\n\nIf you don't have data with highly relations dependency or the need for supporting various platforms (e.g. mobile, desktop, TV...), you probably don't need GraphQL.\n\nSince there is no exclusion between two, try using both of them if you really need to.\n\n# References\n- [GraphQL vs REST: Overview](https://philsturgeon.uk/api/2017/01/24/graphql-vs-rest-overview/)\n- [GraphQL vs REST: Caching](https://philsturgeon.uk/api/2017/01/26/graphql-vs-rest-caching/)\n","source":"_posts/2017-08-10-GraphQL-vs-REST-My-Review.md","raw":"---\ntitle: GraphQL vs REST - My Review\ndate: 2017-08-10 22:31:47\ntags: [GraphQL, REST, web, network, HTTP/HTTPS, backend]\n---\n\n# Prologue\nI heard there is a hype train of GraphQL. In order to find out how good it is, I decided to give GraphQL a try in my recently made side project - [graphql-sso-example](https://github.com/zushenyan/graphql-sso-example).\n\nAnd yep, it's a practice of GraphQL and SSO(Single Sign On). You can view the demo [here](https://graphql-sso.herokuapp.com/#/).\n\nSo there are already tons of articles talking about the comparison between REST and GraphQL, and combine with public article and my review. Here is the short version:\n\n# GraphQL vs REST - General Comparison\n### No Custom Status Code\nSince GraphQL doesn't care about transport layer error, You can't customize status code like REST.\n\nThe only way for clients to get them is putting them in the resolver (e.g. JSON response).\n\n### Increase Development Time\nGraphQL is a whole standalone tool for solving how APIs should present. You have to define schemes for a simple API response, which is an overkill sometimes.\n\n### REST Can Be Query Language Too\nGraphQL is an query language, and actually, you can make REST doing so by adding query to URL like `[GET] /api/user?include=email,name,age`.\n\n### Cache Missing\nSince all the GraphQL requests are sent in `POST` method, you can't use `browser caching` (with HTTP headers `etag` or `cache-control`) and `network caching`(reverse proxy like [varnish](https://www.varnish-cache.org/)).\n\nThe only way to cache it is by using `application caching`, for example Facebook's [dataloader](https://github.com/facebook/dataloader).\n\nHowever if you use REST in query `include` style, it also shares the similar issue.\n\n# TL;DR Conclusion\nGraphQL is not an replacement for REST. There is no winner. Both of them have its strength and weakness.\n\nIf you don't have data with highly relations dependency or the need for supporting various platforms (e.g. mobile, desktop, TV...), you probably don't need GraphQL.\n\nSince there is no exclusion between two, try using both of them if you really need to.\n\n# References\n- [GraphQL vs REST: Overview](https://philsturgeon.uk/api/2017/01/24/graphql-vs-rest-overview/)\n- [GraphQL vs REST: Caching](https://philsturgeon.uk/api/2017/01/26/graphql-vs-rest-caching/)\n","slug":"2017-08-10-GraphQL-vs-REST-My-Review","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol89000zvfvgcl680diu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Prologue\"><a href=\"#Prologue\" class=\"headerlink\" title=\"Prologue\"></a>Prologue</h1><p>I heard there is a hype train of GraphQL. In order to find out how good it is, I decided to give GraphQL a try in my recently made side project - <a href=\"https://github.com/zushenyan/graphql-sso-example\">graphql-sso-example</a>.</p>\n<p>And yep, it’s a practice of GraphQL and SSO(Single Sign On). You can view the demo <a href=\"https://graphql-sso.herokuapp.com/#/\">here</a>.</p>\n<p>So there are already tons of articles talking about the comparison between REST and GraphQL, and combine with public article and my review. Here is the short version:</p>\n<h1 id=\"GraphQL-vs-REST-General-Comparison\"><a href=\"#GraphQL-vs-REST-General-Comparison\" class=\"headerlink\" title=\"GraphQL vs REST - General Comparison\"></a>GraphQL vs REST - General Comparison</h1><h3 id=\"No-Custom-Status-Code\"><a href=\"#No-Custom-Status-Code\" class=\"headerlink\" title=\"No Custom Status Code\"></a>No Custom Status Code</h3><p>Since GraphQL doesn’t care about transport layer error, You can’t customize status code like REST.</p>\n<p>The only way for clients to get them is putting them in the resolver (e.g. JSON response).</p>\n<h3 id=\"Increase-Development-Time\"><a href=\"#Increase-Development-Time\" class=\"headerlink\" title=\"Increase Development Time\"></a>Increase Development Time</h3><p>GraphQL is a whole standalone tool for solving how APIs should present. You have to define schemes for a simple API response, which is an overkill sometimes.</p>\n<h3 id=\"REST-Can-Be-Query-Language-Too\"><a href=\"#REST-Can-Be-Query-Language-Too\" class=\"headerlink\" title=\"REST Can Be Query Language Too\"></a>REST Can Be Query Language Too</h3><p>GraphQL is an query language, and actually, you can make REST doing so by adding query to URL like <code>[GET] /api/user?include=email,name,age</code>.</p>\n<h3 id=\"Cache-Missing\"><a href=\"#Cache-Missing\" class=\"headerlink\" title=\"Cache Missing\"></a>Cache Missing</h3><p>Since all the GraphQL requests are sent in <code>POST</code> method, you can’t use <code>browser caching</code> (with HTTP headers <code>etag</code> or <code>cache-control</code>) and <code>network caching</code>(reverse proxy like <a href=\"https://www.varnish-cache.org/\">varnish</a>).</p>\n<p>The only way to cache it is by using <code>application caching</code>, for example Facebook’s <a href=\"https://github.com/facebook/dataloader\">dataloader</a>.</p>\n<p>However if you use REST in query <code>include</code> style, it also shares the similar issue.</p>\n<h1 id=\"TL-DR-Conclusion\"><a href=\"#TL-DR-Conclusion\" class=\"headerlink\" title=\"TL;DR Conclusion\"></a>TL;DR Conclusion</h1><p>GraphQL is not an replacement for REST. There is no winner. Both of them have its strength and weakness.</p>\n<p>If you don’t have data with highly relations dependency or the need for supporting various platforms (e.g. mobile, desktop, TV…), you probably don’t need GraphQL.</p>\n<p>Since there is no exclusion between two, try using both of them if you really need to.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://philsturgeon.uk/api/2017/01/24/graphql-vs-rest-overview/\">GraphQL vs REST: Overview</a></li>\n<li><a href=\"https://philsturgeon.uk/api/2017/01/26/graphql-vs-rest-caching/\">GraphQL vs REST: Caching</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Prologue\"><a href=\"#Prologue\" class=\"headerlink\" title=\"Prologue\"></a>Prologue</h1><p>I heard there is a hype train of GraphQL. In order to find out how good it is, I decided to give GraphQL a try in my recently made side project - <a href=\"https://github.com/zushenyan/graphql-sso-example\">graphql-sso-example</a>.</p>\n<p>And yep, it’s a practice of GraphQL and SSO(Single Sign On). You can view the demo <a href=\"https://graphql-sso.herokuapp.com/#/\">here</a>.</p>\n<p>So there are already tons of articles talking about the comparison between REST and GraphQL, and combine with public article and my review. Here is the short version:</p>\n<h1 id=\"GraphQL-vs-REST-General-Comparison\"><a href=\"#GraphQL-vs-REST-General-Comparison\" class=\"headerlink\" title=\"GraphQL vs REST - General Comparison\"></a>GraphQL vs REST - General Comparison</h1><h3 id=\"No-Custom-Status-Code\"><a href=\"#No-Custom-Status-Code\" class=\"headerlink\" title=\"No Custom Status Code\"></a>No Custom Status Code</h3><p>Since GraphQL doesn’t care about transport layer error, You can’t customize status code like REST.</p>\n<p>The only way for clients to get them is putting them in the resolver (e.g. JSON response).</p>\n<h3 id=\"Increase-Development-Time\"><a href=\"#Increase-Development-Time\" class=\"headerlink\" title=\"Increase Development Time\"></a>Increase Development Time</h3><p>GraphQL is a whole standalone tool for solving how APIs should present. You have to define schemes for a simple API response, which is an overkill sometimes.</p>\n<h3 id=\"REST-Can-Be-Query-Language-Too\"><a href=\"#REST-Can-Be-Query-Language-Too\" class=\"headerlink\" title=\"REST Can Be Query Language Too\"></a>REST Can Be Query Language Too</h3><p>GraphQL is an query language, and actually, you can make REST doing so by adding query to URL like <code>[GET] /api/user?include=email,name,age</code>.</p>\n<h3 id=\"Cache-Missing\"><a href=\"#Cache-Missing\" class=\"headerlink\" title=\"Cache Missing\"></a>Cache Missing</h3><p>Since all the GraphQL requests are sent in <code>POST</code> method, you can’t use <code>browser caching</code> (with HTTP headers <code>etag</code> or <code>cache-control</code>) and <code>network caching</code>(reverse proxy like <a href=\"https://www.varnish-cache.org/\">varnish</a>).</p>\n<p>The only way to cache it is by using <code>application caching</code>, for example Facebook’s <a href=\"https://github.com/facebook/dataloader\">dataloader</a>.</p>\n<p>However if you use REST in query <code>include</code> style, it also shares the similar issue.</p>\n<h1 id=\"TL-DR-Conclusion\"><a href=\"#TL-DR-Conclusion\" class=\"headerlink\" title=\"TL;DR Conclusion\"></a>TL;DR Conclusion</h1><p>GraphQL is not an replacement for REST. There is no winner. Both of them have its strength and weakness.</p>\n<p>If you don’t have data with highly relations dependency or the need for supporting various platforms (e.g. mobile, desktop, TV…), you probably don’t need GraphQL.</p>\n<p>Since there is no exclusion between two, try using both of them if you really need to.</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://philsturgeon.uk/api/2017/01/24/graphql-vs-rest-overview/\">GraphQL vs REST: Overview</a></li>\n<li><a href=\"https://philsturgeon.uk/api/2017/01/26/graphql-vs-rest-caching/\">GraphQL vs REST: Caching</a></li>\n</ul>\n"},{"title":"A Learning Note of Functional Programming Part 1 - Some Basic Concepts","date":"2017-04-06T05:08:57.000Z","_content":"\n# What makes FP great?\nFunctional Programming (FP) has been a trendy word for a while, but I wonder what makes people think FP is good? Here is my conclusion:\n\n## The need for concurrent/parallelism\nSince we got more than one core on CPU, we started thinking on how to process tasks more efficiently.\n\nTo achieve that we have to adapt the power of concurrent/parallelism, however the biggest problem of multithreading is **how do we make sure data shared between threads is safe**.\n\nIn imperative programming (or languages that are not encourage immutable), things are **mutable**, a variable can be modified by reference without creating a new one, but when it comes to multithreading, with mutable variables, developers will have to use `locks` to manage access permission between threads, but this technique doesn't solve this problem nicely, because the natural of variables are still mutable, once it causes bugs, it will cost developers lots of time to spot and solve issues.\n\nAnother point that makes FP shining is **declarative**. Declarative means telling computer what to do, and imperative, on the contrary, means arranging every command manually, step by step. The benefit of declarative is yielding the rights to rearrange commands for the compiler. This approach saves a lot of line of code, making your code more cleaner and easier to read.\n\n# Features of FP\n\n## First-class Function\nIt means you can pass functions as parameters or return functions as an result.\n\n```js\n// take function as a parameter\nconst foo = (cb) => {\n  console.log(\"hello world\");\n  cb();\n};\n\n// return function as an result\nconst bar = (name) => {\n  return () => {\n    console.log(`Hello ${name}`);\n  };\n};\n```\n\n## Pure Functions\nPure function means - every time you pass the same argument, you should get the same result. If a function violates the rule, then the function is **impure**. Things that can lead to impure are like depending on external result or IO.\n\n#### depending on external result\n```js\nlet a = 5;\n\nconst add5 = (num) => num + a;\n\na = 10;\n```\n\n#### IO\n```js\n// promise will return either result or failure.\nconst fetchData = () => fetch(\"http://some-awesome-service/api\");\n\nfetchData()\n  .then(result => console.log(result))\n  .catch(err => console.log(err));\n```\n\n## Referential Transparency\nYou can replace an expression with it's result without changing the meaning of program.\n\n```js\nconst add5 = (num) => num + 5;\nconst add10 = (num) => add5(add5(num));\n\n// or replace with\nconst add10 = (num) => num + 10;\n```\n\n## Lazy Evaluation\nThere is another term called **strict(eager) vs non-strict(lazy) evaluation**. Lazy evaluation means computing the result only when it's needed. Let's take `filter` for example, if we want to filter out the first 3 of the even numbers from a list of numbers, strict evaluation traverses all the elements in the list and return first 3 even numbers, but lazy evaluation will traverse until it meets the third odd number.\n\nThis approach might greatly improve performance because it doesn't traverse all the elements, but the down side is making evaluation on time complexity harder.\n\n```js\n// because JavaScript doesn't have lazy evaluation built-in, here I use lodash to help demonstration.\n\n// lodash will only perform lazy evaluation when elements length is larger than 200.\nconst arr = _.range(200);\n\nlet counter1 = 0;\nlet counter2 = 0;\n\n// strict evaluation\narr.filter(ele => {\n    counter1++;\n    return ele % 2 === 0;\n  })\n  .slice(3);\n\n// lazy evaluation\n_(arr).filter(ele => {\n    counter2++;\n    return ele % 2 === 0;\n  })\n  .take(3)\n  .value();\n\nconsole.log(counter1); // 200\nconsole.log(counter2); // 5\n```\n\n## Declarative vs Imperative\nDeclarative tells compiler what to do instead of telling commands step by step. By using declarative we hide the working details, which gives compiler the ability to rearrange the execution steps of commands.\n\n```js\nconst arr = [1,2,3,4,5];\n\n// declarative\narr.map(ele => ele + 1);\n\n// imperative (and mutable)\nfor(let i = 0; i < arr.length; i++){\n  arr[i] += 1;\n}\n```\n\n# References\n- [Functional Programming on Wikipedia](https://en.wikipedia.org/wiki/Functional_programming)\n- [Master the JavaScript Interview: What is Functional Programming?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0)\n- [Seven Concurrency Models Weeks Programmers](https://www.amazon.com/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653)\n","source":"_posts/2017-04-05-A-Learning-Note-to-Functional-Programming-Part-1.md","raw":"---\ntitle: A Learning Note of Functional Programming Part 1 - Some Basic Concepts\ndate: 2017-04-05 22:08:57\ntags: [meta, programming, javascript, FP]\n---\n\n# What makes FP great?\nFunctional Programming (FP) has been a trendy word for a while, but I wonder what makes people think FP is good? Here is my conclusion:\n\n## The need for concurrent/parallelism\nSince we got more than one core on CPU, we started thinking on how to process tasks more efficiently.\n\nTo achieve that we have to adapt the power of concurrent/parallelism, however the biggest problem of multithreading is **how do we make sure data shared between threads is safe**.\n\nIn imperative programming (or languages that are not encourage immutable), things are **mutable**, a variable can be modified by reference without creating a new one, but when it comes to multithreading, with mutable variables, developers will have to use `locks` to manage access permission between threads, but this technique doesn't solve this problem nicely, because the natural of variables are still mutable, once it causes bugs, it will cost developers lots of time to spot and solve issues.\n\nAnother point that makes FP shining is **declarative**. Declarative means telling computer what to do, and imperative, on the contrary, means arranging every command manually, step by step. The benefit of declarative is yielding the rights to rearrange commands for the compiler. This approach saves a lot of line of code, making your code more cleaner and easier to read.\n\n# Features of FP\n\n## First-class Function\nIt means you can pass functions as parameters or return functions as an result.\n\n```js\n// take function as a parameter\nconst foo = (cb) => {\n  console.log(\"hello world\");\n  cb();\n};\n\n// return function as an result\nconst bar = (name) => {\n  return () => {\n    console.log(`Hello ${name}`);\n  };\n};\n```\n\n## Pure Functions\nPure function means - every time you pass the same argument, you should get the same result. If a function violates the rule, then the function is **impure**. Things that can lead to impure are like depending on external result or IO.\n\n#### depending on external result\n```js\nlet a = 5;\n\nconst add5 = (num) => num + a;\n\na = 10;\n```\n\n#### IO\n```js\n// promise will return either result or failure.\nconst fetchData = () => fetch(\"http://some-awesome-service/api\");\n\nfetchData()\n  .then(result => console.log(result))\n  .catch(err => console.log(err));\n```\n\n## Referential Transparency\nYou can replace an expression with it's result without changing the meaning of program.\n\n```js\nconst add5 = (num) => num + 5;\nconst add10 = (num) => add5(add5(num));\n\n// or replace with\nconst add10 = (num) => num + 10;\n```\n\n## Lazy Evaluation\nThere is another term called **strict(eager) vs non-strict(lazy) evaluation**. Lazy evaluation means computing the result only when it's needed. Let's take `filter` for example, if we want to filter out the first 3 of the even numbers from a list of numbers, strict evaluation traverses all the elements in the list and return first 3 even numbers, but lazy evaluation will traverse until it meets the third odd number.\n\nThis approach might greatly improve performance because it doesn't traverse all the elements, but the down side is making evaluation on time complexity harder.\n\n```js\n// because JavaScript doesn't have lazy evaluation built-in, here I use lodash to help demonstration.\n\n// lodash will only perform lazy evaluation when elements length is larger than 200.\nconst arr = _.range(200);\n\nlet counter1 = 0;\nlet counter2 = 0;\n\n// strict evaluation\narr.filter(ele => {\n    counter1++;\n    return ele % 2 === 0;\n  })\n  .slice(3);\n\n// lazy evaluation\n_(arr).filter(ele => {\n    counter2++;\n    return ele % 2 === 0;\n  })\n  .take(3)\n  .value();\n\nconsole.log(counter1); // 200\nconsole.log(counter2); // 5\n```\n\n## Declarative vs Imperative\nDeclarative tells compiler what to do instead of telling commands step by step. By using declarative we hide the working details, which gives compiler the ability to rearrange the execution steps of commands.\n\n```js\nconst arr = [1,2,3,4,5];\n\n// declarative\narr.map(ele => ele + 1);\n\n// imperative (and mutable)\nfor(let i = 0; i < arr.length; i++){\n  arr[i] += 1;\n}\n```\n\n# References\n- [Functional Programming on Wikipedia](https://en.wikipedia.org/wiki/Functional_programming)\n- [Master the JavaScript Interview: What is Functional Programming?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0)\n- [Seven Concurrency Models Weeks Programmers](https://www.amazon.com/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653)\n","slug":"2017-04-05-A-Learning-Note-to-Functional-Programming-Part-1","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol8a0011vfvg7b1ngza0","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"What-makes-FP-great\"><a href=\"#What-makes-FP-great\" class=\"headerlink\" title=\"What makes FP great?\"></a>What makes FP great?</h1><p>Functional Programming (FP) has been a trendy word for a while, but I wonder what makes people think FP is good? Here is my conclusion:</p>\n<h2 id=\"The-need-for-concurrent-parallelism\"><a href=\"#The-need-for-concurrent-parallelism\" class=\"headerlink\" title=\"The need for concurrent&#x2F;parallelism\"></a>The need for concurrent&#x2F;parallelism</h2><p>Since we got more than one core on CPU, we started thinking on how to process tasks more efficiently.</p>\n<p>To achieve that we have to adapt the power of concurrent&#x2F;parallelism, however the biggest problem of multithreading is <strong>how do we make sure data shared between threads is safe</strong>.</p>\n<p>In imperative programming (or languages that are not encourage immutable), things are <strong>mutable</strong>, a variable can be modified by reference without creating a new one, but when it comes to multithreading, with mutable variables, developers will have to use <code>locks</code> to manage access permission between threads, but this technique doesn’t solve this problem nicely, because the natural of variables are still mutable, once it causes bugs, it will cost developers lots of time to spot and solve issues.</p>\n<p>Another point that makes FP shining is <strong>declarative</strong>. Declarative means telling computer what to do, and imperative, on the contrary, means arranging every command manually, step by step. The benefit of declarative is yielding the rights to rearrange commands for the compiler. This approach saves a lot of line of code, making your code more cleaner and easier to read.</p>\n<h1 id=\"Features-of-FP\"><a href=\"#Features-of-FP\" class=\"headerlink\" title=\"Features of FP\"></a>Features of FP</h1><h2 id=\"First-class-Function\"><a href=\"#First-class-Function\" class=\"headerlink\" title=\"First-class Function\"></a>First-class Function</h2><p>It means you can pass functions as parameters or return functions as an result.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// take function as a parameter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">cb</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// return function as an result</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">bar</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pure-Functions\"><a href=\"#Pure-Functions\" class=\"headerlink\" title=\"Pure Functions\"></a>Pure Functions</h2><p>Pure function means - every time you pass the same argument, you should get the same result. If a function violates the rule, then the function is <strong>impure</strong>. Things that can lead to impure are like depending on external result or IO.</p>\n<h4 id=\"depending-on-external-result\"><a href=\"#depending-on-external-result\" class=\"headerlink\" title=\"depending on external result\"></a>depending on external result</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add5</span> = (<span class=\"params\">num</span>) =&gt; num + a;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise will return either result or failure.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchData</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;http://some-awesome-service/api&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fetchData</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Referential-Transparency\"><a href=\"#Referential-Transparency\" class=\"headerlink\" title=\"Referential Transparency\"></a>Referential Transparency</h2><p>You can replace an expression with it’s result without changing the meaning of program.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add5</span> = (<span class=\"params\">num</span>) =&gt; num + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add10</span> = (<span class=\"params\">num</span>) =&gt; <span class=\"title function_\">add5</span>(<span class=\"title function_\">add5</span>(num));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or replace with</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add10</span> = (<span class=\"params\">num</span>) =&gt; num + <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lazy-Evaluation\"><a href=\"#Lazy-Evaluation\" class=\"headerlink\" title=\"Lazy Evaluation\"></a>Lazy Evaluation</h2><p>There is another term called <strong>strict(eager) vs non-strict(lazy) evaluation</strong>. Lazy evaluation means computing the result only when it’s needed. Let’s take <code>filter</code> for example, if we want to filter out the first 3 of the even numbers from a list of numbers, strict evaluation traverses all the elements in the list and return first 3 even numbers, but lazy evaluation will traverse until it meets the third odd number.</p>\n<p>This approach might greatly improve performance because it doesn’t traverse all the elements, but the down side is making evaluation on time complexity harder.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// because JavaScript doesn&#x27;t have lazy evaluation built-in, here I use lodash to help demonstration.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lodash will only perform lazy evaluation when elements length is larger than 200.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = _.<span class=\"title function_\">range</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> counter2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// strict evaluation</span></span><br><span class=\"line\">arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter1++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">slice</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lazy evaluation</span></span><br><span class=\"line\"><span class=\"title function_\">_</span>(arr).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter2++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">take</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">value</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(counter1); <span class=\"comment\">// 200</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(counter2); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Declarative-vs-Imperative\"><a href=\"#Declarative-vs-Imperative\" class=\"headerlink\" title=\"Declarative vs Imperative\"></a>Declarative vs Imperative</h2><p>Declarative tells compiler what to do instead of telling commands step by step. By using declarative we hide the working details, which gives compiler the ability to rearrange the execution steps of commands.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// declarative</span></span><br><span class=\"line\">arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> ele + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// imperative (and mutable)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++)&#123;</span><br><span class=\"line\">  arr[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Functional_programming\">Functional Programming on Wikipedia</a></li>\n<li><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0\">Master the JavaScript Interview: What is Functional Programming?</a></li>\n<li><a href=\"https://www.amazon.com/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653\">Seven Concurrency Models Weeks Programmers</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-makes-FP-great\"><a href=\"#What-makes-FP-great\" class=\"headerlink\" title=\"What makes FP great?\"></a>What makes FP great?</h1><p>Functional Programming (FP) has been a trendy word for a while, but I wonder what makes people think FP is good? Here is my conclusion:</p>\n<h2 id=\"The-need-for-concurrent-parallelism\"><a href=\"#The-need-for-concurrent-parallelism\" class=\"headerlink\" title=\"The need for concurrent&#x2F;parallelism\"></a>The need for concurrent&#x2F;parallelism</h2><p>Since we got more than one core on CPU, we started thinking on how to process tasks more efficiently.</p>\n<p>To achieve that we have to adapt the power of concurrent&#x2F;parallelism, however the biggest problem of multithreading is <strong>how do we make sure data shared between threads is safe</strong>.</p>\n<p>In imperative programming (or languages that are not encourage immutable), things are <strong>mutable</strong>, a variable can be modified by reference without creating a new one, but when it comes to multithreading, with mutable variables, developers will have to use <code>locks</code> to manage access permission between threads, but this technique doesn’t solve this problem nicely, because the natural of variables are still mutable, once it causes bugs, it will cost developers lots of time to spot and solve issues.</p>\n<p>Another point that makes FP shining is <strong>declarative</strong>. Declarative means telling computer what to do, and imperative, on the contrary, means arranging every command manually, step by step. The benefit of declarative is yielding the rights to rearrange commands for the compiler. This approach saves a lot of line of code, making your code more cleaner and easier to read.</p>\n<h1 id=\"Features-of-FP\"><a href=\"#Features-of-FP\" class=\"headerlink\" title=\"Features of FP\"></a>Features of FP</h1><h2 id=\"First-class-Function\"><a href=\"#First-class-Function\" class=\"headerlink\" title=\"First-class Function\"></a>First-class Function</h2><p>It means you can pass functions as parameters or return functions as an result.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// take function as a parameter</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">foo</span> = (<span class=\"params\">cb</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// return function as an result</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">bar</span> = (<span class=\"params\">name</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Pure-Functions\"><a href=\"#Pure-Functions\" class=\"headerlink\" title=\"Pure Functions\"></a>Pure Functions</h2><p>Pure function means - every time you pass the same argument, you should get the same result. If a function violates the rule, then the function is <strong>impure</strong>. Things that can lead to impure are like depending on external result or IO.</p>\n<h4 id=\"depending-on-external-result\"><a href=\"#depending-on-external-result\" class=\"headerlink\" title=\"depending on external result\"></a>depending on external result</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add5</span> = (<span class=\"params\">num</span>) =&gt; num + a;</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise will return either result or failure.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fetchData</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;http://some-awesome-service/api&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fetchData</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Referential-Transparency\"><a href=\"#Referential-Transparency\" class=\"headerlink\" title=\"Referential Transparency\"></a>Referential Transparency</h2><p>You can replace an expression with it’s result without changing the meaning of program.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add5</span> = (<span class=\"params\">num</span>) =&gt; num + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add10</span> = (<span class=\"params\">num</span>) =&gt; <span class=\"title function_\">add5</span>(<span class=\"title function_\">add5</span>(num));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or replace with</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">add10</span> = (<span class=\"params\">num</span>) =&gt; num + <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lazy-Evaluation\"><a href=\"#Lazy-Evaluation\" class=\"headerlink\" title=\"Lazy Evaluation\"></a>Lazy Evaluation</h2><p>There is another term called <strong>strict(eager) vs non-strict(lazy) evaluation</strong>. Lazy evaluation means computing the result only when it’s needed. Let’s take <code>filter</code> for example, if we want to filter out the first 3 of the even numbers from a list of numbers, strict evaluation traverses all the elements in the list and return first 3 even numbers, but lazy evaluation will traverse until it meets the third odd number.</p>\n<p>This approach might greatly improve performance because it doesn’t traverse all the elements, but the down side is making evaluation on time complexity harder.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// because JavaScript doesn&#x27;t have lazy evaluation built-in, here I use lodash to help demonstration.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lodash will only perform lazy evaluation when elements length is larger than 200.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = _.<span class=\"title function_\">range</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> counter1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> counter2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// strict evaluation</span></span><br><span class=\"line\">arr.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter1++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">slice</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lazy evaluation</span></span><br><span class=\"line\"><span class=\"title function_\">_</span>(arr).<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> &#123;</span><br><span class=\"line\">    counter2++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele % <span class=\"number\">2</span> === <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">take</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">value</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(counter1); <span class=\"comment\">// 200</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(counter2); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Declarative-vs-Imperative\"><a href=\"#Declarative-vs-Imperative\" class=\"headerlink\" title=\"Declarative vs Imperative\"></a>Declarative vs Imperative</h2><p>Declarative tells compiler what to do instead of telling commands step by step. By using declarative we hide the working details, which gives compiler the ability to rearrange the execution steps of commands.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// declarative</span></span><br><span class=\"line\">arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">ele</span> =&gt;</span> ele + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// imperative (and mutable)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++)&#123;</span><br><span class=\"line\">  arr[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Functional_programming\">Functional Programming on Wikipedia</a></li>\n<li><a href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0\">Master the JavaScript Interview: What is Functional Programming?</a></li>\n<li><a href=\"https://www.amazon.com/Seven-Concurrency-Models-Weeks-Programmers/dp/1937785653\">Seven Concurrency Models Weeks Programmers</a></li>\n</ul>\n"},{"layout":"post","title":"Front-end Job Interview Questions","date":"2015-12-13T17:14:51.000Z","_content":"\nSource\n---\n\n[Front-end Job Interview Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions)\n\nWon't answer every question. I don't know everything and some of them cover large enough to make standalone articles.\n\nGeneral Questions\n---\n\n> Talk about your preferred development environment.\n\nMac + Atom + Gulp + Webpack/Broserify + CLI.\n\n> Which version control systems are you familiar with?\n\nGit.\n\n> Can you describe your workflow when you create a web page?\n\n1. Build up working environment. e.g. create directories, set up webpack, initialize git...\n2. Outline what features the site should have.\n3. Outline the UI of the site.\n4. Start working on it. (Write tests if possible)\n\n> If you have 5 different stylesheets, how would you best integrate them into the site?\n\nAssume each stylesheet is a file, and works for different parts of the website. The first I would do is adding \"namespace\" for each stylesheet to prevent class name conflict. The second thing I would do is concatenating these files into 1 to improve website download speed and browser response time.\n\n> Can you describe the difference between progressive enhancement and graceful degradation?\n\nLet's take `print this page` for example.\n\n* Graceful Degradation - Provide a feature, but if the feature doesn't exist in older browsers, provide a lower level feature.\n\n```html\n<a href=\"javascript:print()\">print this page</a>\n<noscript>\n\t<p>You have to enable JavaScript to use this feature.</p>\n</noscript>\n```\n\nShows no script text only when client disabled JavaScript.\n\n* Progressive Enhancement - Provide a feature, upgrade it only when current environment supports advanced functionality.\n\n```html\n<p>Please print this page.</p>\n<script>\n\t(function(){\n\t\t// append a button under text above.\n\t\t// invoke print() when button is pressed.\n\t})();\n</script>\n```\n\nAssume client disabled JavaScript, show button if JavaScript is allowed.\n\n[Reference](https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement)\n\n> How would you optimize a website's assets/resources?\n\n* Minifying and bundling JS/CSS/HTML files - It can be done via some tools like Webpack or Uglify.\n* Image sprite - Make many images into one big image file.\n* Image inlining - Transform images into base64 string and inline them directly into HTML files.\n* Image resizing - If no need to render images in actual resolution, resize it.\n* Image compressing - Compress your into a smaller piece.\n* Gzip - Enable gzip content compression on server side.\n* Cache - Specify Cache-Control attribute for each file header on server side.\n* CDN(Content Deliver Network) - Put resources into different domains to break the limitation of maximum connection count.\n\nAssets/resourcess optimization is a way to reduce request times under HTTP/1.1 protocol.\n\nBesides minifying, compressing, gzip and cache, I don't see any reason to do rest approaches once HTTP/2 becomes popular, thanks to multiplex.\n\n> How many resources will a browser download from a given domain at a time? What are the exceptions?\n\nRanges from 6 to 8 connections per domain. It depends on what browser is user using.\n\nThe exceptions are SPDY and HTTP/2 protocols. Browsers that support these protocols only have to open one connection to download resources.\n\n> Name 3 ways to decrease page load (perceived or actual load time).\n\nSince I have already talked explained about optimization in \"How would you optimize a website's assets/resources?\" section, here I will only talk about actual load time:\n\n* Put `link` in `head` section - This will make browser load stylesheets first.\n* Put `script` at the bottom of document - Do this to prevent browser from render blocking.\n* Enable `async` attribute in HTML5 - Specifying `async` attribute on `script` tag to allow browser executing code and parse page at the same time.\n* Don't use complicated css query - `#foo ul li .bar` nested and complicated query like this. It is time costly for browsers to parse.\n\n> Describe how you would create a simple slideshow page.\n\nI think some points are needed to be clarified first:\n\n1. What platforms will this application support? Browser? Mobile Browser? Desktop? Mobile Native App?\n2. What screen size does this application target for?\n3. What browser version will this application support down to?\n4. What feature does it really have?\n5. What is the estimated time schedule?\n\nSecond:\n\n1. What tool should I use? Is it well documented? Does it have an active community for asking help?\n2. What techniques might this application have involved?\n3. Is there any similar work or tutorial that I can learn with?\n\n> What is Flash of Unstyled Content? How do you avoid FOUC?\n\nBrowser renders default stylesheet(unstyled) before external stylesheet is received/loaded. The transition state between default stylesheet to external stylesheet is called FOUC.\n\nThis is caused by putting `link` tag to stylesheets after the `head` tag, or with `@import` because it loads stylesheet asynchronously.\n\nSolution is pretty simple - put `link` in `head` and don't use `@import`.\n\n> Explain some of the pros and cons for CSS animations versus JavaScript animations.\n\nCSS Animation\n\n- Pros\n  - Natively GPU supported on mobile.\n\t- Easy to use.\n- cons\n  - Asynchronous actions, pause, stop... complicated animation control not possible.\n\t- Not supported by older browsers. Even if it supports, not every browser has the same implementation.\n\t- Hard to organize when animation grows.\n\nJavaScript Animation\n\n- Pros\n  - GPU support.\n\t- Compared to CSS 3 animation, it is more widely supported.\n\t- Can do complicated flow control.\n- Cons\n  - Steep learning curve compares to CSS 3 animation.\n\n> What does CORS stand for and what issue does it address?\n\nCross-Origin-Resource-Sharing, CORS, is a standard mechanism that let you access cross-domain resources with normal ajax request.\n\nWithout CORS, you can only access services from other domain via JSONP or server proxy.\n\nYou can enable this by simply adding an attribute in your file header from server side:\n\n```\nAccess-Control-Allow-Origin: http://my-domain-name.com\n```\n\nHTML Questions\n---\n\n> What does a doctype do?\n\nAlso known as Document Type Definition - DTD.\n\nThere are many versions of HTML(e.g. HTML4.1, XHTML...). By defining `<!DOCTYPE html>` at the top of your HTML file tells the browser what's the current version of HTML your are using, and it let browser to parse your page in that standard.\n\nDocument with doctype declared will enter standard mode, otherwise or lack of URL will result in quirk mode.\n\n> What's the difference between standards mode and quirks mode?\n\nQuirks mode - also stands for **non-standard** mode or **backward-compability** mode, browsers will parse things a little different from standard mode.\n\nStandard mode - also known as **strict mode**, browsers will follow mostly part of W3 specification for parsing.\n\nWithout declaring `<!DOCTYPE html>` may trigger quirks mode in older browsers.\n\n[Quirks Mode and Standards Mode](https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode)\n\n> What's the difference between HTML and XHTML?\n\nXHTML stands for eXtensible HTML. You can also think it as HTML in XML or strict syntax HTML.\n\nBy sending `application/xhtml-xml` MIME type, browsers will treat this document as an XML file.\n\nThere are many minor differences between HTML and XHTML. Here I only name a few:\n\n* All elements should have always be closed.\n* Attributes must be lower case.\n* Attributes minimization is not allowed.\n\nFor full specification visit [w3c](http://www.w3.org/TR/xhtml1/)\n\n> Are there any problems with serving pages as application/xhtml+xml?\n\nBy doing this will let browsers treat this document as an XML file, which turns HTML into XHTML.\n\nOn IE 6,7,8 this will prompt a download dialog instead of rendering document.\n\n> What are data- attributes good for?\n\nYou can define your own attributes. Saving data or state in an element instead of having another variable for recording in JavaScript.\n\n> Describe the difference between a cookie, sessionStorage and localStorage.\n\nCookie\n\n* Can access via JavaScript, or be disallowed to access via JavaScript via `http-only` attribute in header.\n* Limited counts per domain.\n* Only store up to 4 kb.\n* Will be transmitted via packet in header.\n* Can be sent to or set by server.\n* Have various attributes to set via `Set-Cookie` attribute in header.\n\nSession and local storage are all HTML5's API and also called web storage. They do mostly the same, except session storage delete data when session ends while local storage does not.\n\nWeb storage can hold up to 5 to 10 MB for each domain.\n\n[What is the difference between localStorage, sessionStorage, session and cookies?](http://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies)\n\n> Describe the difference between `<script>`, `<script async>` and `<script defer>`.\n\n`<script>` - load and execute script synchronously. Browser will execute the code if encounter `<script>`. Will cause blocking.\n\n`<script async>` - load and execute script asynchronously. Browser will execute the code and load other resource parallel. Will not cause blocking.\n\n`<script defer>` - load and execute script synchronously. The only different is that it indicates browser should only execute the code only after the document is parsed.\n\n> Why is it generally a good idea to position CSS `<link>`s between `<head></head>` and JS `<script>`s just before `</body>`? Do you know any exceptions?\n\nPut CSS `<link>` in between `<head>` to avoid FOUC. Put `<script>` before `</before>` to avoid parse blocking.\n\nSpecifying `async` or `defer` in `<script>` if you really want to put `<script>` before `<link>`.\n\n> What is progressive rendering?\n\nIt's actually an backend topic.\n\n> Have you used different HTML templating languages before?\n\nejs.\n\nCSS Questions\n---\n\n> What is the difference between classes and ID's in CSS?\n\nClass stands for a collection of attributes under a name. It can be applied on many elements with same name(one to many). However, ID is unique to element and can only be applied on one element with the same ID(one to one).\n\n> What's the difference between \"resetting\" and \"normalizing\" CSS? Which would you choose, and why?\n\nReset - undecorates or sets 0 to all browser default styles. You have to specify all styles yourself.\n\nNormalize - preserves and ensures that default style on all browsers are the same.\n\nI prefer normalize because go with reset will have to do extra works.\n\n[What is the difference between Normalize.css and Reset CSS?](http://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css)\n\n> Describe Floats and how they work.\n\nFloat is a CSS property that should be taken from the normal flow and placed to the right or left of its container. Text or any inline element will wrap around it.\n\nIf an element has specified a value on float, that element's `display` property will be set to `block`.\n\nIt is always used with `clear` property to make desired element move down to the floated element. A common technique is **clearfix**\n\n```css\n.container:after {\n\tcontent: \"\";\n\tclear: both;\n}\n```\n\n> Describe z-index and how stacking context is formed.\n\nWhen elements overlap, `z-index` specifies the displaying order of an element. Larger z-index covers element with a lower one.\n\nNew elements in a container always follow parent's `z-index` value.\n\n`z-index` can be negative to have elements displaying below.\n\n> What are the various clearing techniques and which is appropriate for what context?\n\nTraditional way:\n\n```css\n.clear {\n\tclear: both;\n}\n```\n\n```html\n<div class=\"container\">\n\t<div class=\"float\">foo</div>\n\t<div class=\"float\">bar</div>\n\t<br class=\"clear\" />\n</div>\n<div class=\"footer\">This container should be cleared</div>\n```\n\nOverflow way:\n\n```css\n.container {\n\toverflow: hidden;\n}\n```\n\n```html\n<div class=\"container\">\n\t<div class=\"float\">foo</div>\n\t<div class=\"float\">bar</div>\n</div>\n<div class=\"footer\">This container should be cleared</div>\n```\n\nClearfix:\n\n```css\n.clearfix:after {\n\tclear: both;\n}\n```\n\n```html\n<div class=\"container clearfix\">\n\t<div class=\"float\">foo</div>\n\t<div class=\"float\">bar</div>\n</div>\n<div class=\"footer\">This container should be cleared</div>\n```\n\n> What are your favourite image replacement techniques and which do you use when?\n\n[image replacement](https://css-tricks.com/the-image-replacement-museum/)\n\n> How would you approach fixing browser-specific styling issues?\n\nsee \"What's the difference between \"resetting\" and \"normalizing\" CSS? Which would you choose, and why?\".\n\n> What are the different ways to visually hide content (and make it available only for screen readers)?\n\n`display: none` or `visibility: hidden`.\n\nElement with `display: none` will take place in view even it's invisible.\n\nElement with `display: none` will not take place in view.\n\n> Have you ever used a grid system, and if so, what do you prefer?\n\nOnly experienced grid system in Twitter Bootstrap.\n\n> Have you used or implemented media queries or mobile specific layouts/CSS?\n\nHand-made? Sure, but actually, I use Twitter Bootstrap to solve RWD problems.\n\n> What are the advantages/disadvantages of using CSS preprocessors? Describe what you like and dislike about the CSS preprocessors you have used.\n\nSCSS.\n\nAdvantages:\n\n* More ways like inheritance, variable... for writing modularized CSS.\n* Some libraries like Bourbon, Compass provide nice polyfills.\n\nDisadvantages:\n\n* Extra learning/traning required.\n* Need to setup up working environment before work begin.\n\n> Explain how a browser determines what elements match a CSS selector.\n\nThe only thing I know is that browser matches selector from right to left.\n\n> Describe pseudo-elements and discuss what they are used for.\n\nPseudo-elements like `element::first-child` or `element::after` are special elements that make styling more easy.\n\nFor example `p::first-line` will only style the first line of every paragraph.\n\n> Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.\n\nBox model indicates element is composed of 4 parts: margin. border, padding, content.\n\n* Margin - an empty area used for separating area with other elements.\n* Border - the thickness between padding and margin.\n* Padding - extending of content area.\n* Content - the space text/media occupies.\n\nYou can switch box model with `content-box` and `border-box` in `box-sizing`. Default value is `content-box`.\n\n* `content-box` - The `width` and `height` properties are measured only content size, no padding, border, or margin.\n* `box-sizing` - The `width` and `height` properties are measured including content, padding, border, no margin.\n\n> What does * { box-sizing: border-box; } do? What are its advantages?\n\nUsing `border-box` to calculate elements' `width` and `height` is more intuitive.\n\nSay, I want to put 4 boxes in a horizontal block. Using `content-box` I have to calculate each box's border and content to fit into container, but using `border-box` I only have to set `width:25%` on each box and set each box's border without calculating.\n\n> List as many values for the display property that you can remember.\n\n* block\n* inline-block\n* inline\n* flex\n* inline-flex\n* none\n* table\n* inline-table\n* initial\n* inherit\n* ...\n\n[Display CSS property on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\n\n> What's the difference between inline and inline-block?\n\nBrowser will put elements with `display: inline-*` property on the same row. The difference between `inline` and `inline-block` is that `inline` elements with content empty won't effect by `width` or `height`.\n\n> What's the difference between a relative, fixed, absolute and statically positioned element?\n\n* Fixed - elements will be positioned independently and its' position is according to the whole view.\n* Static - default value. Elements will be positioned depending on each other whose `position` property is not `absolute` or `fixed`.\n* Relative - enable `top`, `bottom`, `left` and `right` properties, which let you move element relative to where it should be.\n* Absolute - enable `top`, `bottom`, `left` and `right` properties. Elements with `position: absolute` will be positioned independently or be positioned according to the nearest container with `position: relative`.\n\n> The 'C' in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?\n\n`!important > style > id > class > tag`\n\nIf I really want something should not be changed, I will use `!important` to keep my style like it should be. Especially where you have other 3rd party, external stylesheets import in, styles may be conflict between each other, you will want to keep your own style untouched.\n\n> What existing CSS frameworks have you used locally, or in production? How would you change/improve them?\n\nTwitter Bootstrap, Bourbon, SCSS/SASS.\n\nPersonally, I use them to help me enhance UI or get rid of some repeat works.\n\n> Have you played around with the new CSS Flexbox or Grid specs?\n\nTried Flexbox before, enough to replace some old trick like `float` and also works really well in RWD.\n\nTried Grid as well. It arranges layout beautifully and works well with media queries in RWD also.\n\n> How is responsive design different from adaptive design?\n\nResponsive - adapt different devices with one layout with minimum change.\n\n* pros - easy to maintain.\n* cons - screen sizes are many, however in most RWD only have 4 layout - desktop/latop/tablet/mobile, which only provides a basic comfort level, not the best user experience.\n\nAdaptive - adapt different devices with different layouts.\n\n* pros - provides best experience on different devices.\n* cons - maintaining between layouts means extra work.\n\nJS Questions:\n---\n\n> Explain event delegation\n\nEvent delegation means using parent container as children's event delegator. For example, we have a list here:\n\n```html\n<ul id=\"list\">\n\t<li id=\"list-1\">I am list item 1</li>\n\t<li id=\"list-2\">I am list item 2</li>\n\t<li id=\"list-3\">I am list item 3</li>\n</ul>\n```\n\nWe want to get inner text when clicking on one of its child. Of course, we can add event listener to each one, but it will become a little crazy if we have to add more list item.\n\nBy the power of **event bubbling**, there is an more elegant way to deal with this issue.\n\n```js\ndocument.getElementById(\"list\").addEventListener(\"click\", function(e){\n\tconsole.log(e.target.innerText);\n});\n```\n\n> Explain how this works in JavaScript\n\n`this` means the current owner of the scope.\n\nWhen an object is created via `new`, JS binds `this` to the newly created object.\n\n> Explain how prototypal inheritance works\n\nIn ES5\n\n```js\nvar Person = function(name){\n\tthis.name = name;\n}\n\nvar John = function(name){\n\tPerson.call(this, name);\n}\n\nJohn.prototype = Object.create(Person.prototype); // reference prototype to Person's prototype\nJohn.prototype.constructor = Person; // set John's constructor to Person's constructor\n```\n\nIn ES6. It's identical to ES5 prototype inheritance chain.\n\n```js\nclass Person{\n\tconstructor(name){\n\t\tthis.name = name;\n\t}\n};\n\nclass John extends Person{\n\tconstructor(name){\n\t\tsuepr(name);\n\t}\n}\n```\n\n> What do you think of AMD vs CommonJS?\n\nAMD is an JS module standard. Its implementation is RequireJS and only works on browser side. Meanwhile CommonJS works on server side.\n\nWriting in RequireJS is somewhat cumbersome:\n\n```js\nrequirejs([\"directory/anotherJsFile\"], function(anotherJsFile){\n\t// do something\n});\n```\n\nCommonJS is more intuitive to programmers coming from other languages:\n\n```js\nvar anotherJsFile = require(\"./directory/anotherJsFile\");\n\nvar myObj = myObj;\n\nmodule.exports = myObj;\n```\n\n> Explain why the following doesn't work as an IIFE: function foo(){ }();. What needs to be changed to properly make it an IIFE?\n\n`function foo(){ }()` which is equal to `undefined()`. Executing things undefined is not possible.\n\nThe correct way is:\n\n```js\n(foo(){\n\t// do something.\n})();\n```\n\n> What's the difference between a variable that is: null, undefined or undeclared? How would you go about checking for any of these states?\n\n* undeclared - use variables before declaring interpreter will throw `ReferenceError: variable is not defined` in your face.\n* undefined - use an declared variable without initializing its value will return `undefined`.\n* null - `null` is a value to represent empty.\n\nChecking state, assume its in Chrome console:\n\n```js\n> a\nReferenceError: a is not defined\n> var a\n> a\nundefined\n> a === null\nfalse\n```\n\n> What is a closure, and how/why would you use one?\n\nThe most common usage is to return private member's value without exposing it.\n\n```js\nfunction(){\n\tvar secret = {code: \"can't tell you!\"};\n\treturn (function(){\n\t\treturn secret;\n\t})();\n}\n```\n\nPersonally I would try to avoid using it if possible because closure extends variables' lifespan to its scope. This causes memory leak easily plus it's quite confusing to people coming from other languages.\n\n> What's a typical use case for anonymous functions?\n\nWhen I only need to do things one-time only or don't even invoke it in further.\n\n> How do you organize your code? (module pattern, classical inheritance?)\n\nI write ES6 with Babel and organize my module with ES6 `import` and `export` features.\n\nAs for `inheritance`, use `extends` instead.\n\n> What's the difference between host objects and native objects?\n\nHost objects means browser specific features. For example, DOM objects in Chrome is possibly different from IE.\n\nNative objects means JavaScript's core feature like `array` or `Object`.\n\n> Difference between: function Person(){}, var person = Person(), and var person = new Person()?\n\n* `function Person(){}` - a function.\n* `var person = Person()` - returns the result after executing Person function.\n* `var person = new Person()` - bind `this` in `person` scope to `person`.\n\n> What's the difference between .call and .apply?\n\nBoth of them invokes function they are calling for.\n\nFirst argument accepts what `this` refers to when running that function.\n\nThe only difference is that `.call` accepts rest of the arguments with **arguments list** while `.apply` accepts **array of arguments**.\n\n> Explain Function.prototype.bind.\n\nIndicates what `this` refers to when running that function.\n\n`Function.prototype.bind` only returns function, not executing.\n\n> When would you use document.write()?\n\nTesting.\n\n> What's the difference between feature detection, feature inference, and using the UA string?\n\nFeature detection tests the existence of a feature.\n\n```js\nif(window.XMLHttpRequest){\n\tvar ajax = new XMLHttpRequest();\n}\n```\n\nFeature inference checks if one feature exits, but uses another feature.\n\n```js\nif(document.getElementByTagName){\n\tvar ele = document.getElementById(\"myEle\");\n}\n```\n\nUA string means identifying browser version with user agent. It should not be used anymore because you will have to maintain various version for different browsers.\n\n```js\nif(navigator.userAgent.indexOf(\"MSIE 7\")){\n\t// do something\n}\n```\n\n> Explain AJAX in as much detail as possible.\n\nAJAX stands for Asynchronous JavaScript and XML. It's a technique to retrieve data from server without reloading the whole page.\n\nThis is how it is done in vanilla JS and modern browser.\n\n```js\nvar ajax = new XMLHttpRequest();\najax.addEventListener(\"load\", function(){\n\tconsole.log(ajax.responseText);\n});\najax.open(\"GET\", \"http://mydomain.com\");\najax.send();\n```\n\n> Explain how JSONP works (and how it's not really AJAX).\n\nJSONP stands for JSON with Padding. JSONP doesn't involve in AJAX at all and actually. To achieve JSONP, we need the help from the server side. Server side's code looks like this:\n\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nvar querystring = require(\"querystring\");\n\nhttp.createServer(function(req, res){\n  var queryTemp = url.parse(req.url).query;\n  var query = querystring.parse(queryTemp);\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\"\n  });\n  res.end(query.callback + \"('Hello JSONP!')\");\n}).listen(3001);\n```\n\nClient:\n\n```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>jsonp test</title>\n    <script id=\"jsonp\"></script>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">jsonp!</button>\n    <script>\n      var text = document.getElementById(\"text\");\n      var button = document.getElementById(\"button\");\n      var jsonp = document.getElementById(\"jsonp\");\n\n      function contentLoaded(){\n        button.addEventListener(\"click\", function(e){\n          jsonp.src= \"http://localhost:3001/?callback=changeText\";\n        });\n      }\n\n      function changeText(string){\n        text.appendChild(document.createTextNode(string));\n      }\n\n      window.addEventListener(\"DOMContentLoaded\", contentLoaded);\n    </script>\n  </body>\n</html>\n```\n\nWe fetch data by changing `<script>`'s `src` value to our target URL, and append full JavaScript code by gluing with result:\n\n```html\n<script src=\"jsonp\">\n\tchangeText('Hello JSONP!')\n</script>\n```\n\n> Have you ever used JavaScript templating? If so, what libraries have you used?\n\nEJS.\n\n> Explain \"hoisting\".\n\nHoisting means any variable declaration will be processed before any code is executed in **current scope**. Take code below for example:\n\n```js\na = 5;\nvar a;\n```\n\nis equal to\n\n```js\nvar a;\na = 5;\n```\n\n> Describe event bubbling.\n\nWhen an event is fired, it runs a callback function defined external. The event will keep **bubbling up** to its ancestor container until it hits the root of DOM or `event.stopPropagation()`.\n\nSee \"event delegation\" for detail.\n\n> What's the difference between an \"attribute\" and a \"property\"?\n\nProperty is for DOM object or native JS object and attribute is for HTML tag.\n\n> Why is extending built-in JavaScript objects not a good idea?\n\nIf you only have your own code in your work, that's fine, but when libraries are add in, extending native object may cause other's code broken because of overwriting other's code.\n\n> Difference between document load event and document ready event?\n\nThere is no such `ready` event in DOM, so I assume `document ready` refers to jQuery's `$(document).ready` here.\n\n`load` event in DOM tells browser to do something after **everthing including frames, images, asynchronous JavaScripts** are fully loaded.\n\n`$(document).ready` indicates that it should occur as early as possible after the document has loaded.\n\n> What is the difference between == and ===?\n\n`==` equals in value, `===` equals in reference.\n\n> Explain the same-origin policy with regards to JavaScript.\n\nSame-Origin-Policy is an idea to prevent malicious script from accessing or intercepting data's in client browser. Same-Oirigin-Policy allows HTTP action request only if document and server are under the same domain.\n\nThere are two ways to \"bypass\" SOP, one is JSONP, the other is through CORS(Cross Origin Resource Sharing).\n\nRead \"Explain how JSONP works (and how it's not really AJAX).\" for JSONP details.\n\nCORS needs cooperation from server setting. You have to set `Access-Control-Origin-Allow: yourdomain.com` to domains which you want it to be allowed in header in order to access resource via normal AJAX call.\n\n> Why is it called a Ternary expression, what does the word \"Ternary\" indicate?\n\nBecause it takes 3 arguments with 2 operators. A common Ternary expression is `:?`.\n\n> What is \"use strict\";? what are the advantages and disadvantages to using it?\n\n`use strict;` enables strict mode for JS parser. Strict mode is enabled by adding `use strict;` at the top of file or function scope.\n\nAdvantages - converts mistakes into errors.\n\n* Using undeclared variable throws error.\n* Using reserved keywords throws error.\n* Naming arguments, properties with the same name throws error.\n* and so on...\n\nDisadvantages\n\n* If you import script with strict mode on before any other scripts, you will force other scripts to go strict mode.\n\n[strict mode on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\n\n> Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?\n\nBecause you probably will make a variable with same name as others will. That makes conflict.\n\n> Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?\n\n`load` event tells browser to do something only after **everthing including frames, images, asynchronous JavaScripts** are fully loaded.\n\nIf you want event function to execute before fully loaded frames, images, async scripts, use `domcontentloaded` instead.\n\n> Explain what a single page app is and how to make one SEO-friendly.\n\n> What is the extent of your experience with Promises and/or their polyfills?\n\nOnly tried it in ES6. Basic usage:\n\n```js\nnew Promise((resolve, rejected) => {\n\tif(resolve){\n\t\treslove(\"successed\");\n\t}\n\telse{\n\t\trejected(\"failed\");\n\t}\n})\n.then((result) => {\n\tconsole.log(result);\n})\n.then((result) => {\n\tconsole.log(result);\n});\n```\n\nThe biggest advangtage of Promise is that it solves the problem of callback hell.\n\nPolyfills:\n\n* jQuery - Deferred\n* Bluebird\n* Q\n* When\n\n> What are the pros and cons of using Promises instead of callbacks?\n\npros - solves the problem of callback hell.\ncons - currently require external library or polyfill to achieve this.\n\n> What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?\n\nPros\n\n* Benefit libraries that only exist in NodeJS world. (Make CommonJS stuff avialable on browser)\n* The newest of language features.\n\nCons\n\n* Have to setup environment before working.\n* Have to orgranize more directories.\n* Source map is needed.\n\n> What tools and techniques do you use debugging JavaScript code?\n\nChrome Dev Tools.\n\n> What language constructions do you use for iterating over object properties and array items?\n\nArray\n\n* classic `for`\n* `arr.forEach()`\n\nObject\n\n* `for(var key in obj)`\n* `Object.keys(obj).forEach()`\n\n> Explain the difference between mutable and immutable objects. What is an example of an immutable object in JavaScript? What are the pros and cons of immutability? How can you achieve immutability in your own code?\n\nMutable object means its state is allowed to be changed over time. Immutable object's value doesn't change from the time it was created.\n\nImmutable examples are primitive types like `String`, `Number`. You can't change the definition of `2` after executing `2 + 5`. No matter how you operate strings, the definition of `c` won't change.\n\nMutable examples are `array`, `object` or anything opposite to immutability. You can change the value of an array or object anytime and the result will be what you desired.\n\nImmutable object won't be changed after it has been initialized. We can take advantage of this. Making immutable objects into a collection of cache since these objects don't change at all. Our program is actually accessing the same data. This is a good approach to saving memory by taking advantage of immutable. The downside of immutability is that it actually involving constantly deep clone and assigning. This is an overhead of trading computing speed for memory.\n\nTo achieve immutability on `array` or `object` or any type you want, you have to do deep clone, or simply use library like `immutable.js` developed by Facebook.\n\n> Explain the difference between synchronous and asynchronous functions.\n\nThe difference is that sync function is **blocking** while async is **non-blocking**.\n\n```js\nfunction blocking(){\n\tconsole.log(\"1\");\n\tconsole.log(\"2\");\n}\n\nfunction nonBlocking(){\n\tsetTimeout(function(){\n\t\tconsole.log(\"1\");\n\t}, 1000);\n\tconsole.log(\"2\");\n}\n```\n\n> What is event loop? What is the difference between call stack and task queue?\n\nEvent loop is how JavaScript with single-threaded performs tasks without blocking.\n\nEvent loop is a queue of callback functions. When a asynchronous function executes, it is pushed into task queue and JavaScript will only start processing task queue after codes after async function are executed.\n\nThe difference between call stack and task queue is that **task queue** is a place where JavaScrip schedules async function while **call stack** is a place for JavaScript to trace what the current function is.\n\nNetwork Questions\n---\n\n> Traditionally, why has it been better to serve site assets from multiple domains?\n\nBecause request is costly, so modern browsers establish 6 to 8 reusable connections to improve the download speed to prevent repeatly requsting, and because there is a limited connection count for each domain, we put resources on multiple domains.\n\n> Do your best to describe the process from the time you type in a website's URL to it finishing loading on your screen.\n\nAssume there is only HTTP request, no proxies:\n\n1. Browser look up cache, if document exists in cache and not expires, then renders it.\n2. OS makes DNS lookup of the IP address of given URL and replies to browser.\n3. If that URL exists, browser opens a TCP connection to server.\n4. Browser sends HTTP request to server.\n5. Server parses HTTP request, sends it and may or may not close TCP connection(depends on `keep-alive` in header setting).\n6. Browser parses HTTP status code and depends on what code it is to decide what to render.\n\n> What are the differences between Long-Polling, Websockets and Server-Sent Events?\n\nLong-Polling - use `setTimeout` and `AJAX` technique to repeatedly send request and wait for server response. Before websockets, web developer used to use this technique to simulate persistent connection.\n\nWebsocket - a real persistent connection via TCP. Unlike long-polling have to setup HTTP connection with constantly requesting, once establishing websocket you don't have to send another request to maintain the connection.\n\nServer-sent - also called server push technique. When it comes to data exchange, servers are always passive, but with server push, server can be active too. Server push is like broadcast, whoever connects to the server is a subscriber. Server push can push desired event on specific channel.\n\n> Explain the following request and response headers:\n> Diff. between Expires, Date, Age and If-Modified-...\n> Do Not Track\n> Cache-Control\n> Transfer-Encoding\n> ETag\n> X-Frame-Options\n\n* Expires - will be labeled stale after specified date.\n* Date - The date and time that message was sent.\n* Age - The age that object has lived in seconds.\n* If-Modified-Since - will return 304 unchanged status code.\n* Transfer-encoding - In normal circumstance server will tell client the content length which server sent, but in some circumstance the content's length remains unknown, and server will send content in chunks. Specifying Transfer-encoding tells client server is sending in this way.\n* ETag - an hash which is used to identify files's version.\n* X-Frame-Options - clickjacking protection.\n* Cache-Control - an attribute tells browser how\n\n> What are HTTP actions? List all HTTP actions that you know, and explain them.\n\n* GET - request a resource.\n* POST - create or update an resource.\n* PUT - update an existing resource.\n* DELETE - delete resource.\n* PATCH - partially modification to an resource.\n* TRACE - echoes the received request so you can see information that is changed by intermediated servers.\n* HEAD - request a response header identical to GET method. It's used to get meta information without sending the whole content.\n* OPTIONS - returns what method target server supports for a specified URL.\n* CONNECT - converts a request connection to as transparent TCP/IP.\n","source":"_posts/2015-12-13-front-end-job-interview-questions.markdown","raw":"---\nlayout: post\ntitle: \"Front-end Job Interview Questions\"\ndate: 2015-12-13T17:14:51+08:00\ntags: [frontend, web, interview]\n---\n\nSource\n---\n\n[Front-end Job Interview Questions](https://github.com/h5bp/Front-end-Developer-Interview-Questions)\n\nWon't answer every question. I don't know everything and some of them cover large enough to make standalone articles.\n\nGeneral Questions\n---\n\n> Talk about your preferred development environment.\n\nMac + Atom + Gulp + Webpack/Broserify + CLI.\n\n> Which version control systems are you familiar with?\n\nGit.\n\n> Can you describe your workflow when you create a web page?\n\n1. Build up working environment. e.g. create directories, set up webpack, initialize git...\n2. Outline what features the site should have.\n3. Outline the UI of the site.\n4. Start working on it. (Write tests if possible)\n\n> If you have 5 different stylesheets, how would you best integrate them into the site?\n\nAssume each stylesheet is a file, and works for different parts of the website. The first I would do is adding \"namespace\" for each stylesheet to prevent class name conflict. The second thing I would do is concatenating these files into 1 to improve website download speed and browser response time.\n\n> Can you describe the difference between progressive enhancement and graceful degradation?\n\nLet's take `print this page` for example.\n\n* Graceful Degradation - Provide a feature, but if the feature doesn't exist in older browsers, provide a lower level feature.\n\n```html\n<a href=\"javascript:print()\">print this page</a>\n<noscript>\n\t<p>You have to enable JavaScript to use this feature.</p>\n</noscript>\n```\n\nShows no script text only when client disabled JavaScript.\n\n* Progressive Enhancement - Provide a feature, upgrade it only when current environment supports advanced functionality.\n\n```html\n<p>Please print this page.</p>\n<script>\n\t(function(){\n\t\t// append a button under text above.\n\t\t// invoke print() when button is pressed.\n\t})();\n</script>\n```\n\nAssume client disabled JavaScript, show button if JavaScript is allowed.\n\n[Reference](https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement)\n\n> How would you optimize a website's assets/resources?\n\n* Minifying and bundling JS/CSS/HTML files - It can be done via some tools like Webpack or Uglify.\n* Image sprite - Make many images into one big image file.\n* Image inlining - Transform images into base64 string and inline them directly into HTML files.\n* Image resizing - If no need to render images in actual resolution, resize it.\n* Image compressing - Compress your into a smaller piece.\n* Gzip - Enable gzip content compression on server side.\n* Cache - Specify Cache-Control attribute for each file header on server side.\n* CDN(Content Deliver Network) - Put resources into different domains to break the limitation of maximum connection count.\n\nAssets/resourcess optimization is a way to reduce request times under HTTP/1.1 protocol.\n\nBesides minifying, compressing, gzip and cache, I don't see any reason to do rest approaches once HTTP/2 becomes popular, thanks to multiplex.\n\n> How many resources will a browser download from a given domain at a time? What are the exceptions?\n\nRanges from 6 to 8 connections per domain. It depends on what browser is user using.\n\nThe exceptions are SPDY and HTTP/2 protocols. Browsers that support these protocols only have to open one connection to download resources.\n\n> Name 3 ways to decrease page load (perceived or actual load time).\n\nSince I have already talked explained about optimization in \"How would you optimize a website's assets/resources?\" section, here I will only talk about actual load time:\n\n* Put `link` in `head` section - This will make browser load stylesheets first.\n* Put `script` at the bottom of document - Do this to prevent browser from render blocking.\n* Enable `async` attribute in HTML5 - Specifying `async` attribute on `script` tag to allow browser executing code and parse page at the same time.\n* Don't use complicated css query - `#foo ul li .bar` nested and complicated query like this. It is time costly for browsers to parse.\n\n> Describe how you would create a simple slideshow page.\n\nI think some points are needed to be clarified first:\n\n1. What platforms will this application support? Browser? Mobile Browser? Desktop? Mobile Native App?\n2. What screen size does this application target for?\n3. What browser version will this application support down to?\n4. What feature does it really have?\n5. What is the estimated time schedule?\n\nSecond:\n\n1. What tool should I use? Is it well documented? Does it have an active community for asking help?\n2. What techniques might this application have involved?\n3. Is there any similar work or tutorial that I can learn with?\n\n> What is Flash of Unstyled Content? How do you avoid FOUC?\n\nBrowser renders default stylesheet(unstyled) before external stylesheet is received/loaded. The transition state between default stylesheet to external stylesheet is called FOUC.\n\nThis is caused by putting `link` tag to stylesheets after the `head` tag, or with `@import` because it loads stylesheet asynchronously.\n\nSolution is pretty simple - put `link` in `head` and don't use `@import`.\n\n> Explain some of the pros and cons for CSS animations versus JavaScript animations.\n\nCSS Animation\n\n- Pros\n  - Natively GPU supported on mobile.\n\t- Easy to use.\n- cons\n  - Asynchronous actions, pause, stop... complicated animation control not possible.\n\t- Not supported by older browsers. Even if it supports, not every browser has the same implementation.\n\t- Hard to organize when animation grows.\n\nJavaScript Animation\n\n- Pros\n  - GPU support.\n\t- Compared to CSS 3 animation, it is more widely supported.\n\t- Can do complicated flow control.\n- Cons\n  - Steep learning curve compares to CSS 3 animation.\n\n> What does CORS stand for and what issue does it address?\n\nCross-Origin-Resource-Sharing, CORS, is a standard mechanism that let you access cross-domain resources with normal ajax request.\n\nWithout CORS, you can only access services from other domain via JSONP or server proxy.\n\nYou can enable this by simply adding an attribute in your file header from server side:\n\n```\nAccess-Control-Allow-Origin: http://my-domain-name.com\n```\n\nHTML Questions\n---\n\n> What does a doctype do?\n\nAlso known as Document Type Definition - DTD.\n\nThere are many versions of HTML(e.g. HTML4.1, XHTML...). By defining `<!DOCTYPE html>` at the top of your HTML file tells the browser what's the current version of HTML your are using, and it let browser to parse your page in that standard.\n\nDocument with doctype declared will enter standard mode, otherwise or lack of URL will result in quirk mode.\n\n> What's the difference between standards mode and quirks mode?\n\nQuirks mode - also stands for **non-standard** mode or **backward-compability** mode, browsers will parse things a little different from standard mode.\n\nStandard mode - also known as **strict mode**, browsers will follow mostly part of W3 specification for parsing.\n\nWithout declaring `<!DOCTYPE html>` may trigger quirks mode in older browsers.\n\n[Quirks Mode and Standards Mode](https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode)\n\n> What's the difference between HTML and XHTML?\n\nXHTML stands for eXtensible HTML. You can also think it as HTML in XML or strict syntax HTML.\n\nBy sending `application/xhtml-xml` MIME type, browsers will treat this document as an XML file.\n\nThere are many minor differences between HTML and XHTML. Here I only name a few:\n\n* All elements should have always be closed.\n* Attributes must be lower case.\n* Attributes minimization is not allowed.\n\nFor full specification visit [w3c](http://www.w3.org/TR/xhtml1/)\n\n> Are there any problems with serving pages as application/xhtml+xml?\n\nBy doing this will let browsers treat this document as an XML file, which turns HTML into XHTML.\n\nOn IE 6,7,8 this will prompt a download dialog instead of rendering document.\n\n> What are data- attributes good for?\n\nYou can define your own attributes. Saving data or state in an element instead of having another variable for recording in JavaScript.\n\n> Describe the difference between a cookie, sessionStorage and localStorage.\n\nCookie\n\n* Can access via JavaScript, or be disallowed to access via JavaScript via `http-only` attribute in header.\n* Limited counts per domain.\n* Only store up to 4 kb.\n* Will be transmitted via packet in header.\n* Can be sent to or set by server.\n* Have various attributes to set via `Set-Cookie` attribute in header.\n\nSession and local storage are all HTML5's API and also called web storage. They do mostly the same, except session storage delete data when session ends while local storage does not.\n\nWeb storage can hold up to 5 to 10 MB for each domain.\n\n[What is the difference between localStorage, sessionStorage, session and cookies?](http://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies)\n\n> Describe the difference between `<script>`, `<script async>` and `<script defer>`.\n\n`<script>` - load and execute script synchronously. Browser will execute the code if encounter `<script>`. Will cause blocking.\n\n`<script async>` - load and execute script asynchronously. Browser will execute the code and load other resource parallel. Will not cause blocking.\n\n`<script defer>` - load and execute script synchronously. The only different is that it indicates browser should only execute the code only after the document is parsed.\n\n> Why is it generally a good idea to position CSS `<link>`s between `<head></head>` and JS `<script>`s just before `</body>`? Do you know any exceptions?\n\nPut CSS `<link>` in between `<head>` to avoid FOUC. Put `<script>` before `</before>` to avoid parse blocking.\n\nSpecifying `async` or `defer` in `<script>` if you really want to put `<script>` before `<link>`.\n\n> What is progressive rendering?\n\nIt's actually an backend topic.\n\n> Have you used different HTML templating languages before?\n\nejs.\n\nCSS Questions\n---\n\n> What is the difference between classes and ID's in CSS?\n\nClass stands for a collection of attributes under a name. It can be applied on many elements with same name(one to many). However, ID is unique to element and can only be applied on one element with the same ID(one to one).\n\n> What's the difference between \"resetting\" and \"normalizing\" CSS? Which would you choose, and why?\n\nReset - undecorates or sets 0 to all browser default styles. You have to specify all styles yourself.\n\nNormalize - preserves and ensures that default style on all browsers are the same.\n\nI prefer normalize because go with reset will have to do extra works.\n\n[What is the difference between Normalize.css and Reset CSS?](http://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css)\n\n> Describe Floats and how they work.\n\nFloat is a CSS property that should be taken from the normal flow and placed to the right or left of its container. Text or any inline element will wrap around it.\n\nIf an element has specified a value on float, that element's `display` property will be set to `block`.\n\nIt is always used with `clear` property to make desired element move down to the floated element. A common technique is **clearfix**\n\n```css\n.container:after {\n\tcontent: \"\";\n\tclear: both;\n}\n```\n\n> Describe z-index and how stacking context is formed.\n\nWhen elements overlap, `z-index` specifies the displaying order of an element. Larger z-index covers element with a lower one.\n\nNew elements in a container always follow parent's `z-index` value.\n\n`z-index` can be negative to have elements displaying below.\n\n> What are the various clearing techniques and which is appropriate for what context?\n\nTraditional way:\n\n```css\n.clear {\n\tclear: both;\n}\n```\n\n```html\n<div class=\"container\">\n\t<div class=\"float\">foo</div>\n\t<div class=\"float\">bar</div>\n\t<br class=\"clear\" />\n</div>\n<div class=\"footer\">This container should be cleared</div>\n```\n\nOverflow way:\n\n```css\n.container {\n\toverflow: hidden;\n}\n```\n\n```html\n<div class=\"container\">\n\t<div class=\"float\">foo</div>\n\t<div class=\"float\">bar</div>\n</div>\n<div class=\"footer\">This container should be cleared</div>\n```\n\nClearfix:\n\n```css\n.clearfix:after {\n\tclear: both;\n}\n```\n\n```html\n<div class=\"container clearfix\">\n\t<div class=\"float\">foo</div>\n\t<div class=\"float\">bar</div>\n</div>\n<div class=\"footer\">This container should be cleared</div>\n```\n\n> What are your favourite image replacement techniques and which do you use when?\n\n[image replacement](https://css-tricks.com/the-image-replacement-museum/)\n\n> How would you approach fixing browser-specific styling issues?\n\nsee \"What's the difference between \"resetting\" and \"normalizing\" CSS? Which would you choose, and why?\".\n\n> What are the different ways to visually hide content (and make it available only for screen readers)?\n\n`display: none` or `visibility: hidden`.\n\nElement with `display: none` will take place in view even it's invisible.\n\nElement with `display: none` will not take place in view.\n\n> Have you ever used a grid system, and if so, what do you prefer?\n\nOnly experienced grid system in Twitter Bootstrap.\n\n> Have you used or implemented media queries or mobile specific layouts/CSS?\n\nHand-made? Sure, but actually, I use Twitter Bootstrap to solve RWD problems.\n\n> What are the advantages/disadvantages of using CSS preprocessors? Describe what you like and dislike about the CSS preprocessors you have used.\n\nSCSS.\n\nAdvantages:\n\n* More ways like inheritance, variable... for writing modularized CSS.\n* Some libraries like Bourbon, Compass provide nice polyfills.\n\nDisadvantages:\n\n* Extra learning/traning required.\n* Need to setup up working environment before work begin.\n\n> Explain how a browser determines what elements match a CSS selector.\n\nThe only thing I know is that browser matches selector from right to left.\n\n> Describe pseudo-elements and discuss what they are used for.\n\nPseudo-elements like `element::first-child` or `element::after` are special elements that make styling more easy.\n\nFor example `p::first-line` will only style the first line of every paragraph.\n\n> Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.\n\nBox model indicates element is composed of 4 parts: margin. border, padding, content.\n\n* Margin - an empty area used for separating area with other elements.\n* Border - the thickness between padding and margin.\n* Padding - extending of content area.\n* Content - the space text/media occupies.\n\nYou can switch box model with `content-box` and `border-box` in `box-sizing`. Default value is `content-box`.\n\n* `content-box` - The `width` and `height` properties are measured only content size, no padding, border, or margin.\n* `box-sizing` - The `width` and `height` properties are measured including content, padding, border, no margin.\n\n> What does * { box-sizing: border-box; } do? What are its advantages?\n\nUsing `border-box` to calculate elements' `width` and `height` is more intuitive.\n\nSay, I want to put 4 boxes in a horizontal block. Using `content-box` I have to calculate each box's border and content to fit into container, but using `border-box` I only have to set `width:25%` on each box and set each box's border without calculating.\n\n> List as many values for the display property that you can remember.\n\n* block\n* inline-block\n* inline\n* flex\n* inline-flex\n* none\n* table\n* inline-table\n* initial\n* inherit\n* ...\n\n[Display CSS property on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\n\n> What's the difference between inline and inline-block?\n\nBrowser will put elements with `display: inline-*` property on the same row. The difference between `inline` and `inline-block` is that `inline` elements with content empty won't effect by `width` or `height`.\n\n> What's the difference between a relative, fixed, absolute and statically positioned element?\n\n* Fixed - elements will be positioned independently and its' position is according to the whole view.\n* Static - default value. Elements will be positioned depending on each other whose `position` property is not `absolute` or `fixed`.\n* Relative - enable `top`, `bottom`, `left` and `right` properties, which let you move element relative to where it should be.\n* Absolute - enable `top`, `bottom`, `left` and `right` properties. Elements with `position: absolute` will be positioned independently or be positioned according to the nearest container with `position: relative`.\n\n> The 'C' in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?\n\n`!important > style > id > class > tag`\n\nIf I really want something should not be changed, I will use `!important` to keep my style like it should be. Especially where you have other 3rd party, external stylesheets import in, styles may be conflict between each other, you will want to keep your own style untouched.\n\n> What existing CSS frameworks have you used locally, or in production? How would you change/improve them?\n\nTwitter Bootstrap, Bourbon, SCSS/SASS.\n\nPersonally, I use them to help me enhance UI or get rid of some repeat works.\n\n> Have you played around with the new CSS Flexbox or Grid specs?\n\nTried Flexbox before, enough to replace some old trick like `float` and also works really well in RWD.\n\nTried Grid as well. It arranges layout beautifully and works well with media queries in RWD also.\n\n> How is responsive design different from adaptive design?\n\nResponsive - adapt different devices with one layout with minimum change.\n\n* pros - easy to maintain.\n* cons - screen sizes are many, however in most RWD only have 4 layout - desktop/latop/tablet/mobile, which only provides a basic comfort level, not the best user experience.\n\nAdaptive - adapt different devices with different layouts.\n\n* pros - provides best experience on different devices.\n* cons - maintaining between layouts means extra work.\n\nJS Questions:\n---\n\n> Explain event delegation\n\nEvent delegation means using parent container as children's event delegator. For example, we have a list here:\n\n```html\n<ul id=\"list\">\n\t<li id=\"list-1\">I am list item 1</li>\n\t<li id=\"list-2\">I am list item 2</li>\n\t<li id=\"list-3\">I am list item 3</li>\n</ul>\n```\n\nWe want to get inner text when clicking on one of its child. Of course, we can add event listener to each one, but it will become a little crazy if we have to add more list item.\n\nBy the power of **event bubbling**, there is an more elegant way to deal with this issue.\n\n```js\ndocument.getElementById(\"list\").addEventListener(\"click\", function(e){\n\tconsole.log(e.target.innerText);\n});\n```\n\n> Explain how this works in JavaScript\n\n`this` means the current owner of the scope.\n\nWhen an object is created via `new`, JS binds `this` to the newly created object.\n\n> Explain how prototypal inheritance works\n\nIn ES5\n\n```js\nvar Person = function(name){\n\tthis.name = name;\n}\n\nvar John = function(name){\n\tPerson.call(this, name);\n}\n\nJohn.prototype = Object.create(Person.prototype); // reference prototype to Person's prototype\nJohn.prototype.constructor = Person; // set John's constructor to Person's constructor\n```\n\nIn ES6. It's identical to ES5 prototype inheritance chain.\n\n```js\nclass Person{\n\tconstructor(name){\n\t\tthis.name = name;\n\t}\n};\n\nclass John extends Person{\n\tconstructor(name){\n\t\tsuepr(name);\n\t}\n}\n```\n\n> What do you think of AMD vs CommonJS?\n\nAMD is an JS module standard. Its implementation is RequireJS and only works on browser side. Meanwhile CommonJS works on server side.\n\nWriting in RequireJS is somewhat cumbersome:\n\n```js\nrequirejs([\"directory/anotherJsFile\"], function(anotherJsFile){\n\t// do something\n});\n```\n\nCommonJS is more intuitive to programmers coming from other languages:\n\n```js\nvar anotherJsFile = require(\"./directory/anotherJsFile\");\n\nvar myObj = myObj;\n\nmodule.exports = myObj;\n```\n\n> Explain why the following doesn't work as an IIFE: function foo(){ }();. What needs to be changed to properly make it an IIFE?\n\n`function foo(){ }()` which is equal to `undefined()`. Executing things undefined is not possible.\n\nThe correct way is:\n\n```js\n(foo(){\n\t// do something.\n})();\n```\n\n> What's the difference between a variable that is: null, undefined or undeclared? How would you go about checking for any of these states?\n\n* undeclared - use variables before declaring interpreter will throw `ReferenceError: variable is not defined` in your face.\n* undefined - use an declared variable without initializing its value will return `undefined`.\n* null - `null` is a value to represent empty.\n\nChecking state, assume its in Chrome console:\n\n```js\n> a\nReferenceError: a is not defined\n> var a\n> a\nundefined\n> a === null\nfalse\n```\n\n> What is a closure, and how/why would you use one?\n\nThe most common usage is to return private member's value without exposing it.\n\n```js\nfunction(){\n\tvar secret = {code: \"can't tell you!\"};\n\treturn (function(){\n\t\treturn secret;\n\t})();\n}\n```\n\nPersonally I would try to avoid using it if possible because closure extends variables' lifespan to its scope. This causes memory leak easily plus it's quite confusing to people coming from other languages.\n\n> What's a typical use case for anonymous functions?\n\nWhen I only need to do things one-time only or don't even invoke it in further.\n\n> How do you organize your code? (module pattern, classical inheritance?)\n\nI write ES6 with Babel and organize my module with ES6 `import` and `export` features.\n\nAs for `inheritance`, use `extends` instead.\n\n> What's the difference between host objects and native objects?\n\nHost objects means browser specific features. For example, DOM objects in Chrome is possibly different from IE.\n\nNative objects means JavaScript's core feature like `array` or `Object`.\n\n> Difference between: function Person(){}, var person = Person(), and var person = new Person()?\n\n* `function Person(){}` - a function.\n* `var person = Person()` - returns the result after executing Person function.\n* `var person = new Person()` - bind `this` in `person` scope to `person`.\n\n> What's the difference between .call and .apply?\n\nBoth of them invokes function they are calling for.\n\nFirst argument accepts what `this` refers to when running that function.\n\nThe only difference is that `.call` accepts rest of the arguments with **arguments list** while `.apply` accepts **array of arguments**.\n\n> Explain Function.prototype.bind.\n\nIndicates what `this` refers to when running that function.\n\n`Function.prototype.bind` only returns function, not executing.\n\n> When would you use document.write()?\n\nTesting.\n\n> What's the difference between feature detection, feature inference, and using the UA string?\n\nFeature detection tests the existence of a feature.\n\n```js\nif(window.XMLHttpRequest){\n\tvar ajax = new XMLHttpRequest();\n}\n```\n\nFeature inference checks if one feature exits, but uses another feature.\n\n```js\nif(document.getElementByTagName){\n\tvar ele = document.getElementById(\"myEle\");\n}\n```\n\nUA string means identifying browser version with user agent. It should not be used anymore because you will have to maintain various version for different browsers.\n\n```js\nif(navigator.userAgent.indexOf(\"MSIE 7\")){\n\t// do something\n}\n```\n\n> Explain AJAX in as much detail as possible.\n\nAJAX stands for Asynchronous JavaScript and XML. It's a technique to retrieve data from server without reloading the whole page.\n\nThis is how it is done in vanilla JS and modern browser.\n\n```js\nvar ajax = new XMLHttpRequest();\najax.addEventListener(\"load\", function(){\n\tconsole.log(ajax.responseText);\n});\najax.open(\"GET\", \"http://mydomain.com\");\najax.send();\n```\n\n> Explain how JSONP works (and how it's not really AJAX).\n\nJSONP stands for JSON with Padding. JSONP doesn't involve in AJAX at all and actually. To achieve JSONP, we need the help from the server side. Server side's code looks like this:\n\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nvar querystring = require(\"querystring\");\n\nhttp.createServer(function(req, res){\n  var queryTemp = url.parse(req.url).query;\n  var query = querystring.parse(queryTemp);\n  res.writeHeader(200, {\n    \"content-type\": \"text/plain\"\n  });\n  res.end(query.callback + \"('Hello JSONP!')\");\n}).listen(3001);\n```\n\nClient:\n\n```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>jsonp test</title>\n    <script id=\"jsonp\"></script>\n  </head>\n  <body>\n    <div id=\"text\"></div>\n    <button id=\"button\">jsonp!</button>\n    <script>\n      var text = document.getElementById(\"text\");\n      var button = document.getElementById(\"button\");\n      var jsonp = document.getElementById(\"jsonp\");\n\n      function contentLoaded(){\n        button.addEventListener(\"click\", function(e){\n          jsonp.src= \"http://localhost:3001/?callback=changeText\";\n        });\n      }\n\n      function changeText(string){\n        text.appendChild(document.createTextNode(string));\n      }\n\n      window.addEventListener(\"DOMContentLoaded\", contentLoaded);\n    </script>\n  </body>\n</html>\n```\n\nWe fetch data by changing `<script>`'s `src` value to our target URL, and append full JavaScript code by gluing with result:\n\n```html\n<script src=\"jsonp\">\n\tchangeText('Hello JSONP!')\n</script>\n```\n\n> Have you ever used JavaScript templating? If so, what libraries have you used?\n\nEJS.\n\n> Explain \"hoisting\".\n\nHoisting means any variable declaration will be processed before any code is executed in **current scope**. Take code below for example:\n\n```js\na = 5;\nvar a;\n```\n\nis equal to\n\n```js\nvar a;\na = 5;\n```\n\n> Describe event bubbling.\n\nWhen an event is fired, it runs a callback function defined external. The event will keep **bubbling up** to its ancestor container until it hits the root of DOM or `event.stopPropagation()`.\n\nSee \"event delegation\" for detail.\n\n> What's the difference between an \"attribute\" and a \"property\"?\n\nProperty is for DOM object or native JS object and attribute is for HTML tag.\n\n> Why is extending built-in JavaScript objects not a good idea?\n\nIf you only have your own code in your work, that's fine, but when libraries are add in, extending native object may cause other's code broken because of overwriting other's code.\n\n> Difference between document load event and document ready event?\n\nThere is no such `ready` event in DOM, so I assume `document ready` refers to jQuery's `$(document).ready` here.\n\n`load` event in DOM tells browser to do something after **everthing including frames, images, asynchronous JavaScripts** are fully loaded.\n\n`$(document).ready` indicates that it should occur as early as possible after the document has loaded.\n\n> What is the difference between == and ===?\n\n`==` equals in value, `===` equals in reference.\n\n> Explain the same-origin policy with regards to JavaScript.\n\nSame-Origin-Policy is an idea to prevent malicious script from accessing or intercepting data's in client browser. Same-Oirigin-Policy allows HTTP action request only if document and server are under the same domain.\n\nThere are two ways to \"bypass\" SOP, one is JSONP, the other is through CORS(Cross Origin Resource Sharing).\n\nRead \"Explain how JSONP works (and how it's not really AJAX).\" for JSONP details.\n\nCORS needs cooperation from server setting. You have to set `Access-Control-Origin-Allow: yourdomain.com` to domains which you want it to be allowed in header in order to access resource via normal AJAX call.\n\n> Why is it called a Ternary expression, what does the word \"Ternary\" indicate?\n\nBecause it takes 3 arguments with 2 operators. A common Ternary expression is `:?`.\n\n> What is \"use strict\";? what are the advantages and disadvantages to using it?\n\n`use strict;` enables strict mode for JS parser. Strict mode is enabled by adding `use strict;` at the top of file or function scope.\n\nAdvantages - converts mistakes into errors.\n\n* Using undeclared variable throws error.\n* Using reserved keywords throws error.\n* Naming arguments, properties with the same name throws error.\n* and so on...\n\nDisadvantages\n\n* If you import script with strict mode on before any other scripts, you will force other scripts to go strict mode.\n\n[strict mode on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)\n\n> Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?\n\nBecause you probably will make a variable with same name as others will. That makes conflict.\n\n> Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?\n\n`load` event tells browser to do something only after **everthing including frames, images, asynchronous JavaScripts** are fully loaded.\n\nIf you want event function to execute before fully loaded frames, images, async scripts, use `domcontentloaded` instead.\n\n> Explain what a single page app is and how to make one SEO-friendly.\n\n> What is the extent of your experience with Promises and/or their polyfills?\n\nOnly tried it in ES6. Basic usage:\n\n```js\nnew Promise((resolve, rejected) => {\n\tif(resolve){\n\t\treslove(\"successed\");\n\t}\n\telse{\n\t\trejected(\"failed\");\n\t}\n})\n.then((result) => {\n\tconsole.log(result);\n})\n.then((result) => {\n\tconsole.log(result);\n});\n```\n\nThe biggest advangtage of Promise is that it solves the problem of callback hell.\n\nPolyfills:\n\n* jQuery - Deferred\n* Bluebird\n* Q\n* When\n\n> What are the pros and cons of using Promises instead of callbacks?\n\npros - solves the problem of callback hell.\ncons - currently require external library or polyfill to achieve this.\n\n> What are some of the advantages/disadvantages of writing JavaScript code in a language that compiles to JavaScript?\n\nPros\n\n* Benefit libraries that only exist in NodeJS world. (Make CommonJS stuff avialable on browser)\n* The newest of language features.\n\nCons\n\n* Have to setup environment before working.\n* Have to orgranize more directories.\n* Source map is needed.\n\n> What tools and techniques do you use debugging JavaScript code?\n\nChrome Dev Tools.\n\n> What language constructions do you use for iterating over object properties and array items?\n\nArray\n\n* classic `for`\n* `arr.forEach()`\n\nObject\n\n* `for(var key in obj)`\n* `Object.keys(obj).forEach()`\n\n> Explain the difference between mutable and immutable objects. What is an example of an immutable object in JavaScript? What are the pros and cons of immutability? How can you achieve immutability in your own code?\n\nMutable object means its state is allowed to be changed over time. Immutable object's value doesn't change from the time it was created.\n\nImmutable examples are primitive types like `String`, `Number`. You can't change the definition of `2` after executing `2 + 5`. No matter how you operate strings, the definition of `c` won't change.\n\nMutable examples are `array`, `object` or anything opposite to immutability. You can change the value of an array or object anytime and the result will be what you desired.\n\nImmutable object won't be changed after it has been initialized. We can take advantage of this. Making immutable objects into a collection of cache since these objects don't change at all. Our program is actually accessing the same data. This is a good approach to saving memory by taking advantage of immutable. The downside of immutability is that it actually involving constantly deep clone and assigning. This is an overhead of trading computing speed for memory.\n\nTo achieve immutability on `array` or `object` or any type you want, you have to do deep clone, or simply use library like `immutable.js` developed by Facebook.\n\n> Explain the difference between synchronous and asynchronous functions.\n\nThe difference is that sync function is **blocking** while async is **non-blocking**.\n\n```js\nfunction blocking(){\n\tconsole.log(\"1\");\n\tconsole.log(\"2\");\n}\n\nfunction nonBlocking(){\n\tsetTimeout(function(){\n\t\tconsole.log(\"1\");\n\t}, 1000);\n\tconsole.log(\"2\");\n}\n```\n\n> What is event loop? What is the difference between call stack and task queue?\n\nEvent loop is how JavaScript with single-threaded performs tasks without blocking.\n\nEvent loop is a queue of callback functions. When a asynchronous function executes, it is pushed into task queue and JavaScript will only start processing task queue after codes after async function are executed.\n\nThe difference between call stack and task queue is that **task queue** is a place where JavaScrip schedules async function while **call stack** is a place for JavaScript to trace what the current function is.\n\nNetwork Questions\n---\n\n> Traditionally, why has it been better to serve site assets from multiple domains?\n\nBecause request is costly, so modern browsers establish 6 to 8 reusable connections to improve the download speed to prevent repeatly requsting, and because there is a limited connection count for each domain, we put resources on multiple domains.\n\n> Do your best to describe the process from the time you type in a website's URL to it finishing loading on your screen.\n\nAssume there is only HTTP request, no proxies:\n\n1. Browser look up cache, if document exists in cache and not expires, then renders it.\n2. OS makes DNS lookup of the IP address of given URL and replies to browser.\n3. If that URL exists, browser opens a TCP connection to server.\n4. Browser sends HTTP request to server.\n5. Server parses HTTP request, sends it and may or may not close TCP connection(depends on `keep-alive` in header setting).\n6. Browser parses HTTP status code and depends on what code it is to decide what to render.\n\n> What are the differences between Long-Polling, Websockets and Server-Sent Events?\n\nLong-Polling - use `setTimeout` and `AJAX` technique to repeatedly send request and wait for server response. Before websockets, web developer used to use this technique to simulate persistent connection.\n\nWebsocket - a real persistent connection via TCP. Unlike long-polling have to setup HTTP connection with constantly requesting, once establishing websocket you don't have to send another request to maintain the connection.\n\nServer-sent - also called server push technique. When it comes to data exchange, servers are always passive, but with server push, server can be active too. Server push is like broadcast, whoever connects to the server is a subscriber. Server push can push desired event on specific channel.\n\n> Explain the following request and response headers:\n> Diff. between Expires, Date, Age and If-Modified-...\n> Do Not Track\n> Cache-Control\n> Transfer-Encoding\n> ETag\n> X-Frame-Options\n\n* Expires - will be labeled stale after specified date.\n* Date - The date and time that message was sent.\n* Age - The age that object has lived in seconds.\n* If-Modified-Since - will return 304 unchanged status code.\n* Transfer-encoding - In normal circumstance server will tell client the content length which server sent, but in some circumstance the content's length remains unknown, and server will send content in chunks. Specifying Transfer-encoding tells client server is sending in this way.\n* ETag - an hash which is used to identify files's version.\n* X-Frame-Options - clickjacking protection.\n* Cache-Control - an attribute tells browser how\n\n> What are HTTP actions? List all HTTP actions that you know, and explain them.\n\n* GET - request a resource.\n* POST - create or update an resource.\n* PUT - update an existing resource.\n* DELETE - delete resource.\n* PATCH - partially modification to an resource.\n* TRACE - echoes the received request so you can see information that is changed by intermediated servers.\n* HEAD - request a response header identical to GET method. It's used to get meta information without sending the whole content.\n* OPTIONS - returns what method target server supports for a specified URL.\n* CONNECT - converts a request connection to as transparent TCP/IP.\n","slug":"2015-12-13-front-end-job-interview-questions","published":1,"updated":"2023-09-06T19:45:58.305Z","_id":"cln99ol8a0012vfvgd9reea05","comments":1,"photos":[],"link":"","content":"<h2 id=\"Source\"><a href=\"#Source\" class=\"headerlink\" title=\"Source\"></a>Source</h2><p><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions\">Front-end Job Interview Questions</a></p>\n<p>Won’t answer every question. I don’t know everything and some of them cover large enough to make standalone articles.</p>\n<h2 id=\"General-Questions\"><a href=\"#General-Questions\" class=\"headerlink\" title=\"General Questions\"></a>General Questions</h2><blockquote>\n<p>Talk about your preferred development environment.</p>\n</blockquote>\n<p>Mac + Atom + Gulp + Webpack&#x2F;Broserify + CLI.</p>\n<blockquote>\n<p>Which version control systems are you familiar with?</p>\n</blockquote>\n<p>Git.</p>\n<blockquote>\n<p>Can you describe your workflow when you create a web page?</p>\n</blockquote>\n<ol>\n<li>Build up working environment. e.g. create directories, set up webpack, initialize git…</li>\n<li>Outline what features the site should have.</li>\n<li>Outline the UI of the site.</li>\n<li>Start working on it. (Write tests if possible)</li>\n</ol>\n<blockquote>\n<p>If you have 5 different stylesheets, how would you best integrate them into the site?</p>\n</blockquote>\n<p>Assume each stylesheet is a file, and works for different parts of the website. The first I would do is adding “namespace” for each stylesheet to prevent class name conflict. The second thing I would do is concatenating these files into 1 to improve website download speed and browser response time.</p>\n<blockquote>\n<p>Can you describe the difference between progressive enhancement and graceful degradation?</p>\n</blockquote>\n<p>Let’s take <code>print this page</code> for example.</p>\n<ul>\n<li>Graceful Degradation - Provide a feature, but if the feature doesn’t exist in older browsers, provide a lower level feature.</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:print()&quot;</span>&gt;</span>print this page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You have to enable JavaScript to use this feature.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Shows no script text only when client disabled JavaScript.</p>\n<ul>\n<li>Progressive Enhancement - Provide a feature, upgrade it only when current environment supports advanced functionality.</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Please print this page.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"comment\">// append a button under text above.</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"comment\">// invoke print() when button is pressed.</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;)();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Assume client disabled JavaScript, show button if JavaScript is allowed.</p>\n<p><a href=\"https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement\">Reference</a></p>\n<blockquote>\n<p>How would you optimize a website’s assets&#x2F;resources?</p>\n</blockquote>\n<ul>\n<li>Minifying and bundling JS&#x2F;CSS&#x2F;HTML files - It can be done via some tools like Webpack or Uglify.</li>\n<li>Image sprite - Make many images into one big image file.</li>\n<li>Image inlining - Transform images into base64 string and inline them directly into HTML files.</li>\n<li>Image resizing - If no need to render images in actual resolution, resize it.</li>\n<li>Image compressing - Compress your into a smaller piece.</li>\n<li>Gzip - Enable gzip content compression on server side.</li>\n<li>Cache - Specify Cache-Control attribute for each file header on server side.</li>\n<li>CDN(Content Deliver Network) - Put resources into different domains to break the limitation of maximum connection count.</li>\n</ul>\n<p>Assets&#x2F;resourcess optimization is a way to reduce request times under HTTP&#x2F;1.1 protocol.</p>\n<p>Besides minifying, compressing, gzip and cache, I don’t see any reason to do rest approaches once HTTP&#x2F;2 becomes popular, thanks to multiplex.</p>\n<blockquote>\n<p>How many resources will a browser download from a given domain at a time? What are the exceptions?</p>\n</blockquote>\n<p>Ranges from 6 to 8 connections per domain. It depends on what browser is user using.</p>\n<p>The exceptions are SPDY and HTTP&#x2F;2 protocols. Browsers that support these protocols only have to open one connection to download resources.</p>\n<blockquote>\n<p>Name 3 ways to decrease page load (perceived or actual load time).</p>\n</blockquote>\n<p>Since I have already talked explained about optimization in “How would you optimize a website’s assets&#x2F;resources?” section, here I will only talk about actual load time:</p>\n<ul>\n<li>Put <code>link</code> in <code>head</code> section - This will make browser load stylesheets first.</li>\n<li>Put <code>script</code> at the bottom of document - Do this to prevent browser from render blocking.</li>\n<li>Enable <code>async</code> attribute in HTML5 - Specifying <code>async</code> attribute on <code>script</code> tag to allow browser executing code and parse page at the same time.</li>\n<li>Don’t use complicated css query - <code>#foo ul li .bar</code> nested and complicated query like this. It is time costly for browsers to parse.</li>\n</ul>\n<blockquote>\n<p>Describe how you would create a simple slideshow page.</p>\n</blockquote>\n<p>I think some points are needed to be clarified first:</p>\n<ol>\n<li>What platforms will this application support? Browser? Mobile Browser? Desktop? Mobile Native App?</li>\n<li>What screen size does this application target for?</li>\n<li>What browser version will this application support down to?</li>\n<li>What feature does it really have?</li>\n<li>What is the estimated time schedule?</li>\n</ol>\n<p>Second:</p>\n<ol>\n<li>What tool should I use? Is it well documented? Does it have an active community for asking help?</li>\n<li>What techniques might this application have involved?</li>\n<li>Is there any similar work or tutorial that I can learn with?</li>\n</ol>\n<blockquote>\n<p>What is Flash of Unstyled Content? How do you avoid FOUC?</p>\n</blockquote>\n<p>Browser renders default stylesheet(unstyled) before external stylesheet is received&#x2F;loaded. The transition state between default stylesheet to external stylesheet is called FOUC.</p>\n<p>This is caused by putting <code>link</code> tag to stylesheets after the <code>head</code> tag, or with <code>@import</code> because it loads stylesheet asynchronously.</p>\n<p>Solution is pretty simple - put <code>link</code> in <code>head</code> and don’t use <code>@import</code>.</p>\n<blockquote>\n<p>Explain some of the pros and cons for CSS animations versus JavaScript animations.</p>\n</blockquote>\n<p>CSS Animation</p>\n<ul>\n<li>Pros<ul>\n<li>Natively GPU supported on mobile.<ul>\n<li>Easy to use.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cons<ul>\n<li>Asynchronous actions, pause, stop… complicated animation control not possible.<ul>\n<li>Not supported by older browsers. Even if it supports, not every browser has the same implementation.</li>\n<li>Hard to organize when animation grows.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>JavaScript Animation</p>\n<ul>\n<li>Pros<ul>\n<li>GPU support.<ul>\n<li>Compared to CSS 3 animation, it is more widely supported.</li>\n<li>Can do complicated flow control.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Cons<ul>\n<li>Steep learning curve compares to CSS 3 animation.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>What does CORS stand for and what issue does it address?</p>\n</blockquote>\n<p>Cross-Origin-Resource-Sharing, CORS, is a standard mechanism that let you access cross-domain resources with normal ajax request.</p>\n<p>Without CORS, you can only access services from other domain via JSONP or server proxy.</p>\n<p>You can enable this by simply adding an attribute in your file header from server side:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://my-domain-name.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTML-Questions\"><a href=\"#HTML-Questions\" class=\"headerlink\" title=\"HTML Questions\"></a>HTML Questions</h2><blockquote>\n<p>What does a doctype do?</p>\n</blockquote>\n<p>Also known as Document Type Definition - DTD.</p>\n<p>There are many versions of HTML(e.g. HTML4.1, XHTML…). By defining <code>&lt;!DOCTYPE html&gt;</code> at the top of your HTML file tells the browser what’s the current version of HTML your are using, and it let browser to parse your page in that standard.</p>\n<p>Document with doctype declared will enter standard mode, otherwise or lack of URL will result in quirk mode.</p>\n<blockquote>\n<p>What’s the difference between standards mode and quirks mode?</p>\n</blockquote>\n<p>Quirks mode - also stands for <strong>non-standard</strong> mode or <strong>backward-compability</strong> mode, browsers will parse things a little different from standard mode.</p>\n<p>Standard mode - also known as <strong>strict mode</strong>, browsers will follow mostly part of W3 specification for parsing.</p>\n<p>Without declaring <code>&lt;!DOCTYPE html&gt;</code> may trigger quirks mode in older browsers.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode\">Quirks Mode and Standards Mode</a></p>\n<blockquote>\n<p>What’s the difference between HTML and XHTML?</p>\n</blockquote>\n<p>XHTML stands for eXtensible HTML. You can also think it as HTML in XML or strict syntax HTML.</p>\n<p>By sending <code>application/xhtml-xml</code> MIME type, browsers will treat this document as an XML file.</p>\n<p>There are many minor differences between HTML and XHTML. Here I only name a few:</p>\n<ul>\n<li>All elements should have always be closed.</li>\n<li>Attributes must be lower case.</li>\n<li>Attributes minimization is not allowed.</li>\n</ul>\n<p>For full specification visit <a href=\"http://www.w3.org/TR/xhtml1/\">w3c</a></p>\n<blockquote>\n<p>Are there any problems with serving pages as application&#x2F;xhtml+xml?</p>\n</blockquote>\n<p>By doing this will let browsers treat this document as an XML file, which turns HTML into XHTML.</p>\n<p>On IE 6,7,8 this will prompt a download dialog instead of rendering document.</p>\n<blockquote>\n<p>What are data- attributes good for?</p>\n</blockquote>\n<p>You can define your own attributes. Saving data or state in an element instead of having another variable for recording in JavaScript.</p>\n<blockquote>\n<p>Describe the difference between a cookie, sessionStorage and localStorage.</p>\n</blockquote>\n<p>Cookie</p>\n<ul>\n<li>Can access via JavaScript, or be disallowed to access via JavaScript via <code>http-only</code> attribute in header.</li>\n<li>Limited counts per domain.</li>\n<li>Only store up to 4 kb.</li>\n<li>Will be transmitted via packet in header.</li>\n<li>Can be sent to or set by server.</li>\n<li>Have various attributes to set via <code>Set-Cookie</code> attribute in header.</li>\n</ul>\n<p>Session and local storage are all HTML5’s API and also called web storage. They do mostly the same, except session storage delete data when session ends while local storage does not.</p>\n<p>Web storage can hold up to 5 to 10 MB for each domain.</p>\n<p><a href=\"http://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies\">What is the difference between localStorage, sessionStorage, session and cookies?</a></p>\n<blockquote>\n<p>Describe the difference between <code>&lt;script&gt;</code>, <code>&lt;script async&gt;</code> and <code>&lt;script defer&gt;</code>.</p>\n</blockquote>\n<p><code>&lt;script&gt;</code> - load and execute script synchronously. Browser will execute the code if encounter <code>&lt;script&gt;</code>. Will cause blocking.</p>\n<p><code>&lt;script async&gt;</code> - load and execute script asynchronously. Browser will execute the code and load other resource parallel. Will not cause blocking.</p>\n<p><code>&lt;script defer&gt;</code> - load and execute script synchronously. The only different is that it indicates browser should only execute the code only after the document is parsed.</p>\n<blockquote>\n<p>Why is it generally a good idea to position CSS <code>&lt;link&gt;</code>s between <code>&lt;head&gt;&lt;/head&gt;</code> and JS <code>&lt;script&gt;</code>s just before <code>&lt;/body&gt;</code>? Do you know any exceptions?</p>\n</blockquote>\n<p>Put CSS <code>&lt;link&gt;</code> in between <code>&lt;head&gt;</code> to avoid FOUC. Put <code>&lt;script&gt;</code> before <code>&lt;/before&gt;</code> to avoid parse blocking.</p>\n<p>Specifying <code>async</code> or <code>defer</code> in <code>&lt;script&gt;</code> if you really want to put <code>&lt;script&gt;</code> before <code>&lt;link&gt;</code>.</p>\n<blockquote>\n<p>What is progressive rendering?</p>\n</blockquote>\n<p>It’s actually an backend topic.</p>\n<blockquote>\n<p>Have you used different HTML templating languages before?</p>\n</blockquote>\n<p>ejs.</p>\n<h2 id=\"CSS-Questions\"><a href=\"#CSS-Questions\" class=\"headerlink\" title=\"CSS Questions\"></a>CSS Questions</h2><blockquote>\n<p>What is the difference between classes and ID’s in CSS?</p>\n</blockquote>\n<p>Class stands for a collection of attributes under a name. It can be applied on many elements with same name(one to many). However, ID is unique to element and can only be applied on one element with the same ID(one to one).</p>\n<blockquote>\n<p>What’s the difference between “resetting” and “normalizing” CSS? Which would you choose, and why?</p>\n</blockquote>\n<p>Reset - undecorates or sets 0 to all browser default styles. You have to specify all styles yourself.</p>\n<p>Normalize - preserves and ensures that default style on all browsers are the same.</p>\n<p>I prefer normalize because go with reset will have to do extra works.</p>\n<p><a href=\"http://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css\">What is the difference between Normalize.css and Reset CSS?</a></p>\n<blockquote>\n<p>Describe Floats and how they work.</p>\n</blockquote>\n<p>Float is a CSS property that should be taken from the normal flow and placed to the right or left of its container. Text or any inline element will wrap around it.</p>\n<p>If an element has specified a value on float, that element’s <code>display</code> property will be set to <code>block</code>.</p>\n<p>It is always used with <code>clear</code> property to make desired element move down to the floated element. A common technique is <strong>clearfix</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Describe z-index and how stacking context is formed.</p>\n</blockquote>\n<p>When elements overlap, <code>z-index</code> specifies the displaying order of an element. Larger z-index covers element with a lower one.</p>\n<p>New elements in a container always follow parent’s <code>z-index</code> value.</p>\n<p><code>z-index</code> can be negative to have elements displaying below.</p>\n<blockquote>\n<p>What are the various clearing techniques and which is appropriate for what context?</p>\n</blockquote>\n<p>Traditional way:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">br</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clear&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>This container should be cleared<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Overflow way:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>This container should be cleared<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Clearfix:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>This container should be cleared<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What are your favourite image replacement techniques and which do you use when?</p>\n</blockquote>\n<p><a href=\"https://css-tricks.com/the-image-replacement-museum/\">image replacement</a></p>\n<blockquote>\n<p>How would you approach fixing browser-specific styling issues?</p>\n</blockquote>\n<p>see “What’s the difference between “resetting” and “normalizing” CSS? Which would you choose, and why?”.</p>\n<blockquote>\n<p>What are the different ways to visually hide content (and make it available only for screen readers)?</p>\n</blockquote>\n<p><code>display: none</code> or <code>visibility: hidden</code>.</p>\n<p>Element with <code>display: none</code> will take place in view even it’s invisible.</p>\n<p>Element with <code>display: none</code> will not take place in view.</p>\n<blockquote>\n<p>Have you ever used a grid system, and if so, what do you prefer?</p>\n</blockquote>\n<p>Only experienced grid system in Twitter Bootstrap.</p>\n<blockquote>\n<p>Have you used or implemented media queries or mobile specific layouts&#x2F;CSS?</p>\n</blockquote>\n<p>Hand-made? Sure, but actually, I use Twitter Bootstrap to solve RWD problems.</p>\n<blockquote>\n<p>What are the advantages&#x2F;disadvantages of using CSS preprocessors? Describe what you like and dislike about the CSS preprocessors you have used.</p>\n</blockquote>\n<p>SCSS.</p>\n<p>Advantages:</p>\n<ul>\n<li>More ways like inheritance, variable… for writing modularized CSS.</li>\n<li>Some libraries like Bourbon, Compass provide nice polyfills.</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Extra learning&#x2F;traning required.</li>\n<li>Need to setup up working environment before work begin.</li>\n</ul>\n<blockquote>\n<p>Explain how a browser determines what elements match a CSS selector.</p>\n</blockquote>\n<p>The only thing I know is that browser matches selector from right to left.</p>\n<blockquote>\n<p>Describe pseudo-elements and discuss what they are used for.</p>\n</blockquote>\n<p>Pseudo-elements like <code>element::first-child</code> or <code>element::after</code> are special elements that make styling more easy.</p>\n<p>For example <code>p::first-line</code> will only style the first line of every paragraph.</p>\n<blockquote>\n<p>Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.</p>\n</blockquote>\n<p>Box model indicates element is composed of 4 parts: margin. border, padding, content.</p>\n<ul>\n<li>Margin - an empty area used for separating area with other elements.</li>\n<li>Border - the thickness between padding and margin.</li>\n<li>Padding - extending of content area.</li>\n<li>Content - the space text&#x2F;media occupies.</li>\n</ul>\n<p>You can switch box model with <code>content-box</code> and <code>border-box</code> in <code>box-sizing</code>. Default value is <code>content-box</code>.</p>\n<ul>\n<li><code>content-box</code> - The <code>width</code> and <code>height</code> properties are measured only content size, no padding, border, or margin.</li>\n<li><code>box-sizing</code> - The <code>width</code> and <code>height</code> properties are measured including content, padding, border, no margin.</li>\n</ul>\n<blockquote>\n<p>What does * { box-sizing: border-box; } do? What are its advantages?</p>\n</blockquote>\n<p>Using <code>border-box</code> to calculate elements’ <code>width</code> and <code>height</code> is more intuitive.</p>\n<p>Say, I want to put 4 boxes in a horizontal block. Using <code>content-box</code> I have to calculate each box’s border and content to fit into container, but using <code>border-box</code> I only have to set <code>width:25%</code> on each box and set each box’s border without calculating.</p>\n<blockquote>\n<p>List as many values for the display property that you can remember.</p>\n</blockquote>\n<ul>\n<li>block</li>\n<li>inline-block</li>\n<li>inline</li>\n<li>flex</li>\n<li>inline-flex</li>\n<li>none</li>\n<li>table</li>\n<li>inline-table</li>\n<li>initial</li>\n<li>inherit</li>\n<li>…</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">Display CSS property on MDN</a></p>\n<blockquote>\n<p>What’s the difference between inline and inline-block?</p>\n</blockquote>\n<p>Browser will put elements with <code>display: inline-*</code> property on the same row. The difference between <code>inline</code> and <code>inline-block</code> is that <code>inline</code> elements with content empty won’t effect by <code>width</code> or <code>height</code>.</p>\n<blockquote>\n<p>What’s the difference between a relative, fixed, absolute and statically positioned element?</p>\n</blockquote>\n<ul>\n<li>Fixed - elements will be positioned independently and its’ position is according to the whole view.</li>\n<li>Static - default value. Elements will be positioned depending on each other whose <code>position</code> property is not <code>absolute</code> or <code>fixed</code>.</li>\n<li>Relative - enable <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code> properties, which let you move element relative to where it should be.</li>\n<li>Absolute - enable <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code> properties. Elements with <code>position: absolute</code> will be positioned independently or be positioned according to the nearest container with <code>position: relative</code>.</li>\n</ul>\n<blockquote>\n<p>The ‘C’ in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?</p>\n</blockquote>\n<p><code>!important &gt; style &gt; id &gt; class &gt; tag</code></p>\n<p>If I really want something should not be changed, I will use <code>!important</code> to keep my style like it should be. Especially where you have other 3rd party, external stylesheets import in, styles may be conflict between each other, you will want to keep your own style untouched.</p>\n<blockquote>\n<p>What existing CSS frameworks have you used locally, or in production? How would you change&#x2F;improve them?</p>\n</blockquote>\n<p>Twitter Bootstrap, Bourbon, SCSS&#x2F;SASS.</p>\n<p>Personally, I use them to help me enhance UI or get rid of some repeat works.</p>\n<blockquote>\n<p>Have you played around with the new CSS Flexbox or Grid specs?</p>\n</blockquote>\n<p>Tried Flexbox before, enough to replace some old trick like <code>float</code> and also works really well in RWD.</p>\n<p>Tried Grid as well. It arranges layout beautifully and works well with media queries in RWD also.</p>\n<blockquote>\n<p>How is responsive design different from adaptive design?</p>\n</blockquote>\n<p>Responsive - adapt different devices with one layout with minimum change.</p>\n<ul>\n<li>pros - easy to maintain.</li>\n<li>cons - screen sizes are many, however in most RWD only have 4 layout - desktop&#x2F;latop&#x2F;tablet&#x2F;mobile, which only provides a basic comfort level, not the best user experience.</li>\n</ul>\n<p>Adaptive - adapt different devices with different layouts.</p>\n<ul>\n<li>pros - provides best experience on different devices.</li>\n<li>cons - maintaining between layouts means extra work.</li>\n</ul>\n<h2 id=\"JS-Questions\"><a href=\"#JS-Questions\" class=\"headerlink\" title=\"JS Questions:\"></a>JS Questions:</h2><blockquote>\n<p>Explain event delegation</p>\n</blockquote>\n<p>Event delegation means using parent container as children’s event delegator. For example, we have a list here:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list-1&quot;</span>&gt;</span>I am list item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list-2&quot;</span>&gt;</span>I am list item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list-3&quot;</span>&gt;</span>I am list item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>We want to get inner text when clicking on one of its child. Of course, we can add event listener to each one, but it will become a little crazy if we have to add more list item.</p>\n<p>By the power of <strong>event bubbling</strong>, there is an more elegant way to deal with this issue.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;list&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">innerText</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Explain how this works in JavaScript</p>\n</blockquote>\n<p><code>this</code> means the current owner of the scope.</p>\n<p>When an object is created via <code>new</code>, JS binds <code>this</code> to the newly created object.</p>\n<blockquote>\n<p>Explain how prototypal inheritance works</p>\n</blockquote>\n<p>In ES5</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">John</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">\t<span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">John</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// reference prototype to Person&#x27;s prototype</span></span><br><span class=\"line\"><span class=\"title class_\">John</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Person</span>; <span class=\"comment\">// set John&#x27;s constructor to Person&#x27;s constructor</span></span><br></pre></td></tr></table></figure>\n\n<p>In ES6. It’s identical to ES5 prototype inheritance chain.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">John</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">suepr</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What do you think of AMD vs CommonJS?</p>\n</blockquote>\n<p>AMD is an JS module standard. Its implementation is RequireJS and only works on browser side. Meanwhile CommonJS works on server side.</p>\n<p>Writing in RequireJS is somewhat cumbersome:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requirejs([<span class=\"string\">&quot;directory/anotherJsFile&quot;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">anotherJsFile</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>CommonJS is more intuitive to programmers coming from other languages:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anotherJsFile = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./directory/anotherJsFile&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = myObj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = myObj;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Explain why the following doesn’t work as an IIFE: function foo(){ }();. What needs to be changed to properly make it an IIFE?</p>\n</blockquote>\n<p><code>function foo()&#123; &#125;()</code> which is equal to <code>undefined()</code>. Executing things undefined is not possible.</p>\n<p>The correct way is:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something.</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What’s the difference between a variable that is: null, undefined or undeclared? How would you go about checking for any of these states?</p>\n</blockquote>\n<ul>\n<li>undeclared - use variables before declaring interpreter will throw <code>ReferenceError: variable is not defined</code> in your face.</li>\n<li>undefined - use an declared variable without initializing its value will return <code>undefined</code>.</li>\n<li>null - <code>null</code> is a value to represent empty.</li>\n</ul>\n<p>Checking state, assume its in Chrome console:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; a</span><br><span class=\"line\"><span class=\"title class_\">ReferenceError</span>: a is not defined</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> a</span><br><span class=\"line\">&gt; a</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; a === <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What is a closure, and how&#x2F;why would you use one?</p>\n</blockquote>\n<p>The most common usage is to return private member’s value without exposing it.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> secret = &#123;<span class=\"attr\">code</span>: <span class=\"string\">&quot;can&#x27;t tell you!&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> secret;</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Personally I would try to avoid using it if possible because closure extends variables’ lifespan to its scope. This causes memory leak easily plus it’s quite confusing to people coming from other languages.</p>\n<blockquote>\n<p>What’s a typical use case for anonymous functions?</p>\n</blockquote>\n<p>When I only need to do things one-time only or don’t even invoke it in further.</p>\n<blockquote>\n<p>How do you organize your code? (module pattern, classical inheritance?)</p>\n</blockquote>\n<p>I write ES6 with Babel and organize my module with ES6 <code>import</code> and <code>export</code> features.</p>\n<p>As for <code>inheritance</code>, use <code>extends</code> instead.</p>\n<blockquote>\n<p>What’s the difference between host objects and native objects?</p>\n</blockquote>\n<p>Host objects means browser specific features. For example, DOM objects in Chrome is possibly different from IE.</p>\n<p>Native objects means JavaScript’s core feature like <code>array</code> or <code>Object</code>.</p>\n<blockquote>\n<p>Difference between: function Person(){}, var person &#x3D; Person(), and var person &#x3D; new Person()?</p>\n</blockquote>\n<ul>\n<li><code>function Person()&#123;&#125;</code> - a function.</li>\n<li><code>var person = Person()</code> - returns the result after executing Person function.</li>\n<li><code>var person = new Person()</code> - bind <code>this</code> in <code>person</code> scope to <code>person</code>.</li>\n</ul>\n<blockquote>\n<p>What’s the difference between .call and .apply?</p>\n</blockquote>\n<p>Both of them invokes function they are calling for.</p>\n<p>First argument accepts what <code>this</code> refers to when running that function.</p>\n<p>The only difference is that <code>.call</code> accepts rest of the arguments with <strong>arguments list</strong> while <code>.apply</code> accepts <strong>array of arguments</strong>.</p>\n<blockquote>\n<p>Explain Function.prototype.bind.</p>\n</blockquote>\n<p>Indicates what <code>this</code> refers to when running that function.</p>\n<p><code>Function.prototype.bind</code> only returns function, not executing.</p>\n<blockquote>\n<p>When would you use document.write()?</p>\n</blockquote>\n<p>Testing.</p>\n<blockquote>\n<p>What’s the difference between feature detection, feature inference, and using the UA string?</p>\n</blockquote>\n<p>Feature detection tests the existence of a feature.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">XMLHttpRequest</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Feature inference checks if one feature exits, but uses another feature.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">getElementByTagName</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myEle&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UA string means identifying browser version with user agent. It should not be used anymore because you will have to maintain various version for different browsers.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(navigator.<span class=\"property\">userAgent</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;MSIE 7&quot;</span>))&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Explain AJAX in as much detail as possible.</p>\n</blockquote>\n<p>AJAX stands for Asynchronous JavaScript and XML. It’s a technique to retrieve data from server without reloading the whole page.</p>\n<p>This is how it is done in vanilla JS and modern browser.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ajax.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://mydomain.com&quot;</span>);</span><br><span class=\"line\">ajax.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Explain how JSONP works (and how it’s not really AJAX).</p>\n</blockquote>\n<p>JSONP stands for JSON with Padding. JSONP doesn’t involve in AJAX at all and actually. To achieve JSONP, we need the help from the server side. Server side’s code looks like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryTemp = url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>).<span class=\"property\">query</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = querystring.<span class=\"title function_\">parse</span>(queryTemp);</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(query.<span class=\"property\">callback</span> + <span class=\"string\">&quot;(&#x27;Hello JSONP!&#x27;)&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3001</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Client:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jsonp test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jsonp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>jsonp!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> jsonp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsonp&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">function</span> <span class=\"title function_\">contentLoaded</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          jsonp.<span class=\"property\">src</span>= <span class=\"string\">&quot;http://localhost:3001/?callback=changeText&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">function</span> <span class=\"title function_\">changeText</span>(<span class=\"params\">string</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(string));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, contentLoaded);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>We fetch data by changing <code>&lt;script&gt;</code>‘s <code>src</code> value to our target URL, and append full JavaScript code by gluing with result:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jsonp&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"title function_\">changeText</span>(<span class=\"string\">&#x27;Hello JSONP!&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Have you ever used JavaScript templating? If so, what libraries have you used?</p>\n</blockquote>\n<p>EJS.</p>\n<blockquote>\n<p>Explain “hoisting”.</p>\n</blockquote>\n<p>Hoisting means any variable declaration will be processed before any code is executed in <strong>current scope</strong>. Take code below for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br></pre></td></tr></table></figure>\n\n<p>is equal to</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Describe event bubbling.</p>\n</blockquote>\n<p>When an event is fired, it runs a callback function defined external. The event will keep <strong>bubbling up</strong> to its ancestor container until it hits the root of DOM or <code>event.stopPropagation()</code>.</p>\n<p>See “event delegation” for detail.</p>\n<blockquote>\n<p>What’s the difference between an “attribute” and a “property”?</p>\n</blockquote>\n<p>Property is for DOM object or native JS object and attribute is for HTML tag.</p>\n<blockquote>\n<p>Why is extending built-in JavaScript objects not a good idea?</p>\n</blockquote>\n<p>If you only have your own code in your work, that’s fine, but when libraries are add in, extending native object may cause other’s code broken because of overwriting other’s code.</p>\n<blockquote>\n<p>Difference between document load event and document ready event?</p>\n</blockquote>\n<p>There is no such <code>ready</code> event in DOM, so I assume <code>document ready</code> refers to jQuery’s <code>$(document).ready</code> here.</p>\n<p><code>load</code> event in DOM tells browser to do something after <strong>everthing including frames, images, asynchronous JavaScripts</strong> are fully loaded.</p>\n<p><code>$(document).ready</code> indicates that it should occur as early as possible after the document has loaded.</p>\n<blockquote>\n<p>What is the difference between &#x3D;&#x3D; and &#x3D;&#x3D;&#x3D;?</p>\n</blockquote>\n<p><code>==</code> equals in value, <code>===</code> equals in reference.</p>\n<blockquote>\n<p>Explain the same-origin policy with regards to JavaScript.</p>\n</blockquote>\n<p>Same-Origin-Policy is an idea to prevent malicious script from accessing or intercepting data’s in client browser. Same-Oirigin-Policy allows HTTP action request only if document and server are under the same domain.</p>\n<p>There are two ways to “bypass” SOP, one is JSONP, the other is through CORS(Cross Origin Resource Sharing).</p>\n<p>Read “Explain how JSONP works (and how it’s not really AJAX).” for JSONP details.</p>\n<p>CORS needs cooperation from server setting. You have to set <code>Access-Control-Origin-Allow: yourdomain.com</code> to domains which you want it to be allowed in header in order to access resource via normal AJAX call.</p>\n<blockquote>\n<p>Why is it called a Ternary expression, what does the word “Ternary” indicate?</p>\n</blockquote>\n<p>Because it takes 3 arguments with 2 operators. A common Ternary expression is <code>:?</code>.</p>\n<blockquote>\n<p>What is “use strict”;? what are the advantages and disadvantages to using it?</p>\n</blockquote>\n<p><code>use strict;</code> enables strict mode for JS parser. Strict mode is enabled by adding <code>use strict;</code> at the top of file or function scope.</p>\n<p>Advantages - converts mistakes into errors.</p>\n<ul>\n<li>Using undeclared variable throws error.</li>\n<li>Using reserved keywords throws error.</li>\n<li>Naming arguments, properties with the same name throws error.</li>\n<li>and so on…</li>\n</ul>\n<p>Disadvantages</p>\n<ul>\n<li>If you import script with strict mode on before any other scripts, you will force other scripts to go strict mode.</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode on MDN</a></p>\n<blockquote>\n<p>Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?</p>\n</blockquote>\n<p>Because you probably will make a variable with same name as others will. That makes conflict.</p>\n<blockquote>\n<p>Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?</p>\n</blockquote>\n<p><code>load</code> event tells browser to do something only after <strong>everthing including frames, images, asynchronous JavaScripts</strong> are fully loaded.</p>\n<p>If you want event function to execute before fully loaded frames, images, async scripts, use <code>domcontentloaded</code> instead.</p>\n<blockquote>\n<p>Explain what a single page app is and how to make one SEO-friendly.</p>\n</blockquote>\n<blockquote>\n<p>What is the extent of your experience with Promises and&#x2F;or their polyfills?</p>\n</blockquote>\n<p>Only tried it in ES6. Basic usage:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">reslove</span>(<span class=\"string\">&quot;successed&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">rejected</span>(<span class=\"string\">&quot;failed&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The biggest advangtage of Promise is that it solves the problem of callback hell.</p>\n<p>Polyfills:</p>\n<ul>\n<li>jQuery - Deferred</li>\n<li>Bluebird</li>\n<li>Q</li>\n<li>When</li>\n</ul>\n<blockquote>\n<p>What are the pros and cons of using Promises instead of callbacks?</p>\n</blockquote>\n<p>pros - solves the problem of callback hell.<br>cons - currently require external library or polyfill to achieve this.</p>\n<blockquote>\n<p>What are some of the advantages&#x2F;disadvantages of writing JavaScript code in a language that compiles to JavaScript?</p>\n</blockquote>\n<p>Pros</p>\n<ul>\n<li>Benefit libraries that only exist in NodeJS world. (Make CommonJS stuff avialable on browser)</li>\n<li>The newest of language features.</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Have to setup environment before working.</li>\n<li>Have to orgranize more directories.</li>\n<li>Source map is needed.</li>\n</ul>\n<blockquote>\n<p>What tools and techniques do you use debugging JavaScript code?</p>\n</blockquote>\n<p>Chrome Dev Tools.</p>\n<blockquote>\n<p>What language constructions do you use for iterating over object properties and array items?</p>\n</blockquote>\n<p>Array</p>\n<ul>\n<li>classic <code>for</code></li>\n<li><code>arr.forEach()</code></li>\n</ul>\n<p>Object</p>\n<ul>\n<li><code>for(var key in obj)</code></li>\n<li><code>Object.keys(obj).forEach()</code></li>\n</ul>\n<blockquote>\n<p>Explain the difference between mutable and immutable objects. What is an example of an immutable object in JavaScript? What are the pros and cons of immutability? How can you achieve immutability in your own code?</p>\n</blockquote>\n<p>Mutable object means its state is allowed to be changed over time. Immutable object’s value doesn’t change from the time it was created.</p>\n<p>Immutable examples are primitive types like <code>String</code>, <code>Number</code>. You can’t change the definition of <code>2</code> after executing <code>2 + 5</code>. No matter how you operate strings, the definition of <code>c</code> won’t change.</p>\n<p>Mutable examples are <code>array</code>, <code>object</code> or anything opposite to immutability. You can change the value of an array or object anytime and the result will be what you desired.</p>\n<p>Immutable object won’t be changed after it has been initialized. We can take advantage of this. Making immutable objects into a collection of cache since these objects don’t change at all. Our program is actually accessing the same data. This is a good approach to saving memory by taking advantage of immutable. The downside of immutability is that it actually involving constantly deep clone and assigning. This is an overhead of trading computing speed for memory.</p>\n<p>To achieve immutability on <code>array</code> or <code>object</code> or any type you want, you have to do deep clone, or simply use library like <code>immutable.js</code> developed by Facebook.</p>\n<blockquote>\n<p>Explain the difference between synchronous and asynchronous functions.</p>\n</blockquote>\n<p>The difference is that sync function is <strong>blocking</strong> while async is <strong>non-blocking</strong>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">blocking</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nonBlocking</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What is event loop? What is the difference between call stack and task queue?</p>\n</blockquote>\n<p>Event loop is how JavaScript with single-threaded performs tasks without blocking.</p>\n<p>Event loop is a queue of callback functions. When a asynchronous function executes, it is pushed into task queue and JavaScript will only start processing task queue after codes after async function are executed.</p>\n<p>The difference between call stack and task queue is that <strong>task queue</strong> is a place where JavaScrip schedules async function while <strong>call stack</strong> is a place for JavaScript to trace what the current function is.</p>\n<h2 id=\"Network-Questions\"><a href=\"#Network-Questions\" class=\"headerlink\" title=\"Network Questions\"></a>Network Questions</h2><blockquote>\n<p>Traditionally, why has it been better to serve site assets from multiple domains?</p>\n</blockquote>\n<p>Because request is costly, so modern browsers establish 6 to 8 reusable connections to improve the download speed to prevent repeatly requsting, and because there is a limited connection count for each domain, we put resources on multiple domains.</p>\n<blockquote>\n<p>Do your best to describe the process from the time you type in a website’s URL to it finishing loading on your screen.</p>\n</blockquote>\n<p>Assume there is only HTTP request, no proxies:</p>\n<ol>\n<li>Browser look up cache, if document exists in cache and not expires, then renders it.</li>\n<li>OS makes DNS lookup of the IP address of given URL and replies to browser.</li>\n<li>If that URL exists, browser opens a TCP connection to server.</li>\n<li>Browser sends HTTP request to server.</li>\n<li>Server parses HTTP request, sends it and may or may not close TCP connection(depends on <code>keep-alive</code> in header setting).</li>\n<li>Browser parses HTTP status code and depends on what code it is to decide what to render.</li>\n</ol>\n<blockquote>\n<p>What are the differences between Long-Polling, Websockets and Server-Sent Events?</p>\n</blockquote>\n<p>Long-Polling - use <code>setTimeout</code> and <code>AJAX</code> technique to repeatedly send request and wait for server response. Before websockets, web developer used to use this technique to simulate persistent connection.</p>\n<p>Websocket - a real persistent connection via TCP. Unlike long-polling have to setup HTTP connection with constantly requesting, once establishing websocket you don’t have to send another request to maintain the connection.</p>\n<p>Server-sent - also called server push technique. When it comes to data exchange, servers are always passive, but with server push, server can be active too. Server push is like broadcast, whoever connects to the server is a subscriber. Server push can push desired event on specific channel.</p>\n<blockquote>\n<p>Explain the following request and response headers:<br>Diff. between Expires, Date, Age and If-Modified-…<br>Do Not Track<br>Cache-Control<br>Transfer-Encoding<br>ETag<br>X-Frame-Options</p>\n</blockquote>\n<ul>\n<li>Expires - will be labeled stale after specified date.</li>\n<li>Date - The date and time that message was sent.</li>\n<li>Age - The age that object has lived in seconds.</li>\n<li>If-Modified-Since - will return 304 unchanged status code.</li>\n<li>Transfer-encoding - In normal circumstance server will tell client the content length which server sent, but in some circumstance the content’s length remains unknown, and server will send content in chunks. Specifying Transfer-encoding tells client server is sending in this way.</li>\n<li>ETag - an hash which is used to identify files’s version.</li>\n<li>X-Frame-Options - clickjacking protection.</li>\n<li>Cache-Control - an attribute tells browser how</li>\n</ul>\n<blockquote>\n<p>What are HTTP actions? List all HTTP actions that you know, and explain them.</p>\n</blockquote>\n<ul>\n<li>GET - request a resource.</li>\n<li>POST - create or update an resource.</li>\n<li>PUT - update an existing resource.</li>\n<li>DELETE - delete resource.</li>\n<li>PATCH - partially modification to an resource.</li>\n<li>TRACE - echoes the received request so you can see information that is changed by intermediated servers.</li>\n<li>HEAD - request a response header identical to GET method. It’s used to get meta information without sending the whole content.</li>\n<li>OPTIONS - returns what method target server supports for a specified URL.</li>\n<li>CONNECT - converts a request connection to as transparent TCP&#x2F;IP.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Source\"><a href=\"#Source\" class=\"headerlink\" title=\"Source\"></a>Source</h2><p><a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions\">Front-end Job Interview Questions</a></p>\n<p>Won’t answer every question. I don’t know everything and some of them cover large enough to make standalone articles.</p>\n<h2 id=\"General-Questions\"><a href=\"#General-Questions\" class=\"headerlink\" title=\"General Questions\"></a>General Questions</h2><blockquote>\n<p>Talk about your preferred development environment.</p>\n</blockquote>\n<p>Mac + Atom + Gulp + Webpack&#x2F;Broserify + CLI.</p>\n<blockquote>\n<p>Which version control systems are you familiar with?</p>\n</blockquote>\n<p>Git.</p>\n<blockquote>\n<p>Can you describe your workflow when you create a web page?</p>\n</blockquote>\n<ol>\n<li>Build up working environment. e.g. create directories, set up webpack, initialize git…</li>\n<li>Outline what features the site should have.</li>\n<li>Outline the UI of the site.</li>\n<li>Start working on it. (Write tests if possible)</li>\n</ol>\n<blockquote>\n<p>If you have 5 different stylesheets, how would you best integrate them into the site?</p>\n</blockquote>\n<p>Assume each stylesheet is a file, and works for different parts of the website. The first I would do is adding “namespace” for each stylesheet to prevent class name conflict. The second thing I would do is concatenating these files into 1 to improve website download speed and browser response time.</p>\n<blockquote>\n<p>Can you describe the difference between progressive enhancement and graceful degradation?</p>\n</blockquote>\n<p>Let’s take <code>print this page</code> for example.</p>\n<ul>\n<li>Graceful Degradation - Provide a feature, but if the feature doesn’t exist in older browsers, provide a lower level feature.</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:print()&quot;</span>&gt;</span>print this page<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You have to enable JavaScript to use this feature.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Shows no script text only when client disabled JavaScript.</p>\n<ul>\n<li>Progressive Enhancement - Provide a feature, upgrade it only when current environment supports advanced functionality.</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Please print this page.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"comment\">// append a button under text above.</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"comment\">// invoke print() when button is pressed.</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;)();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Assume client disabled JavaScript, show button if JavaScript is allowed.</p>\n<p><a href=\"https://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement\">Reference</a></p>\n<blockquote>\n<p>How would you optimize a website’s assets&#x2F;resources?</p>\n</blockquote>\n<ul>\n<li>Minifying and bundling JS&#x2F;CSS&#x2F;HTML files - It can be done via some tools like Webpack or Uglify.</li>\n<li>Image sprite - Make many images into one big image file.</li>\n<li>Image inlining - Transform images into base64 string and inline them directly into HTML files.</li>\n<li>Image resizing - If no need to render images in actual resolution, resize it.</li>\n<li>Image compressing - Compress your into a smaller piece.</li>\n<li>Gzip - Enable gzip content compression on server side.</li>\n<li>Cache - Specify Cache-Control attribute for each file header on server side.</li>\n<li>CDN(Content Deliver Network) - Put resources into different domains to break the limitation of maximum connection count.</li>\n</ul>\n<p>Assets&#x2F;resourcess optimization is a way to reduce request times under HTTP&#x2F;1.1 protocol.</p>\n<p>Besides minifying, compressing, gzip and cache, I don’t see any reason to do rest approaches once HTTP&#x2F;2 becomes popular, thanks to multiplex.</p>\n<blockquote>\n<p>How many resources will a browser download from a given domain at a time? What are the exceptions?</p>\n</blockquote>\n<p>Ranges from 6 to 8 connections per domain. It depends on what browser is user using.</p>\n<p>The exceptions are SPDY and HTTP&#x2F;2 protocols. Browsers that support these protocols only have to open one connection to download resources.</p>\n<blockquote>\n<p>Name 3 ways to decrease page load (perceived or actual load time).</p>\n</blockquote>\n<p>Since I have already talked explained about optimization in “How would you optimize a website’s assets&#x2F;resources?” section, here I will only talk about actual load time:</p>\n<ul>\n<li>Put <code>link</code> in <code>head</code> section - This will make browser load stylesheets first.</li>\n<li>Put <code>script</code> at the bottom of document - Do this to prevent browser from render blocking.</li>\n<li>Enable <code>async</code> attribute in HTML5 - Specifying <code>async</code> attribute on <code>script</code> tag to allow browser executing code and parse page at the same time.</li>\n<li>Don’t use complicated css query - <code>#foo ul li .bar</code> nested and complicated query like this. It is time costly for browsers to parse.</li>\n</ul>\n<blockquote>\n<p>Describe how you would create a simple slideshow page.</p>\n</blockquote>\n<p>I think some points are needed to be clarified first:</p>\n<ol>\n<li>What platforms will this application support? Browser? Mobile Browser? Desktop? Mobile Native App?</li>\n<li>What screen size does this application target for?</li>\n<li>What browser version will this application support down to?</li>\n<li>What feature does it really have?</li>\n<li>What is the estimated time schedule?</li>\n</ol>\n<p>Second:</p>\n<ol>\n<li>What tool should I use? Is it well documented? Does it have an active community for asking help?</li>\n<li>What techniques might this application have involved?</li>\n<li>Is there any similar work or tutorial that I can learn with?</li>\n</ol>\n<blockquote>\n<p>What is Flash of Unstyled Content? How do you avoid FOUC?</p>\n</blockquote>\n<p>Browser renders default stylesheet(unstyled) before external stylesheet is received&#x2F;loaded. The transition state between default stylesheet to external stylesheet is called FOUC.</p>\n<p>This is caused by putting <code>link</code> tag to stylesheets after the <code>head</code> tag, or with <code>@import</code> because it loads stylesheet asynchronously.</p>\n<p>Solution is pretty simple - put <code>link</code> in <code>head</code> and don’t use <code>@import</code>.</p>\n<blockquote>\n<p>Explain some of the pros and cons for CSS animations versus JavaScript animations.</p>\n</blockquote>\n<p>CSS Animation</p>\n<ul>\n<li>Pros<ul>\n<li>Natively GPU supported on mobile.<ul>\n<li>Easy to use.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>cons<ul>\n<li>Asynchronous actions, pause, stop… complicated animation control not possible.<ul>\n<li>Not supported by older browsers. Even if it supports, not every browser has the same implementation.</li>\n<li>Hard to organize when animation grows.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>JavaScript Animation</p>\n<ul>\n<li>Pros<ul>\n<li>GPU support.<ul>\n<li>Compared to CSS 3 animation, it is more widely supported.</li>\n<li>Can do complicated flow control.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Cons<ul>\n<li>Steep learning curve compares to CSS 3 animation.</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>What does CORS stand for and what issue does it address?</p>\n</blockquote>\n<p>Cross-Origin-Resource-Sharing, CORS, is a standard mechanism that let you access cross-domain resources with normal ajax request.</p>\n<p>Without CORS, you can only access services from other domain via JSONP or server proxy.</p>\n<p>You can enable this by simply adding an attribute in your file header from server side:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://my-domain-name.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTML-Questions\"><a href=\"#HTML-Questions\" class=\"headerlink\" title=\"HTML Questions\"></a>HTML Questions</h2><blockquote>\n<p>What does a doctype do?</p>\n</blockquote>\n<p>Also known as Document Type Definition - DTD.</p>\n<p>There are many versions of HTML(e.g. HTML4.1, XHTML…). By defining <code>&lt;!DOCTYPE html&gt;</code> at the top of your HTML file tells the browser what’s the current version of HTML your are using, and it let browser to parse your page in that standard.</p>\n<p>Document with doctype declared will enter standard mode, otherwise or lack of URL will result in quirk mode.</p>\n<blockquote>\n<p>What’s the difference between standards mode and quirks mode?</p>\n</blockquote>\n<p>Quirks mode - also stands for <strong>non-standard</strong> mode or <strong>backward-compability</strong> mode, browsers will parse things a little different from standard mode.</p>\n<p>Standard mode - also known as <strong>strict mode</strong>, browsers will follow mostly part of W3 specification for parsing.</p>\n<p>Without declaring <code>&lt;!DOCTYPE html&gt;</code> may trigger quirks mode in older browsers.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Quirks_Mode_and_Standards_Mode\">Quirks Mode and Standards Mode</a></p>\n<blockquote>\n<p>What’s the difference between HTML and XHTML?</p>\n</blockquote>\n<p>XHTML stands for eXtensible HTML. You can also think it as HTML in XML or strict syntax HTML.</p>\n<p>By sending <code>application/xhtml-xml</code> MIME type, browsers will treat this document as an XML file.</p>\n<p>There are many minor differences between HTML and XHTML. Here I only name a few:</p>\n<ul>\n<li>All elements should have always be closed.</li>\n<li>Attributes must be lower case.</li>\n<li>Attributes minimization is not allowed.</li>\n</ul>\n<p>For full specification visit <a href=\"http://www.w3.org/TR/xhtml1/\">w3c</a></p>\n<blockquote>\n<p>Are there any problems with serving pages as application&#x2F;xhtml+xml?</p>\n</blockquote>\n<p>By doing this will let browsers treat this document as an XML file, which turns HTML into XHTML.</p>\n<p>On IE 6,7,8 this will prompt a download dialog instead of rendering document.</p>\n<blockquote>\n<p>What are data- attributes good for?</p>\n</blockquote>\n<p>You can define your own attributes. Saving data or state in an element instead of having another variable for recording in JavaScript.</p>\n<blockquote>\n<p>Describe the difference between a cookie, sessionStorage and localStorage.</p>\n</blockquote>\n<p>Cookie</p>\n<ul>\n<li>Can access via JavaScript, or be disallowed to access via JavaScript via <code>http-only</code> attribute in header.</li>\n<li>Limited counts per domain.</li>\n<li>Only store up to 4 kb.</li>\n<li>Will be transmitted via packet in header.</li>\n<li>Can be sent to or set by server.</li>\n<li>Have various attributes to set via <code>Set-Cookie</code> attribute in header.</li>\n</ul>\n<p>Session and local storage are all HTML5’s API and also called web storage. They do mostly the same, except session storage delete data when session ends while local storage does not.</p>\n<p>Web storage can hold up to 5 to 10 MB for each domain.</p>\n<p><a href=\"http://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies\">What is the difference between localStorage, sessionStorage, session and cookies?</a></p>\n<blockquote>\n<p>Describe the difference between <code>&lt;script&gt;</code>, <code>&lt;script async&gt;</code> and <code>&lt;script defer&gt;</code>.</p>\n</blockquote>\n<p><code>&lt;script&gt;</code> - load and execute script synchronously. Browser will execute the code if encounter <code>&lt;script&gt;</code>. Will cause blocking.</p>\n<p><code>&lt;script async&gt;</code> - load and execute script asynchronously. Browser will execute the code and load other resource parallel. Will not cause blocking.</p>\n<p><code>&lt;script defer&gt;</code> - load and execute script synchronously. The only different is that it indicates browser should only execute the code only after the document is parsed.</p>\n<blockquote>\n<p>Why is it generally a good idea to position CSS <code>&lt;link&gt;</code>s between <code>&lt;head&gt;&lt;/head&gt;</code> and JS <code>&lt;script&gt;</code>s just before <code>&lt;/body&gt;</code>? Do you know any exceptions?</p>\n</blockquote>\n<p>Put CSS <code>&lt;link&gt;</code> in between <code>&lt;head&gt;</code> to avoid FOUC. Put <code>&lt;script&gt;</code> before <code>&lt;/before&gt;</code> to avoid parse blocking.</p>\n<p>Specifying <code>async</code> or <code>defer</code> in <code>&lt;script&gt;</code> if you really want to put <code>&lt;script&gt;</code> before <code>&lt;link&gt;</code>.</p>\n<blockquote>\n<p>What is progressive rendering?</p>\n</blockquote>\n<p>It’s actually an backend topic.</p>\n<blockquote>\n<p>Have you used different HTML templating languages before?</p>\n</blockquote>\n<p>ejs.</p>\n<h2 id=\"CSS-Questions\"><a href=\"#CSS-Questions\" class=\"headerlink\" title=\"CSS Questions\"></a>CSS Questions</h2><blockquote>\n<p>What is the difference between classes and ID’s in CSS?</p>\n</blockquote>\n<p>Class stands for a collection of attributes under a name. It can be applied on many elements with same name(one to many). However, ID is unique to element and can only be applied on one element with the same ID(one to one).</p>\n<blockquote>\n<p>What’s the difference between “resetting” and “normalizing” CSS? Which would you choose, and why?</p>\n</blockquote>\n<p>Reset - undecorates or sets 0 to all browser default styles. You have to specify all styles yourself.</p>\n<p>Normalize - preserves and ensures that default style on all browsers are the same.</p>\n<p>I prefer normalize because go with reset will have to do extra works.</p>\n<p><a href=\"http://stackoverflow.com/questions/6887336/what-is-the-difference-between-normalize-css-and-reset-css\">What is the difference between Normalize.css and Reset CSS?</a></p>\n<blockquote>\n<p>Describe Floats and how they work.</p>\n</blockquote>\n<p>Float is a CSS property that should be taken from the normal flow and placed to the right or left of its container. Text or any inline element will wrap around it.</p>\n<p>If an element has specified a value on float, that element’s <code>display</code> property will be set to <code>block</code>.</p>\n<p>It is always used with <code>clear</code> property to make desired element move down to the floated element. A common technique is <strong>clearfix</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Describe z-index and how stacking context is formed.</p>\n</blockquote>\n<p>When elements overlap, <code>z-index</code> specifies the displaying order of an element. Larger z-index covers element with a lower one.</p>\n<p>New elements in a container always follow parent’s <code>z-index</code> value.</p>\n<p><code>z-index</code> can be negative to have elements displaying below.</p>\n<blockquote>\n<p>What are the various clearing techniques and which is appropriate for what context?</p>\n</blockquote>\n<p>Traditional way:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clear</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">br</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;clear&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>This container should be cleared<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Overflow way:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>This container should be cleared<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Clearfix:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container clearfix&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>foo<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>bar<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span>This container should be cleared<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What are your favourite image replacement techniques and which do you use when?</p>\n</blockquote>\n<p><a href=\"https://css-tricks.com/the-image-replacement-museum/\">image replacement</a></p>\n<blockquote>\n<p>How would you approach fixing browser-specific styling issues?</p>\n</blockquote>\n<p>see “What’s the difference between “resetting” and “normalizing” CSS? Which would you choose, and why?”.</p>\n<blockquote>\n<p>What are the different ways to visually hide content (and make it available only for screen readers)?</p>\n</blockquote>\n<p><code>display: none</code> or <code>visibility: hidden</code>.</p>\n<p>Element with <code>display: none</code> will take place in view even it’s invisible.</p>\n<p>Element with <code>display: none</code> will not take place in view.</p>\n<blockquote>\n<p>Have you ever used a grid system, and if so, what do you prefer?</p>\n</blockquote>\n<p>Only experienced grid system in Twitter Bootstrap.</p>\n<blockquote>\n<p>Have you used or implemented media queries or mobile specific layouts&#x2F;CSS?</p>\n</blockquote>\n<p>Hand-made? Sure, but actually, I use Twitter Bootstrap to solve RWD problems.</p>\n<blockquote>\n<p>What are the advantages&#x2F;disadvantages of using CSS preprocessors? Describe what you like and dislike about the CSS preprocessors you have used.</p>\n</blockquote>\n<p>SCSS.</p>\n<p>Advantages:</p>\n<ul>\n<li>More ways like inheritance, variable… for writing modularized CSS.</li>\n<li>Some libraries like Bourbon, Compass provide nice polyfills.</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Extra learning&#x2F;traning required.</li>\n<li>Need to setup up working environment before work begin.</li>\n</ul>\n<blockquote>\n<p>Explain how a browser determines what elements match a CSS selector.</p>\n</blockquote>\n<p>The only thing I know is that browser matches selector from right to left.</p>\n<blockquote>\n<p>Describe pseudo-elements and discuss what they are used for.</p>\n</blockquote>\n<p>Pseudo-elements like <code>element::first-child</code> or <code>element::after</code> are special elements that make styling more easy.</p>\n<p>For example <code>p::first-line</code> will only style the first line of every paragraph.</p>\n<blockquote>\n<p>Explain your understanding of the box model and how you would tell the browser in CSS to render your layout in different box models.</p>\n</blockquote>\n<p>Box model indicates element is composed of 4 parts: margin. border, padding, content.</p>\n<ul>\n<li>Margin - an empty area used for separating area with other elements.</li>\n<li>Border - the thickness between padding and margin.</li>\n<li>Padding - extending of content area.</li>\n<li>Content - the space text&#x2F;media occupies.</li>\n</ul>\n<p>You can switch box model with <code>content-box</code> and <code>border-box</code> in <code>box-sizing</code>. Default value is <code>content-box</code>.</p>\n<ul>\n<li><code>content-box</code> - The <code>width</code> and <code>height</code> properties are measured only content size, no padding, border, or margin.</li>\n<li><code>box-sizing</code> - The <code>width</code> and <code>height</code> properties are measured including content, padding, border, no margin.</li>\n</ul>\n<blockquote>\n<p>What does * { box-sizing: border-box; } do? What are its advantages?</p>\n</blockquote>\n<p>Using <code>border-box</code> to calculate elements’ <code>width</code> and <code>height</code> is more intuitive.</p>\n<p>Say, I want to put 4 boxes in a horizontal block. Using <code>content-box</code> I have to calculate each box’s border and content to fit into container, but using <code>border-box</code> I only have to set <code>width:25%</code> on each box and set each box’s border without calculating.</p>\n<blockquote>\n<p>List as many values for the display property that you can remember.</p>\n</blockquote>\n<ul>\n<li>block</li>\n<li>inline-block</li>\n<li>inline</li>\n<li>flex</li>\n<li>inline-flex</li>\n<li>none</li>\n<li>table</li>\n<li>inline-table</li>\n<li>initial</li>\n<li>inherit</li>\n<li>…</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">Display CSS property on MDN</a></p>\n<blockquote>\n<p>What’s the difference between inline and inline-block?</p>\n</blockquote>\n<p>Browser will put elements with <code>display: inline-*</code> property on the same row. The difference between <code>inline</code> and <code>inline-block</code> is that <code>inline</code> elements with content empty won’t effect by <code>width</code> or <code>height</code>.</p>\n<blockquote>\n<p>What’s the difference between a relative, fixed, absolute and statically positioned element?</p>\n</blockquote>\n<ul>\n<li>Fixed - elements will be positioned independently and its’ position is according to the whole view.</li>\n<li>Static - default value. Elements will be positioned depending on each other whose <code>position</code> property is not <code>absolute</code> or <code>fixed</code>.</li>\n<li>Relative - enable <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code> properties, which let you move element relative to where it should be.</li>\n<li>Absolute - enable <code>top</code>, <code>bottom</code>, <code>left</code> and <code>right</code> properties. Elements with <code>position: absolute</code> will be positioned independently or be positioned according to the nearest container with <code>position: relative</code>.</li>\n</ul>\n<blockquote>\n<p>The ‘C’ in CSS stands for Cascading. How is priority determined in assigning styles (a few examples)? How can you use this system to your advantage?</p>\n</blockquote>\n<p><code>!important &gt; style &gt; id &gt; class &gt; tag</code></p>\n<p>If I really want something should not be changed, I will use <code>!important</code> to keep my style like it should be. Especially where you have other 3rd party, external stylesheets import in, styles may be conflict between each other, you will want to keep your own style untouched.</p>\n<blockquote>\n<p>What existing CSS frameworks have you used locally, or in production? How would you change&#x2F;improve them?</p>\n</blockquote>\n<p>Twitter Bootstrap, Bourbon, SCSS&#x2F;SASS.</p>\n<p>Personally, I use them to help me enhance UI or get rid of some repeat works.</p>\n<blockquote>\n<p>Have you played around with the new CSS Flexbox or Grid specs?</p>\n</blockquote>\n<p>Tried Flexbox before, enough to replace some old trick like <code>float</code> and also works really well in RWD.</p>\n<p>Tried Grid as well. It arranges layout beautifully and works well with media queries in RWD also.</p>\n<blockquote>\n<p>How is responsive design different from adaptive design?</p>\n</blockquote>\n<p>Responsive - adapt different devices with one layout with minimum change.</p>\n<ul>\n<li>pros - easy to maintain.</li>\n<li>cons - screen sizes are many, however in most RWD only have 4 layout - desktop&#x2F;latop&#x2F;tablet&#x2F;mobile, which only provides a basic comfort level, not the best user experience.</li>\n</ul>\n<p>Adaptive - adapt different devices with different layouts.</p>\n<ul>\n<li>pros - provides best experience on different devices.</li>\n<li>cons - maintaining between layouts means extra work.</li>\n</ul>\n<h2 id=\"JS-Questions\"><a href=\"#JS-Questions\" class=\"headerlink\" title=\"JS Questions:\"></a>JS Questions:</h2><blockquote>\n<p>Explain event delegation</p>\n</blockquote>\n<p>Event delegation means using parent container as children’s event delegator. For example, we have a list here:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list-1&quot;</span>&gt;</span>I am list item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list-2&quot;</span>&gt;</span>I am list item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list-3&quot;</span>&gt;</span>I am list item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>We want to get inner text when clicking on one of its child. Of course, we can add event listener to each one, but it will become a little crazy if we have to add more list item.</p>\n<p>By the power of <strong>event bubbling</strong>, there is an more elegant way to deal with this issue.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;list&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">target</span>.<span class=\"property\">innerText</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Explain how this works in JavaScript</p>\n</blockquote>\n<p><code>this</code> means the current owner of the scope.</p>\n<p>When an object is created via <code>new</code>, JS binds <code>this</code> to the newly created object.</p>\n<blockquote>\n<p>Explain how prototypal inheritance works</p>\n</blockquote>\n<p>In ES5</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">John</span> = <span class=\"keyword\">function</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">\t<span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">John</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// reference prototype to Person&#x27;s prototype</span></span><br><span class=\"line\"><span class=\"title class_\">John</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">Person</span>; <span class=\"comment\">// set John&#x27;s constructor to Person&#x27;s constructor</span></span><br></pre></td></tr></table></figure>\n\n<p>In ES6. It’s identical to ES5 prototype inheritance chain.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">John</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span>&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">suepr</span>(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What do you think of AMD vs CommonJS?</p>\n</blockquote>\n<p>AMD is an JS module standard. Its implementation is RequireJS and only works on browser side. Meanwhile CommonJS works on server side.</p>\n<p>Writing in RequireJS is somewhat cumbersome:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requirejs([<span class=\"string\">&quot;directory/anotherJsFile&quot;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">anotherJsFile</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>CommonJS is more intuitive to programmers coming from other languages:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anotherJsFile = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./directory/anotherJsFile&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObj = myObj;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = myObj;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Explain why the following doesn’t work as an IIFE: function foo(){ }();. What needs to be changed to properly make it an IIFE?</p>\n</blockquote>\n<p><code>function foo()&#123; &#125;()</code> which is equal to <code>undefined()</code>. Executing things undefined is not possible.</p>\n<p>The correct way is:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something.</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What’s the difference between a variable that is: null, undefined or undeclared? How would you go about checking for any of these states?</p>\n</blockquote>\n<ul>\n<li>undeclared - use variables before declaring interpreter will throw <code>ReferenceError: variable is not defined</code> in your face.</li>\n<li>undefined - use an declared variable without initializing its value will return <code>undefined</code>.</li>\n<li>null - <code>null</code> is a value to represent empty.</li>\n</ul>\n<p>Checking state, assume its in Chrome console:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; a</span><br><span class=\"line\"><span class=\"title class_\">ReferenceError</span>: a is not defined</span><br><span class=\"line\">&gt; <span class=\"keyword\">var</span> a</span><br><span class=\"line\">&gt; a</span><br><span class=\"line\"><span class=\"literal\">undefined</span></span><br><span class=\"line\">&gt; a === <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What is a closure, and how&#x2F;why would you use one?</p>\n</blockquote>\n<p>The most common usage is to return private member’s value without exposing it.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> secret = &#123;<span class=\"attr\">code</span>: <span class=\"string\">&quot;can&#x27;t tell you!&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> secret;</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Personally I would try to avoid using it if possible because closure extends variables’ lifespan to its scope. This causes memory leak easily plus it’s quite confusing to people coming from other languages.</p>\n<blockquote>\n<p>What’s a typical use case for anonymous functions?</p>\n</blockquote>\n<p>When I only need to do things one-time only or don’t even invoke it in further.</p>\n<blockquote>\n<p>How do you organize your code? (module pattern, classical inheritance?)</p>\n</blockquote>\n<p>I write ES6 with Babel and organize my module with ES6 <code>import</code> and <code>export</code> features.</p>\n<p>As for <code>inheritance</code>, use <code>extends</code> instead.</p>\n<blockquote>\n<p>What’s the difference between host objects and native objects?</p>\n</blockquote>\n<p>Host objects means browser specific features. For example, DOM objects in Chrome is possibly different from IE.</p>\n<p>Native objects means JavaScript’s core feature like <code>array</code> or <code>Object</code>.</p>\n<blockquote>\n<p>Difference between: function Person(){}, var person &#x3D; Person(), and var person &#x3D; new Person()?</p>\n</blockquote>\n<ul>\n<li><code>function Person()&#123;&#125;</code> - a function.</li>\n<li><code>var person = Person()</code> - returns the result after executing Person function.</li>\n<li><code>var person = new Person()</code> - bind <code>this</code> in <code>person</code> scope to <code>person</code>.</li>\n</ul>\n<blockquote>\n<p>What’s the difference between .call and .apply?</p>\n</blockquote>\n<p>Both of them invokes function they are calling for.</p>\n<p>First argument accepts what <code>this</code> refers to when running that function.</p>\n<p>The only difference is that <code>.call</code> accepts rest of the arguments with <strong>arguments list</strong> while <code>.apply</code> accepts <strong>array of arguments</strong>.</p>\n<blockquote>\n<p>Explain Function.prototype.bind.</p>\n</blockquote>\n<p>Indicates what <code>this</code> refers to when running that function.</p>\n<p><code>Function.prototype.bind</code> only returns function, not executing.</p>\n<blockquote>\n<p>When would you use document.write()?</p>\n</blockquote>\n<p>Testing.</p>\n<blockquote>\n<p>What’s the difference between feature detection, feature inference, and using the UA string?</p>\n</blockquote>\n<p>Feature detection tests the existence of a feature.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">XMLHttpRequest</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Feature inference checks if one feature exits, but uses another feature.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">getElementByTagName</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myEle&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UA string means identifying browser version with user agent. It should not be used anymore because you will have to maintain various version for different browsers.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(navigator.<span class=\"property\">userAgent</span>.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;MSIE 7&quot;</span>))&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Explain AJAX in as much detail as possible.</p>\n</blockquote>\n<p>AJAX stands for Asynchronous JavaScript and XML. It’s a technique to retrieve data from server without reloading the whole page.</p>\n<p>This is how it is done in vanilla JS and modern browser.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ajax = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">ajax.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ajax.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">ajax.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://mydomain.com&quot;</span>);</span><br><span class=\"line\">ajax.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Explain how JSONP works (and how it’s not really AJAX).</p>\n</blockquote>\n<p>JSONP stands for JSON with Padding. JSONP doesn’t involve in AJAX at all and actually. To achieve JSONP, we need the help from the server side. Server side’s code looks like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;url&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;querystring&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.<span class=\"title function_\">createServer</span>(<span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queryTemp = url.<span class=\"title function_\">parse</span>(req.<span class=\"property\">url</span>).<span class=\"property\">query</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> query = querystring.<span class=\"title function_\">parse</span>(queryTemp);</span><br><span class=\"line\">  res.<span class=\"title function_\">writeHeader</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;text/plain&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  res.<span class=\"title function_\">end</span>(query.<span class=\"property\">callback</span> + <span class=\"string\">&quot;(&#x27;Hello JSONP!&#x27;)&quot;</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">3001</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Client:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jsonp test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;jsonp&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>jsonp!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> text = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;text&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> button = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;button&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> jsonp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsonp&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">function</span> <span class=\"title function_\">contentLoaded</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          jsonp.<span class=\"property\">src</span>= <span class=\"string\">&quot;http://localhost:3001/?callback=changeText&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">function</span> <span class=\"title function_\">changeText</span>(<span class=\"params\">string</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        text.<span class=\"title function_\">appendChild</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(string));</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, contentLoaded);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>We fetch data by changing <code>&lt;script&gt;</code>‘s <code>src</code> value to our target URL, and append full JavaScript code by gluing with result:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jsonp&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"title function_\">changeText</span>(<span class=\"string\">&#x27;Hello JSONP!&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Have you ever used JavaScript templating? If so, what libraries have you used?</p>\n</blockquote>\n<p>EJS.</p>\n<blockquote>\n<p>Explain “hoisting”.</p>\n</blockquote>\n<p>Hoisting means any variable declaration will be processed before any code is executed in <strong>current scope</strong>. Take code below for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br></pre></td></tr></table></figure>\n\n<p>is equal to</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\">a = <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Describe event bubbling.</p>\n</blockquote>\n<p>When an event is fired, it runs a callback function defined external. The event will keep <strong>bubbling up</strong> to its ancestor container until it hits the root of DOM or <code>event.stopPropagation()</code>.</p>\n<p>See “event delegation” for detail.</p>\n<blockquote>\n<p>What’s the difference between an “attribute” and a “property”?</p>\n</blockquote>\n<p>Property is for DOM object or native JS object and attribute is for HTML tag.</p>\n<blockquote>\n<p>Why is extending built-in JavaScript objects not a good idea?</p>\n</blockquote>\n<p>If you only have your own code in your work, that’s fine, but when libraries are add in, extending native object may cause other’s code broken because of overwriting other’s code.</p>\n<blockquote>\n<p>Difference between document load event and document ready event?</p>\n</blockquote>\n<p>There is no such <code>ready</code> event in DOM, so I assume <code>document ready</code> refers to jQuery’s <code>$(document).ready</code> here.</p>\n<p><code>load</code> event in DOM tells browser to do something after <strong>everthing including frames, images, asynchronous JavaScripts</strong> are fully loaded.</p>\n<p><code>$(document).ready</code> indicates that it should occur as early as possible after the document has loaded.</p>\n<blockquote>\n<p>What is the difference between &#x3D;&#x3D; and &#x3D;&#x3D;&#x3D;?</p>\n</blockquote>\n<p><code>==</code> equals in value, <code>===</code> equals in reference.</p>\n<blockquote>\n<p>Explain the same-origin policy with regards to JavaScript.</p>\n</blockquote>\n<p>Same-Origin-Policy is an idea to prevent malicious script from accessing or intercepting data’s in client browser. Same-Oirigin-Policy allows HTTP action request only if document and server are under the same domain.</p>\n<p>There are two ways to “bypass” SOP, one is JSONP, the other is through CORS(Cross Origin Resource Sharing).</p>\n<p>Read “Explain how JSONP works (and how it’s not really AJAX).” for JSONP details.</p>\n<p>CORS needs cooperation from server setting. You have to set <code>Access-Control-Origin-Allow: yourdomain.com</code> to domains which you want it to be allowed in header in order to access resource via normal AJAX call.</p>\n<blockquote>\n<p>Why is it called a Ternary expression, what does the word “Ternary” indicate?</p>\n</blockquote>\n<p>Because it takes 3 arguments with 2 operators. A common Ternary expression is <code>:?</code>.</p>\n<blockquote>\n<p>What is “use strict”;? what are the advantages and disadvantages to using it?</p>\n</blockquote>\n<p><code>use strict;</code> enables strict mode for JS parser. Strict mode is enabled by adding <code>use strict;</code> at the top of file or function scope.</p>\n<p>Advantages - converts mistakes into errors.</p>\n<ul>\n<li>Using undeclared variable throws error.</li>\n<li>Using reserved keywords throws error.</li>\n<li>Naming arguments, properties with the same name throws error.</li>\n<li>and so on…</li>\n</ul>\n<p>Disadvantages</p>\n<ul>\n<li>If you import script with strict mode on before any other scripts, you will force other scripts to go strict mode.</li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">strict mode on MDN</a></p>\n<blockquote>\n<p>Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?</p>\n</blockquote>\n<p>Because you probably will make a variable with same name as others will. That makes conflict.</p>\n<blockquote>\n<p>Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those?</p>\n</blockquote>\n<p><code>load</code> event tells browser to do something only after <strong>everthing including frames, images, asynchronous JavaScripts</strong> are fully loaded.</p>\n<p>If you want event function to execute before fully loaded frames, images, async scripts, use <code>domcontentloaded</code> instead.</p>\n<blockquote>\n<p>Explain what a single page app is and how to make one SEO-friendly.</p>\n</blockquote>\n<blockquote>\n<p>What is the extent of your experience with Promises and&#x2F;or their polyfills?</p>\n</blockquote>\n<p>Only tried it in ES6. Basic usage:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(resolve)&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">reslove</span>(<span class=\"string\">&quot;successed&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">rejected</span>(<span class=\"string\">&quot;failed&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The biggest advangtage of Promise is that it solves the problem of callback hell.</p>\n<p>Polyfills:</p>\n<ul>\n<li>jQuery - Deferred</li>\n<li>Bluebird</li>\n<li>Q</li>\n<li>When</li>\n</ul>\n<blockquote>\n<p>What are the pros and cons of using Promises instead of callbacks?</p>\n</blockquote>\n<p>pros - solves the problem of callback hell.<br>cons - currently require external library or polyfill to achieve this.</p>\n<blockquote>\n<p>What are some of the advantages&#x2F;disadvantages of writing JavaScript code in a language that compiles to JavaScript?</p>\n</blockquote>\n<p>Pros</p>\n<ul>\n<li>Benefit libraries that only exist in NodeJS world. (Make CommonJS stuff avialable on browser)</li>\n<li>The newest of language features.</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Have to setup environment before working.</li>\n<li>Have to orgranize more directories.</li>\n<li>Source map is needed.</li>\n</ul>\n<blockquote>\n<p>What tools and techniques do you use debugging JavaScript code?</p>\n</blockquote>\n<p>Chrome Dev Tools.</p>\n<blockquote>\n<p>What language constructions do you use for iterating over object properties and array items?</p>\n</blockquote>\n<p>Array</p>\n<ul>\n<li>classic <code>for</code></li>\n<li><code>arr.forEach()</code></li>\n</ul>\n<p>Object</p>\n<ul>\n<li><code>for(var key in obj)</code></li>\n<li><code>Object.keys(obj).forEach()</code></li>\n</ul>\n<blockquote>\n<p>Explain the difference between mutable and immutable objects. What is an example of an immutable object in JavaScript? What are the pros and cons of immutability? How can you achieve immutability in your own code?</p>\n</blockquote>\n<p>Mutable object means its state is allowed to be changed over time. Immutable object’s value doesn’t change from the time it was created.</p>\n<p>Immutable examples are primitive types like <code>String</code>, <code>Number</code>. You can’t change the definition of <code>2</code> after executing <code>2 + 5</code>. No matter how you operate strings, the definition of <code>c</code> won’t change.</p>\n<p>Mutable examples are <code>array</code>, <code>object</code> or anything opposite to immutability. You can change the value of an array or object anytime and the result will be what you desired.</p>\n<p>Immutable object won’t be changed after it has been initialized. We can take advantage of this. Making immutable objects into a collection of cache since these objects don’t change at all. Our program is actually accessing the same data. This is a good approach to saving memory by taking advantage of immutable. The downside of immutability is that it actually involving constantly deep clone and assigning. This is an overhead of trading computing speed for memory.</p>\n<p>To achieve immutability on <code>array</code> or <code>object</code> or any type you want, you have to do deep clone, or simply use library like <code>immutable.js</code> developed by Facebook.</p>\n<blockquote>\n<p>Explain the difference between synchronous and asynchronous functions.</p>\n</blockquote>\n<p>The difference is that sync function is <strong>blocking</strong> while async is <strong>non-blocking</strong>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">blocking</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nonBlocking</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>What is event loop? What is the difference between call stack and task queue?</p>\n</blockquote>\n<p>Event loop is how JavaScript with single-threaded performs tasks without blocking.</p>\n<p>Event loop is a queue of callback functions. When a asynchronous function executes, it is pushed into task queue and JavaScript will only start processing task queue after codes after async function are executed.</p>\n<p>The difference between call stack and task queue is that <strong>task queue</strong> is a place where JavaScrip schedules async function while <strong>call stack</strong> is a place for JavaScript to trace what the current function is.</p>\n<h2 id=\"Network-Questions\"><a href=\"#Network-Questions\" class=\"headerlink\" title=\"Network Questions\"></a>Network Questions</h2><blockquote>\n<p>Traditionally, why has it been better to serve site assets from multiple domains?</p>\n</blockquote>\n<p>Because request is costly, so modern browsers establish 6 to 8 reusable connections to improve the download speed to prevent repeatly requsting, and because there is a limited connection count for each domain, we put resources on multiple domains.</p>\n<blockquote>\n<p>Do your best to describe the process from the time you type in a website’s URL to it finishing loading on your screen.</p>\n</blockquote>\n<p>Assume there is only HTTP request, no proxies:</p>\n<ol>\n<li>Browser look up cache, if document exists in cache and not expires, then renders it.</li>\n<li>OS makes DNS lookup of the IP address of given URL and replies to browser.</li>\n<li>If that URL exists, browser opens a TCP connection to server.</li>\n<li>Browser sends HTTP request to server.</li>\n<li>Server parses HTTP request, sends it and may or may not close TCP connection(depends on <code>keep-alive</code> in header setting).</li>\n<li>Browser parses HTTP status code and depends on what code it is to decide what to render.</li>\n</ol>\n<blockquote>\n<p>What are the differences between Long-Polling, Websockets and Server-Sent Events?</p>\n</blockquote>\n<p>Long-Polling - use <code>setTimeout</code> and <code>AJAX</code> technique to repeatedly send request and wait for server response. Before websockets, web developer used to use this technique to simulate persistent connection.</p>\n<p>Websocket - a real persistent connection via TCP. Unlike long-polling have to setup HTTP connection with constantly requesting, once establishing websocket you don’t have to send another request to maintain the connection.</p>\n<p>Server-sent - also called server push technique. When it comes to data exchange, servers are always passive, but with server push, server can be active too. Server push is like broadcast, whoever connects to the server is a subscriber. Server push can push desired event on specific channel.</p>\n<blockquote>\n<p>Explain the following request and response headers:<br>Diff. between Expires, Date, Age and If-Modified-…<br>Do Not Track<br>Cache-Control<br>Transfer-Encoding<br>ETag<br>X-Frame-Options</p>\n</blockquote>\n<ul>\n<li>Expires - will be labeled stale after specified date.</li>\n<li>Date - The date and time that message was sent.</li>\n<li>Age - The age that object has lived in seconds.</li>\n<li>If-Modified-Since - will return 304 unchanged status code.</li>\n<li>Transfer-encoding - In normal circumstance server will tell client the content length which server sent, but in some circumstance the content’s length remains unknown, and server will send content in chunks. Specifying Transfer-encoding tells client server is sending in this way.</li>\n<li>ETag - an hash which is used to identify files’s version.</li>\n<li>X-Frame-Options - clickjacking protection.</li>\n<li>Cache-Control - an attribute tells browser how</li>\n</ul>\n<blockquote>\n<p>What are HTTP actions? List all HTTP actions that you know, and explain them.</p>\n</blockquote>\n<ul>\n<li>GET - request a resource.</li>\n<li>POST - create or update an resource.</li>\n<li>PUT - update an existing resource.</li>\n<li>DELETE - delete resource.</li>\n<li>PATCH - partially modification to an resource.</li>\n<li>TRACE - echoes the received request so you can see information that is changed by intermediated servers.</li>\n<li>HEAD - request a response header identical to GET method. It’s used to get meta information without sending the whole content.</li>\n<li>OPTIONS - returns what method target server supports for a specified URL.</li>\n<li>CONNECT - converts a request connection to as transparent TCP&#x2F;IP.</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cln99ol7w0002vfvg3ic0fbed","tag_id":"cln99ol7z0004vfvg0q753orm","_id":"cln99ol820009vfvg0bdp7lbz"},{"post_id":"cln99ol7x0003vfvge0xuccze","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol84000evfvg10gc4e9u"},{"post_id":"cln99ol800005vfvg18qcej4u","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol86000ivfvg1581223u"},{"post_id":"cln99ol800006vfvgdvqb972o","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol87000mvfvgd5dghsyk"},{"post_id":"cln99ol810007vfvgg7hpd5z6","tag_id":"cln99ol86000kvfvgc0wz968k","_id":"cln99ol88000tvfvgblga0vv3"},{"post_id":"cln99ol810007vfvgg7hpd5z6","tag_id":"cln99ol87000ovfvgbgk9bold","_id":"cln99ol89000vvfvg9dz71cdu"},{"post_id":"cln99ol82000avfvg8ti02vfr","tag_id":"cln99ol88000rvfvg876fdivx","_id":"cln99ol8b0014vfvg434dahej"},{"post_id":"cln99ol82000avfvg8ti02vfr","tag_id":"cln99ol89000xvfvgg3ojg94g","_id":"cln99ol8b0015vfvg8cbsdbup"},{"post_id":"cln99ol82000avfvg8ti02vfr","tag_id":"cln99ol890010vfvg4yzz1qs7","_id":"cln99ol8b0017vfvghgdsbnhu"},{"post_id":"cln99ol83000bvfvg7waj2am1","tag_id":"cln99ol89000xvfvgg3ojg94g","_id":"cln99ol8b0019vfvg4hzafdmb"},{"post_id":"cln99ol83000bvfvg7waj2am1","tag_id":"cln99ol8b0016vfvg61yag174","_id":"cln99ol8b001avfvgcqhsg76c"},{"post_id":"cln99ol83000bvfvg7waj2am1","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol8b001cvfvgd7tbe1o2"},{"post_id":"cln99ol84000dvfvgdifd22mi","tag_id":"cln99ol89000xvfvgg3ojg94g","_id":"cln99ol8c001fvfvg3z8q6c7h"},{"post_id":"cln99ol84000dvfvgdifd22mi","tag_id":"cln99ol8b001bvfvgaeeohawc","_id":"cln99ol8c001gvfvge21d3i7i"},{"post_id":"cln99ol84000dvfvgdifd22mi","tag_id":"cln99ol8c001dvfvg7h7ddlu3","_id":"cln99ol8c001ivfvg9bii6rqf"},{"post_id":"cln99ol84000fvfvg660adrmo","tag_id":"cln99ol8b001bvfvgaeeohawc","_id":"cln99ol8c001jvfvg602oc9er"},{"post_id":"cln99ol85000hvfvgfk1mfi0v","tag_id":"cln99ol8b001bvfvgaeeohawc","_id":"cln99ol8c001lvfvgceqw56fp"},{"post_id":"cln99ol86000jvfvgepyv1iqb","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol8d001ovfvgfu213mub"},{"post_id":"cln99ol86000jvfvgepyv1iqb","tag_id":"cln99ol86000kvfvgc0wz968k","_id":"cln99ol8d001pvfvghepb4vnj"},{"post_id":"cln99ol86000jvfvgepyv1iqb","tag_id":"cln99ol87000ovfvgbgk9bold","_id":"cln99ol8d001rvfvg0zmncdpo"},{"post_id":"cln99ol87000lvfvg7aav8lvw","tag_id":"cln99ol8c001nvfvg6sfbhqux","_id":"cln99ol8d001uvfvgdi2345ds"},{"post_id":"cln99ol87000lvfvg7aav8lvw","tag_id":"cln99ol8d001qvfvgdpu1c3l2","_id":"cln99ol8d001vvfvg144h98fu"},{"post_id":"cln99ol87000lvfvg7aav8lvw","tag_id":"cln99ol8c001dvfvg7h7ddlu3","_id":"cln99ol8d001xvfvghztt4dc9"},{"post_id":"cln99ol87000nvfvg3jc8hzah","tag_id":"cln99ol8d001tvfvgdhdea0cp","_id":"cln99ol8d001zvfvg05uk1o82"},{"post_id":"cln99ol87000nvfvg3jc8hzah","tag_id":"cln99ol8d001qvfvgdpu1c3l2","_id":"cln99ol8d0020vfvgb8c4e54s"},{"post_id":"cln99ol87000pvfvg2cznhwbc","tag_id":"cln99ol8d001qvfvgdpu1c3l2","_id":"cln99ol8e0025vfvg9svqc0ma"},{"post_id":"cln99ol87000pvfvg2cznhwbc","tag_id":"cln99ol8b001bvfvgaeeohawc","_id":"cln99ol8e0026vfvg3vda2hxh"},{"post_id":"cln99ol87000pvfvg2cznhwbc","tag_id":"cln99ol8e0022vfvg6akwefy5","_id":"cln99ol8e0028vfvggut58mi6"},{"post_id":"cln99ol87000pvfvg2cznhwbc","tag_id":"cln99ol8e0023vfvgggd65yxf","_id":"cln99ol8e0029vfvgdpj72iup"},{"post_id":"cln99ol88000qvfvg0g51ewei","tag_id":"cln99ol8e0024vfvg2cwqak4y","_id":"cln99ol8e002bvfvggnv57nqt"},{"post_id":"cln99ol88000svfvg4zu7874n","tag_id":"cln99ol89000xvfvgg3ojg94g","_id":"cln99ol8f002evfvg2pgmg8dr"},{"post_id":"cln99ol88000svfvg4zu7874n","tag_id":"cln99ol8e002avfvgc0kv5raq","_id":"cln99ol8f002fvfvgciaqffa5"},{"post_id":"cln99ol88000svfvg4zu7874n","tag_id":"cln99ol88000rvfvg876fdivx","_id":"cln99ol8f002hvfvg0n5i4jqk"},{"post_id":"cln99ol88000svfvg4zu7874n","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol8f002ivfvgbnnx4do5"},{"post_id":"cln99ol88000uvfvgdv3te5u4","tag_id":"cln99ol87000ovfvgbgk9bold","_id":"cln99ol8f002kvfvgccu959fs"},{"post_id":"cln99ol88000uvfvgdv3te5u4","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol8f002lvfvg3q1i022q"},{"post_id":"cln99ol88000uvfvgdv3te5u4","tag_id":"cln99ol8e002dvfvgh49ad2bd","_id":"cln99ol8f002nvfvg00fke226"},{"post_id":"cln99ol88000uvfvgdv3te5u4","tag_id":"cln99ol8f002gvfvg4z6142i7","_id":"cln99ol8f002ovfvgfw185v4s"},{"post_id":"cln99ol89000wvfvg6l1pbrec","tag_id":"cln99ol87000ovfvgbgk9bold","_id":"cln99ol8f002qvfvg7pw09sv5"},{"post_id":"cln99ol89000wvfvg6l1pbrec","tag_id":"cln99ol89000xvfvgg3ojg94g","_id":"cln99ol8f002rvfvghd496a5n"},{"post_id":"cln99ol89000yvfvggluv2qx8","tag_id":"cln99ol87000ovfvgbgk9bold","_id":"cln99ol8f002tvfvggejc49z0"},{"post_id":"cln99ol89000yvfvggluv2qx8","tag_id":"cln99ol8f002mvfvg5bf55wy1","_id":"cln99ol8f002uvfvgbc3e5wgt"},{"post_id":"cln99ol89000yvfvggluv2qx8","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol8g002wvfvg8zrlgv12"},{"post_id":"cln99ol89000yvfvggluv2qx8","tag_id":"cln99ol8f002pvfvgew8j5un9","_id":"cln99ol8g002xvfvghzdv48ib"},{"post_id":"cln99ol89000zvfvgcl680diu","tag_id":"cln99ol8f002svfvgcn5b5gsx","_id":"cln99ol8g0033vfvg99uq57ey"},{"post_id":"cln99ol89000zvfvgcl680diu","tag_id":"cln99ol8f002vvfvg75j95i7v","_id":"cln99ol8g0034vfvg4vab1yol"},{"post_id":"cln99ol89000zvfvgcl680diu","tag_id":"cln99ol8d001qvfvgdpu1c3l2","_id":"cln99ol8h0036vfvgf2keb9se"},{"post_id":"cln99ol89000zvfvgcl680diu","tag_id":"cln99ol8c001dvfvg7h7ddlu3","_id":"cln99ol8h0037vfvgfc9kg7rd"},{"post_id":"cln99ol89000zvfvgcl680diu","tag_id":"cln99ol8b001bvfvgaeeohawc","_id":"cln99ol8h0039vfvg9f051cjj"},{"post_id":"cln99ol89000zvfvgcl680diu","tag_id":"cln99ol8d001tvfvgdhdea0cp","_id":"cln99ol8h003avfvghywggwql"},{"post_id":"cln99ol8a0011vfvg7b1ngza0","tag_id":"cln99ol87000ovfvgbgk9bold","_id":"cln99ol8h003cvfvgdiiw7835"},{"post_id":"cln99ol8a0011vfvg7b1ngza0","tag_id":"cln99ol8f002mvfvg5bf55wy1","_id":"cln99ol8h003dvfvg86ci7ptl"},{"post_id":"cln99ol8a0011vfvg7b1ngza0","tag_id":"cln99ol820008vfvg73lo2p4t","_id":"cln99ol8h003evfvggtaycoxf"},{"post_id":"cln99ol8a0011vfvg7b1ngza0","tag_id":"cln99ol8f002pvfvgew8j5un9","_id":"cln99ol8h003fvfvg3q670i9e"},{"post_id":"cln99ol8a0012vfvgd9reea05","tag_id":"cln99ol89000xvfvgg3ojg94g","_id":"cln99ol8h003gvfvg7ldtf9sw"},{"post_id":"cln99ol8a0012vfvgd9reea05","tag_id":"cln99ol8d001qvfvgdpu1c3l2","_id":"cln99ol8h003hvfvgbw2m7d8e"},{"post_id":"cln99ol8a0012vfvgd9reea05","tag_id":"cln99ol8h003bvfvg6cdl7wej","_id":"cln99ol8h003ivfvgeqan45h8"}],"Tag":[{"name":"octopress","_id":"cln99ol7z0004vfvg0q753orm"},{"name":"javascript","_id":"cln99ol820008vfvg73lo2p4t"},{"name":"concurrent","_id":"cln99ol86000kvfvgc0wz968k"},{"name":"meta","_id":"cln99ol87000ovfvgbgk9bold"},{"name":"mobile","_id":"cln99ol88000rvfvg876fdivx"},{"name":"frontend","_id":"cln99ol89000xvfvgg3ojg94g"},{"name":"testing","_id":"cln99ol890010vfvg4yzz1qs7"},{"name":"HTML","_id":"cln99ol8b0016vfvg61yag174"},{"name":"HTTP/HTTPS","_id":"cln99ol8b001bvfvgaeeohawc"},{"name":"network","_id":"cln99ol8c001dvfvg7h7ddlu3"},{"name":"websocket","_id":"cln99ol8c001nvfvg6sfbhqux"},{"name":"web","_id":"cln99ol8d001qvfvgdpu1c3l2"},{"name":"backend","_id":"cln99ol8d001tvfvgdhdea0cp"},{"name":"AJAX","_id":"cln99ol8e0022vfvg6akwefy5"},{"name":"CORS","_id":"cln99ol8e0023vfvgggd65yxf"},{"name":"git","_id":"cln99ol8e0024vfvg2cwqak4y"},{"name":"PWA","_id":"cln99ol8e002avfvgc0kv5raq"},{"name":"redux","_id":"cln99ol8e002dvfvgh49ad2bd"},{"name":"architecture","_id":"cln99ol8f002gvfvg4z6142i7"},{"name":"programming","_id":"cln99ol8f002mvfvg5bf55wy1"},{"name":"FP","_id":"cln99ol8f002pvfvgew8j5un9"},{"name":"GraphQL","_id":"cln99ol8f002svfvgcn5b5gsx"},{"name":"REST","_id":"cln99ol8f002vvfvg75j95i7v"},{"name":"interview","_id":"cln99ol8h003bvfvg6cdl7wej"}]}}